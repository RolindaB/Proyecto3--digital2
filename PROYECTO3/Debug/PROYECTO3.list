
PROYECTO3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b5c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08006d20  08006d20  00007d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d98  08006d98  00014360  2**0
                  CONTENTS
  4 .ARM          00000008  08006d98  08006d98  00007d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006da0  08006da0  00014360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006da0  08006da0  00007da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006da4  08006da4  00007da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000c360  20000000  08006da8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  2000c360  08013108  00014360  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000c534  08013108  00014534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014360  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e23e  00000000  00000000  00014390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002008  00000000  00000000  000225ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  000245d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f1  00000000  00000000  00025278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e54  00000000  00000000  00025c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e6c  00000000  00000000  00046abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce55a  00000000  00000000  00057929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00125e83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034dc  00000000  00000000  00125ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001293a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000c360 	.word	0x2000c360
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08006d08 	.word	0x08006d08

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000c364 	.word	0x2000c364
 8000200:	08006d08 	.word	0x08006d08

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b96a 	b.w	8000500 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	460c      	mov	r4, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14e      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000250:	4694      	mov	ip, r2
 8000252:	458c      	cmp	ip, r1
 8000254:	4686      	mov	lr, r0
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	d962      	bls.n	8000322 <__udivmoddi4+0xde>
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0320 	rsb	r3, r2, #32
 8000262:	4091      	lsls	r1, r2
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	fa0c fc02 	lsl.w	ip, ip, r2
 800026c:	4319      	orrs	r1, r3
 800026e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000272:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000276:	fa1f f68c 	uxth.w	r6, ip
 800027a:	fbb1 f4f7 	udiv	r4, r1, r7
 800027e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000282:	fb07 1114 	mls	r1, r7, r4, r1
 8000286:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028a:	fb04 f106 	mul.w	r1, r4, r6
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f104 30ff 	add.w	r0, r4, #4294967295
 800029a:	f080 8112 	bcs.w	80004c2 <__udivmoddi4+0x27e>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 810f 	bls.w	80004c2 <__udivmoddi4+0x27e>
 80002a4:	3c02      	subs	r4, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a59      	subs	r1, r3, r1
 80002aa:	fa1f f38e 	uxth.w	r3, lr
 80002ae:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b2:	fb07 1110 	mls	r1, r7, r0, r1
 80002b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ba:	fb00 f606 	mul.w	r6, r0, r6
 80002be:	429e      	cmp	r6, r3
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x94>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ca:	f080 80fc 	bcs.w	80004c6 <__udivmoddi4+0x282>
 80002ce:	429e      	cmp	r6, r3
 80002d0:	f240 80f9 	bls.w	80004c6 <__udivmoddi4+0x282>
 80002d4:	4463      	add	r3, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	1b9b      	subs	r3, r3, r6
 80002da:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa6>
 80002e2:	40d3      	lsrs	r3, r2
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xba>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb4>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa6>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x150>
 8000306:	42a3      	cmp	r3, r4
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xcc>
 800030a:	4290      	cmp	r0, r2
 800030c:	f0c0 80f0 	bcc.w	80004f0 <__udivmoddi4+0x2ac>
 8000310:	1a86      	subs	r6, r0, r2
 8000312:	eb64 0303 	sbc.w	r3, r4, r3
 8000316:	2001      	movs	r0, #1
 8000318:	2d00      	cmp	r5, #0
 800031a:	d0e6      	beq.n	80002ea <__udivmoddi4+0xa6>
 800031c:	e9c5 6300 	strd	r6, r3, [r5]
 8000320:	e7e3      	b.n	80002ea <__udivmoddi4+0xa6>
 8000322:	2a00      	cmp	r2, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x204>
 8000328:	eba1 040c 	sub.w	r4, r1, ip
 800032c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000330:	fa1f f78c 	uxth.w	r7, ip
 8000334:	2101      	movs	r1, #1
 8000336:	fbb4 f6f8 	udiv	r6, r4, r8
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb08 4416 	mls	r4, r8, r6, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb07 f006 	mul.w	r0, r7, r6
 800034a:	4298      	cmp	r0, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x11c>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 34ff 	add.w	r4, r6, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x11a>
 8000358:	4298      	cmp	r0, r3
 800035a:	f200 80cd 	bhi.w	80004f8 <__udivmoddi4+0x2b4>
 800035e:	4626      	mov	r6, r4
 8000360:	1a1c      	subs	r4, r3, r0
 8000362:	fa1f f38e 	uxth.w	r3, lr
 8000366:	fbb4 f0f8 	udiv	r0, r4, r8
 800036a:	fb08 4410 	mls	r4, r8, r0, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb00 f707 	mul.w	r7, r0, r7
 8000376:	429f      	cmp	r7, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x148>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x146>
 8000384:	429f      	cmp	r7, r3
 8000386:	f200 80b0 	bhi.w	80004ea <__udivmoddi4+0x2a6>
 800038a:	4620      	mov	r0, r4
 800038c:	1bdb      	subs	r3, r3, r7
 800038e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x9c>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a4:	fa04 f301 	lsl.w	r3, r4, r1
 80003a8:	ea43 030c 	orr.w	r3, r3, ip
 80003ac:	40f4      	lsrs	r4, r6
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	0c38      	lsrs	r0, r7, #16
 80003b4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b8:	fbb4 fef0 	udiv	lr, r4, r0
 80003bc:	fa1f fc87 	uxth.w	ip, r7
 80003c0:	fb00 441e 	mls	r4, r0, lr, r4
 80003c4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c8:	fb0e f90c 	mul.w	r9, lr, ip
 80003cc:	45a1      	cmp	r9, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d90a      	bls.n	80003ea <__udivmoddi4+0x1a6>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003da:	f080 8084 	bcs.w	80004e6 <__udivmoddi4+0x2a2>
 80003de:	45a1      	cmp	r9, r4
 80003e0:	f240 8081 	bls.w	80004e6 <__udivmoddi4+0x2a2>
 80003e4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	eba4 0409 	sub.w	r4, r4, r9
 80003ee:	fa1f f983 	uxth.w	r9, r3
 80003f2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f6:	fb00 4413 	mls	r4, r0, r3, r4
 80003fa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000402:	45a4      	cmp	ip, r4
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x1d2>
 8000406:	193c      	adds	r4, r7, r4
 8000408:	f103 30ff 	add.w	r0, r3, #4294967295
 800040c:	d267      	bcs.n	80004de <__udivmoddi4+0x29a>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d965      	bls.n	80004de <__udivmoddi4+0x29a>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041a:	fba0 9302 	umull	r9, r3, r0, r2
 800041e:	eba4 040c 	sub.w	r4, r4, ip
 8000422:	429c      	cmp	r4, r3
 8000424:	46ce      	mov	lr, r9
 8000426:	469c      	mov	ip, r3
 8000428:	d351      	bcc.n	80004ce <__udivmoddi4+0x28a>
 800042a:	d04e      	beq.n	80004ca <__udivmoddi4+0x286>
 800042c:	b155      	cbz	r5, 8000444 <__udivmoddi4+0x200>
 800042e:	ebb8 030e 	subs.w	r3, r8, lr
 8000432:	eb64 040c 	sbc.w	r4, r4, ip
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	40cb      	lsrs	r3, r1
 800043c:	431e      	orrs	r6, r3
 800043e:	40cc      	lsrs	r4, r1
 8000440:	e9c5 6400 	strd	r6, r4, [r5]
 8000444:	2100      	movs	r1, #0
 8000446:	e750      	b.n	80002ea <__udivmoddi4+0xa6>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f103 	lsr.w	r1, r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa24 f303 	lsr.w	r3, r4, r3
 8000458:	4094      	lsls	r4, r2
 800045a:	430c      	orrs	r4, r1
 800045c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000460:	fa00 fe02 	lsl.w	lr, r0, r2
 8000464:	fa1f f78c 	uxth.w	r7, ip
 8000468:	fbb3 f0f8 	udiv	r0, r3, r8
 800046c:	fb08 3110 	mls	r1, r8, r0, r3
 8000470:	0c23      	lsrs	r3, r4, #16
 8000472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000476:	fb00 f107 	mul.w	r1, r0, r7
 800047a:	4299      	cmp	r1, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x24c>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 36ff 	add.w	r6, r0, #4294967295
 8000486:	d22c      	bcs.n	80004e2 <__udivmoddi4+0x29e>
 8000488:	4299      	cmp	r1, r3
 800048a:	d92a      	bls.n	80004e2 <__udivmoddi4+0x29e>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1a5b      	subs	r3, r3, r1
 8000492:	b2a4      	uxth	r4, r4
 8000494:	fbb3 f1f8 	udiv	r1, r3, r8
 8000498:	fb08 3311 	mls	r3, r8, r1, r3
 800049c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a0:	fb01 f307 	mul.w	r3, r1, r7
 80004a4:	42a3      	cmp	r3, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x276>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b0:	d213      	bcs.n	80004da <__udivmoddi4+0x296>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d911      	bls.n	80004da <__udivmoddi4+0x296>
 80004b6:	3902      	subs	r1, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	1ae4      	subs	r4, r4, r3
 80004bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c0:	e739      	b.n	8000336 <__udivmoddi4+0xf2>
 80004c2:	4604      	mov	r4, r0
 80004c4:	e6f0      	b.n	80002a8 <__udivmoddi4+0x64>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e706      	b.n	80002d8 <__udivmoddi4+0x94>
 80004ca:	45c8      	cmp	r8, r9
 80004cc:	d2ae      	bcs.n	800042c <__udivmoddi4+0x1e8>
 80004ce:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7a8      	b.n	800042c <__udivmoddi4+0x1e8>
 80004da:	4631      	mov	r1, r6
 80004dc:	e7ed      	b.n	80004ba <__udivmoddi4+0x276>
 80004de:	4603      	mov	r3, r0
 80004e0:	e799      	b.n	8000416 <__udivmoddi4+0x1d2>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e7d4      	b.n	8000490 <__udivmoddi4+0x24c>
 80004e6:	46d6      	mov	lr, sl
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1a6>
 80004ea:	4463      	add	r3, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e74d      	b.n	800038c <__udivmoddi4+0x148>
 80004f0:	4606      	mov	r6, r0
 80004f2:	4623      	mov	r3, r4
 80004f4:	4608      	mov	r0, r1
 80004f6:	e70f      	b.n	8000318 <__udivmoddi4+0xd4>
 80004f8:	3e02      	subs	r6, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	e730      	b.n	8000360 <__udivmoddi4+0x11c>
 80004fe:	bf00      	nop

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <LCD_Init>:
extern const uint16_t bigFont[1520];

//***************************************************************************************************************************************
// Función para inicializar LCD
//***************************************************************************************************************************************
void LCD_Init(void) {
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0

	//****************************************
	// Secuencia de Inicialización
	//****************************************
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 8000508:	2201      	movs	r2, #1
 800050a:	2101      	movs	r1, #1
 800050c:	4878      	ldr	r0, [pc, #480]	@ (80006f0 <LCD_Init+0x1ec>)
 800050e:	f002 fbed 	bl	8002cec <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin,
 8000512:	2201      	movs	r2, #1
 8000514:	2113      	movs	r1, #19
 8000516:	4877      	ldr	r0, [pc, #476]	@ (80006f4 <LCD_Init+0x1f0>)
 8000518:	f002 fbe8 	bl	8002cec <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 800051c:	2201      	movs	r2, #1
 800051e:	2102      	movs	r1, #2
 8000520:	4875      	ldr	r0, [pc, #468]	@ (80006f8 <LCD_Init+0x1f4>)
 8000522:	f002 fbe3 	bl	8002cec <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000526:	2005      	movs	r0, #5
 8000528:	f002 f85e 	bl	80025e8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	2102      	movs	r1, #2
 8000530:	4871      	ldr	r0, [pc, #452]	@ (80006f8 <LCD_Init+0x1f4>)
 8000532:	f002 fbdb 	bl	8002cec <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000536:	2014      	movs	r0, #20
 8000538:	f002 f856 	bl	80025e8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 800053c:	2201      	movs	r2, #1
 800053e:	2102      	movs	r1, #2
 8000540:	486d      	ldr	r0, [pc, #436]	@ (80006f8 <LCD_Init+0x1f4>)
 8000542:	f002 fbd3 	bl	8002cec <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8000546:	2096      	movs	r0, #150	@ 0x96
 8000548:	f002 f84e 	bl	80025e8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	2101      	movs	r1, #1
 8000550:	4867      	ldr	r0, [pc, #412]	@ (80006f0 <LCD_Init+0x1ec>)
 8000552:	f002 fbcb 	bl	8002cec <HAL_GPIO_WritePin>

	//****************************************
	LCD_CMD(0xE9);  // SETPANELRELATED
 8000556:	20e9      	movs	r0, #233	@ 0xe9
 8000558:	f000 f8d0 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x20);
 800055c:	2020      	movs	r0, #32
 800055e:	f000 f973 	bl	8000848 <LCD_DATA>
	//****************************************
	LCD_CMD(0x11); // Exit Sleep SLEEP OUT (SLPOUT)
 8000562:	2011      	movs	r0, #17
 8000564:	f000 f8ca 	bl	80006fc <LCD_CMD>
	HAL_Delay(100);
 8000568:	2064      	movs	r0, #100	@ 0x64
 800056a:	f002 f83d 	bl	80025e8 <HAL_Delay>
	//****************************************
	LCD_CMD(0xD1);    // (SETVCOM)
 800056e:	20d1      	movs	r0, #209	@ 0xd1
 8000570:	f000 f8c4 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x00);
 8000574:	2000      	movs	r0, #0
 8000576:	f000 f967 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x71);
 800057a:	2071      	movs	r0, #113	@ 0x71
 800057c:	f000 f964 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x19);
 8000580:	2019      	movs	r0, #25
 8000582:	f000 f961 	bl	8000848 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD0);   // (SETPOWER)
 8000586:	20d0      	movs	r0, #208	@ 0xd0
 8000588:	f000 f8b8 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x07);
 800058c:	2007      	movs	r0, #7
 800058e:	f000 f95b 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x01);
 8000592:	2001      	movs	r0, #1
 8000594:	f000 f958 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x08);
 8000598:	2008      	movs	r0, #8
 800059a:	f000 f955 	bl	8000848 <LCD_DATA>
	//****************************************
	LCD_CMD(0x36);  // (MEMORYACCESS)
 800059e:	2036      	movs	r0, #54	@ 0x36
 80005a0:	f000 f8ac 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x40 | 0x80 | 0x20 | 0x08); // LCD_DATA(0x19);
 80005a4:	20e8      	movs	r0, #232	@ 0xe8
 80005a6:	f000 f94f 	bl	8000848 <LCD_DATA>
	//****************************************
	LCD_CMD(0x3A); // Set_pixel_format (PIXELFORMAT)
 80005aa:	203a      	movs	r0, #58	@ 0x3a
 80005ac:	f000 f8a6 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x05); // color setings, 05h - 16bit pixel, 11h - 3bit pixel
 80005b0:	2005      	movs	r0, #5
 80005b2:	f000 f949 	bl	8000848 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC1);    // (POWERCONTROL2)
 80005b6:	20c1      	movs	r0, #193	@ 0xc1
 80005b8:	f000 f8a0 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x10);
 80005bc:	2010      	movs	r0, #16
 80005be:	f000 f943 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x10);
 80005c2:	2010      	movs	r0, #16
 80005c4:	f000 f940 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x02);
 80005c8:	2002      	movs	r0, #2
 80005ca:	f000 f93d 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x02);
 80005ce:	2002      	movs	r0, #2
 80005d0:	f000 f93a 	bl	8000848 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC0); // Set Default Gamma (POWERCONTROL1)
 80005d4:	20c0      	movs	r0, #192	@ 0xc0
 80005d6:	f000 f891 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x00);
 80005da:	2000      	movs	r0, #0
 80005dc:	f000 f934 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x35);
 80005e0:	2035      	movs	r0, #53	@ 0x35
 80005e2:	f000 f931 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x00);
 80005e6:	2000      	movs	r0, #0
 80005e8:	f000 f92e 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x00);
 80005ec:	2000      	movs	r0, #0
 80005ee:	f000 f92b 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x01);
 80005f2:	2001      	movs	r0, #1
 80005f4:	f000 f928 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x02);
 80005f8:	2002      	movs	r0, #2
 80005fa:	f000 f925 	bl	8000848 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC5); // Set Frame Rate (VCOMCONTROL1)
 80005fe:	20c5      	movs	r0, #197	@ 0xc5
 8000600:	f000 f87c 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x04); // 72Hz
 8000604:	2004      	movs	r0, #4
 8000606:	f000 f91f 	bl	8000848 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD2); // Power Settings  (SETPWRNORMAL)
 800060a:	20d2      	movs	r0, #210	@ 0xd2
 800060c:	f000 f876 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x01);
 8000610:	2001      	movs	r0, #1
 8000612:	f000 f919 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x44);
 8000616:	2044      	movs	r0, #68	@ 0x44
 8000618:	f000 f916 	bl	8000848 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC8); //Set Gamma  (GAMMASET)
 800061c:	20c8      	movs	r0, #200	@ 0xc8
 800061e:	f000 f86d 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x04);
 8000622:	2004      	movs	r0, #4
 8000624:	f000 f910 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x67);
 8000628:	2067      	movs	r0, #103	@ 0x67
 800062a:	f000 f90d 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x35);
 800062e:	2035      	movs	r0, #53	@ 0x35
 8000630:	f000 f90a 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x04);
 8000634:	2004      	movs	r0, #4
 8000636:	f000 f907 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x08);
 800063a:	2008      	movs	r0, #8
 800063c:	f000 f904 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x06);
 8000640:	2006      	movs	r0, #6
 8000642:	f000 f901 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x24);
 8000646:	2024      	movs	r0, #36	@ 0x24
 8000648:	f000 f8fe 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x01);
 800064c:	2001      	movs	r0, #1
 800064e:	f000 f8fb 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x37);
 8000652:	2037      	movs	r0, #55	@ 0x37
 8000654:	f000 f8f8 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x40);
 8000658:	2040      	movs	r0, #64	@ 0x40
 800065a:	f000 f8f5 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x03);
 800065e:	2003      	movs	r0, #3
 8000660:	f000 f8f2 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x10);
 8000664:	2010      	movs	r0, #16
 8000666:	f000 f8ef 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x08);
 800066a:	2008      	movs	r0, #8
 800066c:	f000 f8ec 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x80);
 8000670:	2080      	movs	r0, #128	@ 0x80
 8000672:	f000 f8e9 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x00);
 8000676:	2000      	movs	r0, #0
 8000678:	f000 f8e6 	bl	8000848 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2A); // Set_column_address 320px (CASET)
 800067c:	202a      	movs	r0, #42	@ 0x2a
 800067e:	f000 f83d 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x00);
 8000682:	2000      	movs	r0, #0
 8000684:	f000 f8e0 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x00);
 8000688:	2000      	movs	r0, #0
 800068a:	f000 f8dd 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x01);
 800068e:	2001      	movs	r0, #1
 8000690:	f000 f8da 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x3F);
 8000694:	203f      	movs	r0, #63	@ 0x3f
 8000696:	f000 f8d7 	bl	8000848 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2B); // Set_page_address 480px (PASET)
 800069a:	202b      	movs	r0, #43	@ 0x2b
 800069c:	f000 f82e 	bl	80006fc <LCD_CMD>
	LCD_DATA(0x00);
 80006a0:	2000      	movs	r0, #0
 80006a2:	f000 f8d1 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x00);
 80006a6:	2000      	movs	r0, #0
 80006a8:	f000 f8ce 	bl	8000848 <LCD_DATA>
	LCD_DATA(0x01);
 80006ac:	2001      	movs	r0, #1
 80006ae:	f000 f8cb 	bl	8000848 <LCD_DATA>
	LCD_DATA(0xE0);
 80006b2:	20e0      	movs	r0, #224	@ 0xe0
 80006b4:	f000 f8c8 	bl	8000848 <LCD_DATA>
	//  LCD_DATA(0x8F);
	LCD_CMD(0x29); //display on
 80006b8:	2029      	movs	r0, #41	@ 0x29
 80006ba:	f000 f81f 	bl	80006fc <LCD_CMD>
	LCD_CMD(0x2C); //display on
 80006be:	202c      	movs	r0, #44	@ 0x2c
 80006c0:	f000 f81c 	bl	80006fc <LCD_CMD>

	LCD_CMD(ILI9341_INVOFF); //Invert Off
 80006c4:	2020      	movs	r0, #32
 80006c6:	f000 f819 	bl	80006fc <LCD_CMD>
	HAL_Delay(120);
 80006ca:	2078      	movs	r0, #120	@ 0x78
 80006cc:	f001 ff8c 	bl	80025e8 <HAL_Delay>
	LCD_CMD(ILI9341_SLPOUT);    //Exit Sleep
 80006d0:	2011      	movs	r0, #17
 80006d2:	f000 f813 	bl	80006fc <LCD_CMD>
	HAL_Delay(120);
 80006d6:	2078      	movs	r0, #120	@ 0x78
 80006d8:	f001 ff86 	bl	80025e8 <HAL_Delay>
	LCD_CMD(ILI9341_DISPON);    //Display on
 80006dc:	2029      	movs	r0, #41	@ 0x29
 80006de:	f000 f80d 	bl	80006fc <LCD_CMD>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2101      	movs	r1, #1
 80006e6:	4802      	ldr	r0, [pc, #8]	@ (80006f0 <LCD_Init+0x1ec>)
 80006e8:	f002 fb00 	bl	8002cec <HAL_GPIO_WritePin>
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40020400 	.word	0x40020400
 80006f4:	40020000 	.word	0x40020000
 80006f8:	40020800 	.word	0x40020800

080006fc <LCD_CMD>:
//***************************************************************************************************************************************
// Función para enviar comandos a la LCD - parámetro (comando)
//***************************************************************************************************************************************
void LCD_CMD(uint8_t cmd) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2110      	movs	r1, #16
 800070a:	484c      	ldr	r0, [pc, #304]	@ (800083c <LCD_CMD+0x140>)
 800070c:	f002 faee 	bl	8002cec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	2102      	movs	r1, #2
 8000714:	4849      	ldr	r0, [pc, #292]	@ (800083c <LCD_CMD+0x140>)
 8000716:	f002 fae9 	bl	8002cec <HAL_GPIO_WritePin>

	if ((cmd & (1 << 0)) == 1) {
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	f003 0301 	and.w	r3, r3, #1
 8000720:	2b00      	cmp	r3, #0
 8000722:	d006      	beq.n	8000732 <LCD_CMD+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800072a:	4844      	ldr	r0, [pc, #272]	@ (800083c <LCD_CMD+0x140>)
 800072c:	f002 fade 	bl	8002cec <HAL_GPIO_WritePin>
 8000730:	e005      	b.n	800073e <LCD_CMD+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000738:	4840      	ldr	r0, [pc, #256]	@ (800083c <LCD_CMD+0x140>)
 800073a:	f002 fad7 	bl	8002cec <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 1)) == 0x02) {
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	f003 0302 	and.w	r3, r3, #2
 8000744:	2b00      	cmp	r3, #0
 8000746:	d005      	beq.n	8000754 <LCD_CMD+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 8000748:	2201      	movs	r2, #1
 800074a:	2180      	movs	r1, #128	@ 0x80
 800074c:	483c      	ldr	r0, [pc, #240]	@ (8000840 <LCD_CMD+0x144>)
 800074e:	f002 facd 	bl	8002cec <HAL_GPIO_WritePin>
 8000752:	e004      	b.n	800075e <LCD_CMD+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	2180      	movs	r1, #128	@ 0x80
 8000758:	4839      	ldr	r0, [pc, #228]	@ (8000840 <LCD_CMD+0x144>)
 800075a:	f002 fac7 	bl	8002cec <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 2)) == 0x04) {
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	f003 0304 	and.w	r3, r3, #4
 8000764:	2b00      	cmp	r3, #0
 8000766:	d006      	beq.n	8000776 <LCD_CMD+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 8000768:	2201      	movs	r2, #1
 800076a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800076e:	4833      	ldr	r0, [pc, #204]	@ (800083c <LCD_CMD+0x140>)
 8000770:	f002 fabc 	bl	8002cec <HAL_GPIO_WritePin>
 8000774:	e005      	b.n	8000782 <LCD_CMD+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800077c:	482f      	ldr	r0, [pc, #188]	@ (800083c <LCD_CMD+0x140>)
 800077e:	f002 fab5 	bl	8002cec <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 3)) == 0x08) {
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	f003 0308 	and.w	r3, r3, #8
 8000788:	2b00      	cmp	r3, #0
 800078a:	d005      	beq.n	8000798 <LCD_CMD+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	2108      	movs	r1, #8
 8000790:	482c      	ldr	r0, [pc, #176]	@ (8000844 <LCD_CMD+0x148>)
 8000792:	f002 faab 	bl	8002cec <HAL_GPIO_WritePin>
 8000796:	e004      	b.n	80007a2 <LCD_CMD+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	2108      	movs	r1, #8
 800079c:	4829      	ldr	r0, [pc, #164]	@ (8000844 <LCD_CMD+0x148>)
 800079e:	f002 faa5 	bl	8002cec <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 4)) == 0x10) {
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	f003 0310 	and.w	r3, r3, #16
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d005      	beq.n	80007b8 <LCD_CMD+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2120      	movs	r1, #32
 80007b0:	4824      	ldr	r0, [pc, #144]	@ (8000844 <LCD_CMD+0x148>)
 80007b2:	f002 fa9b 	bl	8002cec <HAL_GPIO_WritePin>
 80007b6:	e004      	b.n	80007c2 <LCD_CMD+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2120      	movs	r1, #32
 80007bc:	4821      	ldr	r0, [pc, #132]	@ (8000844 <LCD_CMD+0x148>)
 80007be:	f002 fa95 	bl	8002cec <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 5)) == 0x20) {
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	f003 0320 	and.w	r3, r3, #32
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d005      	beq.n	80007d8 <LCD_CMD+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 80007cc:	2201      	movs	r2, #1
 80007ce:	2110      	movs	r1, #16
 80007d0:	481c      	ldr	r0, [pc, #112]	@ (8000844 <LCD_CMD+0x148>)
 80007d2:	f002 fa8b 	bl	8002cec <HAL_GPIO_WritePin>
 80007d6:	e004      	b.n	80007e2 <LCD_CMD+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	2110      	movs	r1, #16
 80007dc:	4819      	ldr	r0, [pc, #100]	@ (8000844 <LCD_CMD+0x148>)
 80007de:	f002 fa85 	bl	8002cec <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 6)) == 0x40) {
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d006      	beq.n	80007fa <LCD_CMD+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007f2:	4814      	ldr	r0, [pc, #80]	@ (8000844 <LCD_CMD+0x148>)
 80007f4:	f002 fa7a 	bl	8002cec <HAL_GPIO_WritePin>
 80007f8:	e005      	b.n	8000806 <LCD_CMD+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000800:	4810      	ldr	r0, [pc, #64]	@ (8000844 <LCD_CMD+0x148>)
 8000802:	f002 fa73 	bl	8002cec <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 7)) == 0x80) {
 8000806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080a:	2b00      	cmp	r3, #0
 800080c:	da06      	bge.n	800081c <LCD_CMD+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 800080e:	2201      	movs	r2, #1
 8000810:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000814:	4809      	ldr	r0, [pc, #36]	@ (800083c <LCD_CMD+0x140>)
 8000816:	f002 fa69 	bl	8002cec <HAL_GPIO_WritePin>
 800081a:	e005      	b.n	8000828 <LCD_CMD+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000822:	4806      	ldr	r0, [pc, #24]	@ (800083c <LCD_CMD+0x140>)
 8000824:	f002 fa62 	bl	8002cec <HAL_GPIO_WritePin>
	}
	//GPIO_PortB_DATA_R = cmd;
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8000828:	2201      	movs	r2, #1
 800082a:	2102      	movs	r1, #2
 800082c:	4803      	ldr	r0, [pc, #12]	@ (800083c <LCD_CMD+0x140>)
 800082e:	f002 fa5d 	bl	8002cec <HAL_GPIO_WritePin>

}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40020000 	.word	0x40020000
 8000840:	40020800 	.word	0x40020800
 8000844:	40020400 	.word	0x40020400

08000848 <LCD_DATA>:
//***************************************************************************************************************************************
// Función para enviar datos a la LCD - parámetro (dato)
//***************************************************************************************************************************************
void LCD_DATA(uint8_t data) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000852:	2201      	movs	r2, #1
 8000854:	2110      	movs	r1, #16
 8000856:	484c      	ldr	r0, [pc, #304]	@ (8000988 <LCD_DATA+0x140>)
 8000858:	f002 fa48 	bl	8002cec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	2102      	movs	r1, #2
 8000860:	4849      	ldr	r0, [pc, #292]	@ (8000988 <LCD_DATA+0x140>)
 8000862:	f002 fa43 	bl	8002cec <HAL_GPIO_WritePin>
	if ((data & (1 << 0)) == 1) {
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	f003 0301 	and.w	r3, r3, #1
 800086c:	2b00      	cmp	r3, #0
 800086e:	d006      	beq.n	800087e <LCD_DATA+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000876:	4844      	ldr	r0, [pc, #272]	@ (8000988 <LCD_DATA+0x140>)
 8000878:	f002 fa38 	bl	8002cec <HAL_GPIO_WritePin>
 800087c:	e005      	b.n	800088a <LCD_DATA+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000884:	4840      	ldr	r0, [pc, #256]	@ (8000988 <LCD_DATA+0x140>)
 8000886:	f002 fa31 	bl	8002cec <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 1)) == 0x02) {
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	f003 0302 	and.w	r3, r3, #2
 8000890:	2b00      	cmp	r3, #0
 8000892:	d005      	beq.n	80008a0 <LCD_DATA+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	2180      	movs	r1, #128	@ 0x80
 8000898:	483c      	ldr	r0, [pc, #240]	@ (800098c <LCD_DATA+0x144>)
 800089a:	f002 fa27 	bl	8002cec <HAL_GPIO_WritePin>
 800089e:	e004      	b.n	80008aa <LCD_DATA+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2180      	movs	r1, #128	@ 0x80
 80008a4:	4839      	ldr	r0, [pc, #228]	@ (800098c <LCD_DATA+0x144>)
 80008a6:	f002 fa21 	bl	8002cec <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 2)) == 0x04) {
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	f003 0304 	and.w	r3, r3, #4
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d006      	beq.n	80008c2 <LCD_DATA+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 80008b4:	2201      	movs	r2, #1
 80008b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008ba:	4833      	ldr	r0, [pc, #204]	@ (8000988 <LCD_DATA+0x140>)
 80008bc:	f002 fa16 	bl	8002cec <HAL_GPIO_WritePin>
 80008c0:	e005      	b.n	80008ce <LCD_DATA+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008c8:	482f      	ldr	r0, [pc, #188]	@ (8000988 <LCD_DATA+0x140>)
 80008ca:	f002 fa0f 	bl	8002cec <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 3)) == 0x08) {
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	f003 0308 	and.w	r3, r3, #8
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d005      	beq.n	80008e4 <LCD_DATA+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 80008d8:	2201      	movs	r2, #1
 80008da:	2108      	movs	r1, #8
 80008dc:	482c      	ldr	r0, [pc, #176]	@ (8000990 <LCD_DATA+0x148>)
 80008de:	f002 fa05 	bl	8002cec <HAL_GPIO_WritePin>
 80008e2:	e004      	b.n	80008ee <LCD_DATA+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2108      	movs	r1, #8
 80008e8:	4829      	ldr	r0, [pc, #164]	@ (8000990 <LCD_DATA+0x148>)
 80008ea:	f002 f9ff 	bl	8002cec <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 4)) == 0x10) {
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	f003 0310 	and.w	r3, r3, #16
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d005      	beq.n	8000904 <LCD_DATA+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	2120      	movs	r1, #32
 80008fc:	4824      	ldr	r0, [pc, #144]	@ (8000990 <LCD_DATA+0x148>)
 80008fe:	f002 f9f5 	bl	8002cec <HAL_GPIO_WritePin>
 8000902:	e004      	b.n	800090e <LCD_DATA+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	2120      	movs	r1, #32
 8000908:	4821      	ldr	r0, [pc, #132]	@ (8000990 <LCD_DATA+0x148>)
 800090a:	f002 f9ef 	bl	8002cec <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 5)) == 0x20) {
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	f003 0320 	and.w	r3, r3, #32
 8000914:	2b00      	cmp	r3, #0
 8000916:	d005      	beq.n	8000924 <LCD_DATA+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 8000918:	2201      	movs	r2, #1
 800091a:	2110      	movs	r1, #16
 800091c:	481c      	ldr	r0, [pc, #112]	@ (8000990 <LCD_DATA+0x148>)
 800091e:	f002 f9e5 	bl	8002cec <HAL_GPIO_WritePin>
 8000922:	e004      	b.n	800092e <LCD_DATA+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8000924:	2200      	movs	r2, #0
 8000926:	2110      	movs	r1, #16
 8000928:	4819      	ldr	r0, [pc, #100]	@ (8000990 <LCD_DATA+0x148>)
 800092a:	f002 f9df 	bl	8002cec <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 6)) == 0x40) {
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000934:	2b00      	cmp	r3, #0
 8000936:	d006      	beq.n	8000946 <LCD_DATA+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 8000938:	2201      	movs	r2, #1
 800093a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800093e:	4814      	ldr	r0, [pc, #80]	@ (8000990 <LCD_DATA+0x148>)
 8000940:	f002 f9d4 	bl	8002cec <HAL_GPIO_WritePin>
 8000944:	e005      	b.n	8000952 <LCD_DATA+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800094c:	4810      	ldr	r0, [pc, #64]	@ (8000990 <LCD_DATA+0x148>)
 800094e:	f002 f9cd 	bl	8002cec <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 7)) == 0x80) {
 8000952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000956:	2b00      	cmp	r3, #0
 8000958:	da06      	bge.n	8000968 <LCD_DATA+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 800095a:	2201      	movs	r2, #1
 800095c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000960:	4809      	ldr	r0, [pc, #36]	@ (8000988 <LCD_DATA+0x140>)
 8000962:	f002 f9c3 	bl	8002cec <HAL_GPIO_WritePin>
 8000966:	e005      	b.n	8000974 <LCD_DATA+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800096e:	4806      	ldr	r0, [pc, #24]	@ (8000988 <LCD_DATA+0x140>)
 8000970:	f002 f9bc 	bl	8002cec <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8000974:	2201      	movs	r2, #1
 8000976:	2102      	movs	r1, #2
 8000978:	4803      	ldr	r0, [pc, #12]	@ (8000988 <LCD_DATA+0x140>)
 800097a:	f002 f9b7 	bl	8002cec <HAL_GPIO_WritePin>
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40020000 	.word	0x40020000
 800098c:	40020800 	.word	0x40020800
 8000990:	40020400 	.word	0x40020400

08000994 <SetWindows>:
//***************************************************************************************************************************************
// Función para definir rango de direcciones de memoria con las cuales se trabajara (se define una ventana)
//***************************************************************************************************************************************
void SetWindows(unsigned int x1, unsigned int y1, unsigned int x2,
		unsigned int y2) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
 80009a0:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x2a); // Set_column_address 4 parameters
 80009a2:	202a      	movs	r0, #42	@ 0x2a
 80009a4:	f7ff feaa 	bl	80006fc <LCD_CMD>
	LCD_DATA(x1 >> 8);
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	0a1b      	lsrs	r3, r3, #8
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff ff4a 	bl	8000848 <LCD_DATA>
	LCD_DATA(x1);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ff45 	bl	8000848 <LCD_DATA>
	LCD_DATA(x2 >> 8);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	0a1b      	lsrs	r3, r3, #8
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff ff3f 	bl	8000848 <LCD_DATA>
	LCD_DATA(x2);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff ff3a 	bl	8000848 <LCD_DATA>
	LCD_CMD(0x2b); // Set_page_address 4 parameters
 80009d4:	202b      	movs	r0, #43	@ 0x2b
 80009d6:	f7ff fe91 	bl	80006fc <LCD_CMD>
	LCD_DATA(y1 >> 8);
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	0a1b      	lsrs	r3, r3, #8
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ff31 	bl	8000848 <LCD_DATA>
	LCD_DATA(y1);
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff ff2c 	bl	8000848 <LCD_DATA>
	LCD_DATA(y2 >> 8);
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	0a1b      	lsrs	r3, r3, #8
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff ff26 	bl	8000848 <LCD_DATA>
	LCD_DATA(y2);
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ff21 	bl	8000848 <LCD_DATA>
	LCD_CMD(0x2c); // Write_memory_start
 8000a06:	202c      	movs	r0, #44	@ 0x2c
 8000a08:	f7ff fe78 	bl	80006fc <LCD_CMD>
}
 8000a0c:	bf00      	nop
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <LCD_Clear>:
//***************************************************************************************************************************************
// Función para borrar la pantalla - parámetros (color)
//***************************************************************************************************************************************
void LCD_Clear(unsigned int c) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	unsigned int x, y;
	LCD_CMD(0x02c); // write_memory_start
 8000a1c:	202c      	movs	r0, #44	@ 0x2c
 8000a1e:	f7ff fe6d 	bl	80006fc <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000a22:	2201      	movs	r2, #1
 8000a24:	2110      	movs	r1, #16
 8000a26:	481b      	ldr	r0, [pc, #108]	@ (8000a94 <LCD_Clear+0x80>)
 8000a28:	f002 f960 	bl	8002cec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2101      	movs	r1, #1
 8000a30:	4819      	ldr	r0, [pc, #100]	@ (8000a98 <LCD_Clear+0x84>)
 8000a32:	f002 f95b 	bl	8002cec <HAL_GPIO_WritePin>
	SetWindows(0, 0, 319, 239); // 479, 319);
 8000a36:	23ef      	movs	r3, #239	@ 0xef
 8000a38:	f240 123f 	movw	r2, #319	@ 0x13f
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f7ff ffa8 	bl	8000994 <SetWindows>
	for (x = 0; x < 320; x++)
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	e016      	b.n	8000a78 <LCD_Clear+0x64>
		for (y = 0; y < 240; y++) {
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	e00d      	b.n	8000a6c <LCD_Clear+0x58>
			LCD_DATA(c >> 8);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	0a1b      	lsrs	r3, r3, #8
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fef6 	bl	8000848 <LCD_DATA>
			LCD_DATA(c);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fef1 	bl	8000848 <LCD_DATA>
		for (y = 0; y < 240; y++) {
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	2bef      	cmp	r3, #239	@ 0xef
 8000a70:	d9ee      	bls.n	8000a50 <LCD_Clear+0x3c>
	for (x = 0; x < 320; x++)
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	3301      	adds	r3, #1
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a7e:	d3e4      	bcc.n	8000a4a <LCD_Clear+0x36>
		}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	2101      	movs	r1, #1
 8000a84:	4804      	ldr	r0, [pc, #16]	@ (8000a98 <LCD_Clear+0x84>)
 8000a86:	f002 f931 	bl	8002cec <HAL_GPIO_WritePin>
}
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40020000 	.word	0x40020000
 8000a98:	40020400 	.word	0x40020400

08000a9c <FillRect>:
 }
 }
 */

void FillRect(unsigned int x, unsigned int y, unsigned int w, unsigned int h,
		unsigned int c) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	@ 0x28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
 8000aa8:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8000aaa:	202c      	movs	r0, #44	@ 0x2c
 8000aac:	f7ff fe26 	bl	80006fc <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2110      	movs	r1, #16
 8000ab4:	4824      	ldr	r0, [pc, #144]	@ (8000b48 <FillRect+0xac>)
 8000ab6:	f002 f919 	bl	8002cec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2101      	movs	r1, #1
 8000abe:	4823      	ldr	r0, [pc, #140]	@ (8000b4c <FillRect+0xb0>)
 8000ac0:	f002 f914 	bl	8002cec <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + w;
 8000ac4:	68fa      	ldr	r2, [r7, #12]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	61bb      	str	r3, [r7, #24]
	y2 = y + h;
 8000acc:	68ba      	ldr	r2, [r7, #8]
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	1e5a      	subs	r2, r3, #1
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	68b9      	ldr	r1, [r7, #8]
 8000ade:	68f8      	ldr	r0, [r7, #12]
 8000ae0:	f7ff ff58 	bl	8000994 <SetWindows>
	unsigned int k = w * h * 2 - 1;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	683a      	ldr	r2, [r7, #0]
 8000ae8:	fb02 f303 	mul.w	r3, r2, r3
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	3b01      	subs	r3, #1
 8000af0:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < w; i++) {
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
 8000af6:	e01a      	b.n	8000b2e <FillRect+0x92>
		for (int j = 0; j < h; j++) {
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
 8000afc:	e010      	b.n	8000b20 <FillRect+0x84>
			LCD_DATA(c >> 8);
 8000afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b00:	0a1b      	lsrs	r3, r3, #8
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fe9f 	bl	8000848 <LCD_DATA>
			LCD_DATA(c);
 8000b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fe9a 	bl	8000848 <LCD_DATA>

			//LCD_DATA(bitmap[k]);
			k = k - 2;
 8000b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b16:	3b02      	subs	r3, #2
 8000b18:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < h; j++) {
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	61fb      	str	r3, [r7, #28]
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	683a      	ldr	r2, [r7, #0]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d8ea      	bhi.n	8000afe <FillRect+0x62>
	for (int i = 0; i < w; i++) {
 8000b28:	6a3b      	ldr	r3, [r7, #32]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	623b      	str	r3, [r7, #32]
 8000b2e:	6a3b      	ldr	r3, [r7, #32]
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d8e0      	bhi.n	8000af8 <FillRect+0x5c>
		}
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000b36:	2201      	movs	r2, #1
 8000b38:	2101      	movs	r1, #1
 8000b3a:	4804      	ldr	r0, [pc, #16]	@ (8000b4c <FillRect+0xb0>)
 8000b3c:	f002 f8d6 	bl	8002cec <HAL_GPIO_WritePin>
}
 8000b40:	bf00      	nop
 8000b42:	3728      	adds	r7, #40	@ 0x28
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40020000 	.word	0x40020000
 8000b4c:	40020400 	.word	0x40020400

08000b50 <LCD_Sprite>:
}
//***************************************************************************************************************************************
// Función para dibujar una imagen sprite - los parámetros columns = número de imagenes en el sprite, index = cual desplegar, flip = darle vuelta
//***************************************************************************************************************************************
void LCD_Sprite(int x, int y, int width, int height, unsigned char bitmap[],
		int columns, int index, char flip, char offset) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08c      	sub	sp, #48	@ 0x30
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
 8000b5c:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8000b5e:	202c      	movs	r0, #44	@ 0x2c
 8000b60:	f7ff fdcc 	bl	80006fc <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000b64:	2201      	movs	r2, #1
 8000b66:	2110      	movs	r1, #16
 8000b68:	484d      	ldr	r0, [pc, #308]	@ (8000ca0 <LCD_Sprite+0x150>)
 8000b6a:	f002 f8bf 	bl	8002cec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2101      	movs	r1, #1
 8000b72:	484c      	ldr	r0, [pc, #304]	@ (8000ca4 <LCD_Sprite+0x154>)
 8000b74:	f002 f8ba 	bl	8002cec <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + width;
 8000b78:	68fa      	ldr	r2, [r7, #12]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	61bb      	str	r3, [r7, #24]
	y2 = y + height;
 8000b80:	68ba      	ldr	r2, [r7, #8]
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	4413      	add	r3, r2
 8000b86:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8000b88:	68f8      	ldr	r0, [r7, #12]
 8000b8a:	68b9      	ldr	r1, [r7, #8]
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	1e5a      	subs	r2, r3, #1
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	f7ff fefe 	bl	8000994 <SetWindows>
	int k = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int ancho = ((width * columns));
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000ba0:	fb02 f303 	mul.w	r3, r2, r3
 8000ba4:	613b      	str	r3, [r7, #16]
	if (flip) {
 8000ba6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d03a      	beq.n	8000c24 <LCD_Sprite+0xd4>
		for (int j = 0; j < height; j++) {
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000bb2:	e032      	b.n	8000c1a <LCD_Sprite+0xca>
			k = (j * (ancho) + index * width - 1 - offset) * 2;
 8000bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	fb03 f202 	mul.w	r2, r3, r2
 8000bbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	fb01 f303 	mul.w	r3, r1, r3
 8000bc4:	4413      	add	r3, r2
 8000bc6:	1e5a      	subs	r2, r3, #1
 8000bc8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			k = k + width * 2;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000bd8:	4413      	add	r3, r2
 8000bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	@ 0x24
 8000be0:	e014      	b.n	8000c0c <LCD_Sprite+0xbc>
				LCD_DATA(bitmap[k]);
 8000be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000be4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000be6:	4413      	add	r3, r2
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fe2c 	bl	8000848 <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 8000bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000bf6:	4413      	add	r3, r2
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fe24 	bl	8000848 <LCD_DATA>
				k = k - 2;
 8000c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c02:	3b02      	subs	r3, #2
 8000c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c08:	3301      	adds	r3, #1
 8000c0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	dbe6      	blt.n	8000be2 <LCD_Sprite+0x92>
		for (int j = 0; j < height; j++) {
 8000c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c16:	3301      	adds	r3, #1
 8000c18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	dbc8      	blt.n	8000bb4 <LCD_Sprite+0x64>
 8000c22:	e034      	b.n	8000c8e <LCD_Sprite+0x13e>
			}
		}
	} else {
		for (int j = 0; j < height; j++) {
 8000c24:	2300      	movs	r3, #0
 8000c26:	623b      	str	r3, [r7, #32]
 8000c28:	e02d      	b.n	8000c86 <LCD_Sprite+0x136>
			k = (j * (ancho) + index * width + 1 + offset) * 2;
 8000c2a:	6a3b      	ldr	r3, [r7, #32]
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	fb03 f202 	mul.w	r2, r3, r2
 8000c32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c34:	6879      	ldr	r1, [r7, #4]
 8000c36:	fb01 f303 	mul.w	r3, r1, r3
 8000c3a:	4413      	add	r3, r2
 8000c3c:	1c5a      	adds	r2, r3, #1
 8000c3e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000c42:	4413      	add	r3, r2
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
 8000c4c:	e014      	b.n	8000c78 <LCD_Sprite+0x128>
				LCD_DATA(bitmap[k]);
 8000c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000c52:	4413      	add	r3, r2
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fdf6 	bl	8000848 <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 8000c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c5e:	3301      	adds	r3, #1
 8000c60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000c62:	4413      	add	r3, r2
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff fdee 	bl	8000848 <LCD_DATA>
				k = k + 2;
 8000c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c6e:	3302      	adds	r3, #2
 8000c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3301      	adds	r3, #1
 8000c76:	61fb      	str	r3, [r7, #28]
 8000c78:	69fa      	ldr	r2, [r7, #28]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	dbe6      	blt.n	8000c4e <LCD_Sprite+0xfe>
		for (int j = 0; j < height; j++) {
 8000c80:	6a3b      	ldr	r3, [r7, #32]
 8000c82:	3301      	adds	r3, #1
 8000c84:	623b      	str	r3, [r7, #32]
 8000c86:	6a3a      	ldr	r2, [r7, #32]
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	dbcd      	blt.n	8000c2a <LCD_Sprite+0xda>
			}
		}

	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	2101      	movs	r1, #1
 8000c92:	4804      	ldr	r0, [pc, #16]	@ (8000ca4 <LCD_Sprite+0x154>)
 8000c94:	f002 f82a 	bl	8002cec <HAL_GPIO_WritePin>
}
 8000c98:	bf00      	nop
 8000c9a:	3730      	adds	r7, #48	@ 0x30
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40020000 	.word	0x40020000
 8000ca4:	40020400 	.word	0x40020400

08000ca8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cae:	f001 fc29 	bl	8002504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb2:	f000 fefb 	bl	8001aac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb6:	f001 f847 	bl	8001d48 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000cba:	f000 ff91 	bl	8001be0 <MX_SPI1_Init>
  MX_I2C1_Init();
 8000cbe:	f000 ff61 	bl	8001b84 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000cc2:	f000 ffed 	bl	8001ca0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000cc6:	f001 f815 	bl	8001cf4 <MX_USART3_UART_Init>
  MX_UART5_Init();
 8000cca:	f000 ffbf 	bl	8001c4c <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, option, 1);  // EMPEZAR RECEPCIÓN
 8000cce:	2201      	movs	r2, #1
 8000cd0:	49b0      	ldr	r1, [pc, #704]	@ (8000f94 <main+0x2ec>)
 8000cd2:	48b1      	ldr	r0, [pc, #708]	@ (8000f98 <main+0x2f0>)
 8000cd4:	f005 f870 	bl	8005db8 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, option, 1);  // EMPEZAR RECEPCIÓN
 8000cd8:	2201      	movs	r2, #1
 8000cda:	49ae      	ldr	r1, [pc, #696]	@ (8000f94 <main+0x2ec>)
 8000cdc:	48af      	ldr	r0, [pc, #700]	@ (8000f9c <main+0x2f4>)
 8000cde:	f005 f86b 	bl	8005db8 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart5, option2, 1);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	49ae      	ldr	r1, [pc, #696]	@ (8000fa0 <main+0x2f8>)
 8000ce6:	48af      	ldr	r0, [pc, #700]	@ (8000fa4 <main+0x2fc>)
 8000ce8:	f005 f866 	bl	8005db8 <HAL_UART_Receive_IT>
	LCD_Init();
 8000cec:	f7ff fc0a 	bl	8000504 <LCD_Init>

	LCD_Clear(0x736E);
 8000cf0:	f247 306e 	movw	r0, #29550	@ 0x736e
 8000cf4:	f7ff fe8e 	bl	8000a14 <LCD_Clear>
	//FillRect(0, 0, 319, 239, 0xDD47);
	FillRect(93, 19, 203, 6, 0xDD47);
 8000cf8:	f64d 5347 	movw	r3, #56647	@ 0xdd47
 8000cfc:	9300      	str	r3, [sp, #0]
 8000cfe:	2306      	movs	r3, #6
 8000d00:	22cb      	movs	r2, #203	@ 0xcb
 8000d02:	2113      	movs	r1, #19
 8000d04:	205d      	movs	r0, #93	@ 0x5d
 8000d06:	f7ff fec9 	bl	8000a9c <FillRect>
	FillRect(90, 19, 6, 57, 0xDD47);
 8000d0a:	f64d 5347 	movw	r3, #56647	@ 0xdd47
 8000d0e:	9300      	str	r3, [sp, #0]
 8000d10:	2339      	movs	r3, #57	@ 0x39
 8000d12:	2206      	movs	r2, #6
 8000d14:	2113      	movs	r1, #19
 8000d16:	205a      	movs	r0, #90	@ 0x5a
 8000d18:	f7ff fec0 	bl	8000a9c <FillRect>
	FillRect(140, 19, 6, 57, 0xDD47);
 8000d1c:	f64d 5347 	movw	r3, #56647	@ 0xdd47
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	2339      	movs	r3, #57	@ 0x39
 8000d24:	2206      	movs	r2, #6
 8000d26:	2113      	movs	r1, #19
 8000d28:	208c      	movs	r0, #140	@ 0x8c
 8000d2a:	f7ff feb7 	bl	8000a9c <FillRect>
	FillRect(190, 19, 6, 57, 0xDD47);
 8000d2e:	f64d 5347 	movw	r3, #56647	@ 0xdd47
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	2339      	movs	r3, #57	@ 0x39
 8000d36:	2206      	movs	r2, #6
 8000d38:	2113      	movs	r1, #19
 8000d3a:	20be      	movs	r0, #190	@ 0xbe
 8000d3c:	f7ff feae 	bl	8000a9c <FillRect>
	FillRect(240, 19, 6, 57, 0xDD47);
 8000d40:	f64d 5347 	movw	r3, #56647	@ 0xdd47
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	2339      	movs	r3, #57	@ 0x39
 8000d48:	2206      	movs	r2, #6
 8000d4a:	2113      	movs	r1, #19
 8000d4c:	20f0      	movs	r0, #240	@ 0xf0
 8000d4e:	f7ff fea5 	bl	8000a9c <FillRect>
	FillRect(290, 19, 6, 57, 0xDD47);
 8000d52:	f64d 5347 	movw	r3, #56647	@ 0xdd47
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	2339      	movs	r3, #57	@ 0x39
 8000d5a:	2206      	movs	r2, #6
 8000d5c:	2113      	movs	r1, #19
 8000d5e:	f44f 7091 	mov.w	r0, #290	@ 0x122
 8000d62:	f7ff fe9b 	bl	8000a9c <FillRect>

	FillRect(93, 221, 203, 6, 0xDD47);
 8000d66:	f64d 5347 	movw	r3, #56647	@ 0xdd47
 8000d6a:	9300      	str	r3, [sp, #0]
 8000d6c:	2306      	movs	r3, #6
 8000d6e:	22cb      	movs	r2, #203	@ 0xcb
 8000d70:	21dd      	movs	r1, #221	@ 0xdd
 8000d72:	205d      	movs	r0, #93	@ 0x5d
 8000d74:	f7ff fe92 	bl	8000a9c <FillRect>
	FillRect(90, 170, 6, 57, 0xDD47);
 8000d78:	f64d 5347 	movw	r3, #56647	@ 0xdd47
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	2339      	movs	r3, #57	@ 0x39
 8000d80:	2206      	movs	r2, #6
 8000d82:	21aa      	movs	r1, #170	@ 0xaa
 8000d84:	205a      	movs	r0, #90	@ 0x5a
 8000d86:	f7ff fe89 	bl	8000a9c <FillRect>
	FillRect(140, 170, 6, 57, 0xDD47);
 8000d8a:	f64d 5347 	movw	r3, #56647	@ 0xdd47
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	2339      	movs	r3, #57	@ 0x39
 8000d92:	2206      	movs	r2, #6
 8000d94:	21aa      	movs	r1, #170	@ 0xaa
 8000d96:	208c      	movs	r0, #140	@ 0x8c
 8000d98:	f7ff fe80 	bl	8000a9c <FillRect>
	FillRect(190, 170, 6, 57, 0xDD47);
 8000d9c:	f64d 5347 	movw	r3, #56647	@ 0xdd47
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	2339      	movs	r3, #57	@ 0x39
 8000da4:	2206      	movs	r2, #6
 8000da6:	21aa      	movs	r1, #170	@ 0xaa
 8000da8:	20be      	movs	r0, #190	@ 0xbe
 8000daa:	f7ff fe77 	bl	8000a9c <FillRect>
	FillRect(240, 170, 6, 57, 0xDD47);
 8000dae:	f64d 5347 	movw	r3, #56647	@ 0xdd47
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	2339      	movs	r3, #57	@ 0x39
 8000db6:	2206      	movs	r2, #6
 8000db8:	21aa      	movs	r1, #170	@ 0xaa
 8000dba:	20f0      	movs	r0, #240	@ 0xf0
 8000dbc:	f7ff fe6e 	bl	8000a9c <FillRect>
	FillRect(290, 170, 6, 57, 0xDD47);
 8000dc0:	f64d 5347 	movw	r3, #56647	@ 0xdd47
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	2339      	movs	r3, #57	@ 0x39
 8000dc8:	2206      	movs	r2, #6
 8000dca:	21aa      	movs	r1, #170	@ 0xaa
 8000dcc:	f44f 7091 	mov.w	r0, #290	@ 0x122
 8000dd0:	f7ff fe64 	bl	8000a9c <FillRect>

	LCD_Sprite(20, 107, 30, 33, numbers, 10, 8, 0, 0);
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	9304      	str	r3, [sp, #16]
 8000dd8:	2300      	movs	r3, #0
 8000dda:	9303      	str	r3, [sp, #12]
 8000ddc:	2308      	movs	r3, #8
 8000dde:	9302      	str	r3, [sp, #8]
 8000de0:	230a      	movs	r3, #10
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	4b70      	ldr	r3, [pc, #448]	@ (8000fa8 <main+0x300>)
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	2321      	movs	r3, #33	@ 0x21
 8000dea:	221e      	movs	r2, #30
 8000dec:	216b      	movs	r1, #107	@ 0x6b
 8000dee:	2014      	movs	r0, #20
 8000df0:	f7ff feae 	bl	8000b50 <LCD_Sprite>

	//SEMAFOROS

	LCD_Sprite(101, 85, 35, 18, semaforo, 2, 0, 0, 0);	//SEMAFORO1
 8000df4:	2300      	movs	r3, #0
 8000df6:	9304      	str	r3, [sp, #16]
 8000df8:	2300      	movs	r3, #0
 8000dfa:	9303      	str	r3, [sp, #12]
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	9302      	str	r3, [sp, #8]
 8000e00:	2302      	movs	r3, #2
 8000e02:	9301      	str	r3, [sp, #4]
 8000e04:	4b69      	ldr	r3, [pc, #420]	@ (8000fac <main+0x304>)
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	2312      	movs	r3, #18
 8000e0a:	2223      	movs	r2, #35	@ 0x23
 8000e0c:	2155      	movs	r1, #85	@ 0x55
 8000e0e:	2065      	movs	r0, #101	@ 0x65
 8000e10:	f7ff fe9e 	bl	8000b50 <LCD_Sprite>
	LCD_Sprite(151, 85, 35, 18, semaforo, 2, 0, 0, 0);	//SEMAFORO2
 8000e14:	2300      	movs	r3, #0
 8000e16:	9304      	str	r3, [sp, #16]
 8000e18:	2300      	movs	r3, #0
 8000e1a:	9303      	str	r3, [sp, #12]
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	9302      	str	r3, [sp, #8]
 8000e20:	2302      	movs	r3, #2
 8000e22:	9301      	str	r3, [sp, #4]
 8000e24:	4b61      	ldr	r3, [pc, #388]	@ (8000fac <main+0x304>)
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	2312      	movs	r3, #18
 8000e2a:	2223      	movs	r2, #35	@ 0x23
 8000e2c:	2155      	movs	r1, #85	@ 0x55
 8000e2e:	2097      	movs	r0, #151	@ 0x97
 8000e30:	f7ff fe8e 	bl	8000b50 <LCD_Sprite>
	LCD_Sprite(201, 85, 35, 18, semaforo, 2, 0, 0, 0);	//SEMAFORO3
 8000e34:	2300      	movs	r3, #0
 8000e36:	9304      	str	r3, [sp, #16]
 8000e38:	2300      	movs	r3, #0
 8000e3a:	9303      	str	r3, [sp, #12]
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	9302      	str	r3, [sp, #8]
 8000e40:	2302      	movs	r3, #2
 8000e42:	9301      	str	r3, [sp, #4]
 8000e44:	4b59      	ldr	r3, [pc, #356]	@ (8000fac <main+0x304>)
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	2312      	movs	r3, #18
 8000e4a:	2223      	movs	r2, #35	@ 0x23
 8000e4c:	2155      	movs	r1, #85	@ 0x55
 8000e4e:	20c9      	movs	r0, #201	@ 0xc9
 8000e50:	f7ff fe7e 	bl	8000b50 <LCD_Sprite>
	LCD_Sprite(251, 85, 35, 18, semaforo, 2, 0, 0, 0);	//SEMAFORO4
 8000e54:	2300      	movs	r3, #0
 8000e56:	9304      	str	r3, [sp, #16]
 8000e58:	2300      	movs	r3, #0
 8000e5a:	9303      	str	r3, [sp, #12]
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	9302      	str	r3, [sp, #8]
 8000e60:	2302      	movs	r3, #2
 8000e62:	9301      	str	r3, [sp, #4]
 8000e64:	4b51      	ldr	r3, [pc, #324]	@ (8000fac <main+0x304>)
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	2312      	movs	r3, #18
 8000e6a:	2223      	movs	r2, #35	@ 0x23
 8000e6c:	2155      	movs	r1, #85	@ 0x55
 8000e6e:	20fb      	movs	r0, #251	@ 0xfb
 8000e70:	f7ff fe6e 	bl	8000b50 <LCD_Sprite>

	LCD_Sprite(101, 140, 35, 18, semaforo, 2, 0, 0, 0);	//SEMAFORO5
 8000e74:	2300      	movs	r3, #0
 8000e76:	9304      	str	r3, [sp, #16]
 8000e78:	2300      	movs	r3, #0
 8000e7a:	9303      	str	r3, [sp, #12]
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	9302      	str	r3, [sp, #8]
 8000e80:	2302      	movs	r3, #2
 8000e82:	9301      	str	r3, [sp, #4]
 8000e84:	4b49      	ldr	r3, [pc, #292]	@ (8000fac <main+0x304>)
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	2312      	movs	r3, #18
 8000e8a:	2223      	movs	r2, #35	@ 0x23
 8000e8c:	218c      	movs	r1, #140	@ 0x8c
 8000e8e:	2065      	movs	r0, #101	@ 0x65
 8000e90:	f7ff fe5e 	bl	8000b50 <LCD_Sprite>
	LCD_Sprite(151, 140, 35, 18, semaforo, 2, 0, 0, 0);	//SEMAFORO6
 8000e94:	2300      	movs	r3, #0
 8000e96:	9304      	str	r3, [sp, #16]
 8000e98:	2300      	movs	r3, #0
 8000e9a:	9303      	str	r3, [sp, #12]
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	9302      	str	r3, [sp, #8]
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	9301      	str	r3, [sp, #4]
 8000ea4:	4b41      	ldr	r3, [pc, #260]	@ (8000fac <main+0x304>)
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2312      	movs	r3, #18
 8000eaa:	2223      	movs	r2, #35	@ 0x23
 8000eac:	218c      	movs	r1, #140	@ 0x8c
 8000eae:	2097      	movs	r0, #151	@ 0x97
 8000eb0:	f7ff fe4e 	bl	8000b50 <LCD_Sprite>
	LCD_Sprite(201, 140, 35, 18, semaforo, 2, 0, 0, 0);	//SEMAFORO7
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	9304      	str	r3, [sp, #16]
 8000eb8:	2300      	movs	r3, #0
 8000eba:	9303      	str	r3, [sp, #12]
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	9302      	str	r3, [sp, #8]
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	9301      	str	r3, [sp, #4]
 8000ec4:	4b39      	ldr	r3, [pc, #228]	@ (8000fac <main+0x304>)
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2312      	movs	r3, #18
 8000eca:	2223      	movs	r2, #35	@ 0x23
 8000ecc:	218c      	movs	r1, #140	@ 0x8c
 8000ece:	20c9      	movs	r0, #201	@ 0xc9
 8000ed0:	f7ff fe3e 	bl	8000b50 <LCD_Sprite>
	LCD_Sprite(251, 140, 35, 18, semaforo, 2, 0, 0, 0);	//SEMAFORO8
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	9304      	str	r3, [sp, #16]
 8000ed8:	2300      	movs	r3, #0
 8000eda:	9303      	str	r3, [sp, #12]
 8000edc:	2300      	movs	r3, #0
 8000ede:	9302      	str	r3, [sp, #8]
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	9301      	str	r3, [sp, #4]
 8000ee4:	4b31      	ldr	r3, [pc, #196]	@ (8000fac <main+0x304>)
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	2312      	movs	r3, #18
 8000eea:	2223      	movs	r2, #35	@ 0x23
 8000eec:	218c      	movs	r1, #140	@ 0x8c
 8000eee:	20fb      	movs	r0, #251	@ 0xfb
 8000ef0:	f7ff fe2e 	bl	8000b50 <LCD_Sprite>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		//CARRO 1
		if (HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == GPIO_PIN_RESET){
 8000ef4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ef8:	482d      	ldr	r0, [pc, #180]	@ (8000fb0 <main+0x308>)
 8000efa:	f001 fedf 	bl	8002cbc <HAL_GPIO_ReadPin>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d165      	bne.n	8000fd0 <main+0x328>
			if (carroD1 == 0){
 8000f04:	4b2b      	ldr	r3, [pc, #172]	@ (8000fb4 <main+0x30c>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f040 8095 	bne.w	8001038 <main+0x390>
				LCD_Sprite(100, y1, 36, 48, cars, 8, 0, 0, 0);
 8000f0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb8 <main+0x310>)
 8000f10:	6819      	ldr	r1, [r3, #0]
 8000f12:	2300      	movs	r3, #0
 8000f14:	9304      	str	r3, [sp, #16]
 8000f16:	2300      	movs	r3, #0
 8000f18:	9303      	str	r3, [sp, #12]
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	9302      	str	r3, [sp, #8]
 8000f1e:	2308      	movs	r3, #8
 8000f20:	9301      	str	r3, [sp, #4]
 8000f22:	4b26      	ldr	r3, [pc, #152]	@ (8000fbc <main+0x314>)
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2330      	movs	r3, #48	@ 0x30
 8000f28:	2224      	movs	r2, #36	@ 0x24
 8000f2a:	2064      	movs	r0, #100	@ 0x64
 8000f2c:	f7ff fe10 	bl	8000b50 <LCD_Sprite>
				if (y1 >= 26){
 8000f30:	4b21      	ldr	r3, [pc, #132]	@ (8000fb8 <main+0x310>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b19      	cmp	r3, #25
 8000f36:	dd04      	ble.n	8000f42 <main+0x29a>
					y1--;
 8000f38:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb8 <main+0x310>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	4a1e      	ldr	r2, [pc, #120]	@ (8000fb8 <main+0x310>)
 8000f40:	6013      	str	r3, [r2, #0]
				}
				if (y1 == 25){
 8000f42:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb8 <main+0x310>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b19      	cmp	r3, #25
 8000f48:	d176      	bne.n	8001038 <main+0x390>
					carroD1 = 1;
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb4 <main+0x30c>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]
					parqueos--;
 8000f50:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc0 <main+0x318>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	3b01      	subs	r3, #1
 8000f56:	4a1a      	ldr	r2, [pc, #104]	@ (8000fc0 <main+0x318>)
 8000f58:	6013      	str	r3, [r2, #0]
					change = 1;
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc4 <main+0x31c>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	701a      	strb	r2, [r3, #0]
					LCD_Sprite(101, 85, 35, 18, semaforo, 2, 1, 0, 0);
 8000f60:	2300      	movs	r3, #0
 8000f62:	9304      	str	r3, [sp, #16]
 8000f64:	2300      	movs	r3, #0
 8000f66:	9303      	str	r3, [sp, #12]
 8000f68:	2301      	movs	r3, #1
 8000f6a:	9302      	str	r3, [sp, #8]
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	9301      	str	r3, [sp, #4]
 8000f70:	4b0e      	ldr	r3, [pc, #56]	@ (8000fac <main+0x304>)
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	2312      	movs	r3, #18
 8000f76:	2223      	movs	r2, #35	@ 0x23
 8000f78:	2155      	movs	r1, #85	@ 0x55
 8000f7a:	2065      	movs	r0, #101	@ 0x65
 8000f7c:	f7ff fde8 	bl	8000b50 <LCD_Sprite>
					HAL_UART_Transmit(&huart5, "a", 1, 10);
 8000f80:	230a      	movs	r3, #10
 8000f82:	2201      	movs	r2, #1
 8000f84:	4910      	ldr	r1, [pc, #64]	@ (8000fc8 <main+0x320>)
 8000f86:	4807      	ldr	r0, [pc, #28]	@ (8000fa4 <main+0x2fc>)
 8000f88:	f004 fe8b 	bl	8005ca2 <HAL_UART_Transmit>
					send_i2c_command("1");
 8000f8c:	480f      	ldr	r0, [pc, #60]	@ (8000fcc <main+0x324>)
 8000f8e:	f000 ff83 	bl	8001e98 <send_i2c_command>
 8000f92:	e051      	b.n	8001038 <main+0x390>
 8000f94:	2000c500 	.word	0x2000c500
 8000f98:	2000c470 	.word	0x2000c470
 8000f9c:	2000c4b8 	.word	0x2000c4b8
 8000fa0:	2000c508 	.word	0x2000c508
 8000fa4:	2000c428 	.word	0x2000c428
 8000fa8:	20006c00 	.word	0x20006c00
 8000fac:	2000b958 	.word	0x2000b958
 8000fb0:	40020800 	.word	0x40020800
 8000fb4:	2000c520 	.word	0x2000c520
 8000fb8:	2000c334 	.word	0x2000c334
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	2000c330 	.word	0x2000c330
 8000fc4:	2000c52c 	.word	0x2000c52c
 8000fc8:	08006d20 	.word	0x08006d20
 8000fcc:	08006d24 	.word	0x08006d24
				}
			}

		}else{
			if (carroD1 == 1){
 8000fd0:	4b82      	ldr	r3, [pc, #520]	@ (80011dc <main+0x534>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d12c      	bne.n	8001032 <main+0x38a>
				FillRect(100, 25, 36, 50, 0x736E);
 8000fd8:	f247 336e 	movw	r3, #29550	@ 0x736e
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2332      	movs	r3, #50	@ 0x32
 8000fe0:	2224      	movs	r2, #36	@ 0x24
 8000fe2:	2119      	movs	r1, #25
 8000fe4:	2064      	movs	r0, #100	@ 0x64
 8000fe6:	f7ff fd59 	bl	8000a9c <FillRect>
				carroD1 = 0;
 8000fea:	4b7c      	ldr	r3, [pc, #496]	@ (80011dc <main+0x534>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
				parqueos++;
 8000ff0:	4b7b      	ldr	r3, [pc, #492]	@ (80011e0 <main+0x538>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	4a7a      	ldr	r2, [pc, #488]	@ (80011e0 <main+0x538>)
 8000ff8:	6013      	str	r3, [r2, #0]
				change = 1;
 8000ffa:	4b7a      	ldr	r3, [pc, #488]	@ (80011e4 <main+0x53c>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	701a      	strb	r2, [r3, #0]
				LCD_Sprite(101, 85, 35, 18, semaforo, 2, 0, 0, 0);
 8001000:	2300      	movs	r3, #0
 8001002:	9304      	str	r3, [sp, #16]
 8001004:	2300      	movs	r3, #0
 8001006:	9303      	str	r3, [sp, #12]
 8001008:	2300      	movs	r3, #0
 800100a:	9302      	str	r3, [sp, #8]
 800100c:	2302      	movs	r3, #2
 800100e:	9301      	str	r3, [sp, #4]
 8001010:	4b75      	ldr	r3, [pc, #468]	@ (80011e8 <main+0x540>)
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2312      	movs	r3, #18
 8001016:	2223      	movs	r2, #35	@ 0x23
 8001018:	2155      	movs	r1, #85	@ 0x55
 800101a:	2065      	movs	r0, #101	@ 0x65
 800101c:	f7ff fd98 	bl	8000b50 <LCD_Sprite>
				HAL_UART_Transmit(&huart5, "i", 1, 10);
 8001020:	230a      	movs	r3, #10
 8001022:	2201      	movs	r2, #1
 8001024:	4971      	ldr	r1, [pc, #452]	@ (80011ec <main+0x544>)
 8001026:	4872      	ldr	r0, [pc, #456]	@ (80011f0 <main+0x548>)
 8001028:	f004 fe3b 	bl	8005ca2 <HAL_UART_Transmit>
				send_i2c_command("a");
 800102c:	4871      	ldr	r0, [pc, #452]	@ (80011f4 <main+0x54c>)
 800102e:	f000 ff33 	bl	8001e98 <send_i2c_command>
			}
			y1 = 35;
 8001032:	4b71      	ldr	r3, [pc, #452]	@ (80011f8 <main+0x550>)
 8001034:	2223      	movs	r2, #35	@ 0x23
 8001036:	601a      	str	r2, [r3, #0]
		}

		//CARRO 2
		if (HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin) == GPIO_PIN_RESET){
 8001038:	2101      	movs	r1, #1
 800103a:	4870      	ldr	r0, [pc, #448]	@ (80011fc <main+0x554>)
 800103c:	f001 fe3e 	bl	8002cbc <HAL_GPIO_ReadPin>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d146      	bne.n	80010d4 <main+0x42c>
			if (carroD2 == 0){
 8001046:	4b6e      	ldr	r3, [pc, #440]	@ (8001200 <main+0x558>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d176      	bne.n	800113c <main+0x494>
				LCD_Sprite(150, y2, 36, 48, cars, 8, 1, 0, 0);
 800104e:	4b6d      	ldr	r3, [pc, #436]	@ (8001204 <main+0x55c>)
 8001050:	6819      	ldr	r1, [r3, #0]
 8001052:	2300      	movs	r3, #0
 8001054:	9304      	str	r3, [sp, #16]
 8001056:	2300      	movs	r3, #0
 8001058:	9303      	str	r3, [sp, #12]
 800105a:	2301      	movs	r3, #1
 800105c:	9302      	str	r3, [sp, #8]
 800105e:	2308      	movs	r3, #8
 8001060:	9301      	str	r3, [sp, #4]
 8001062:	4b69      	ldr	r3, [pc, #420]	@ (8001208 <main+0x560>)
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2330      	movs	r3, #48	@ 0x30
 8001068:	2224      	movs	r2, #36	@ 0x24
 800106a:	2096      	movs	r0, #150	@ 0x96
 800106c:	f7ff fd70 	bl	8000b50 <LCD_Sprite>
				if (y2 >= 26){
 8001070:	4b64      	ldr	r3, [pc, #400]	@ (8001204 <main+0x55c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b19      	cmp	r3, #25
 8001076:	dd04      	ble.n	8001082 <main+0x3da>
					y2--;
 8001078:	4b62      	ldr	r3, [pc, #392]	@ (8001204 <main+0x55c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	3b01      	subs	r3, #1
 800107e:	4a61      	ldr	r2, [pc, #388]	@ (8001204 <main+0x55c>)
 8001080:	6013      	str	r3, [r2, #0]
				}
				if (y2 == 25){
 8001082:	4b60      	ldr	r3, [pc, #384]	@ (8001204 <main+0x55c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2b19      	cmp	r3, #25
 8001088:	d158      	bne.n	800113c <main+0x494>
					carroD2 = 1;
 800108a:	4b5d      	ldr	r3, [pc, #372]	@ (8001200 <main+0x558>)
 800108c:	2201      	movs	r2, #1
 800108e:	701a      	strb	r2, [r3, #0]
					parqueos--;
 8001090:	4b53      	ldr	r3, [pc, #332]	@ (80011e0 <main+0x538>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	3b01      	subs	r3, #1
 8001096:	4a52      	ldr	r2, [pc, #328]	@ (80011e0 <main+0x538>)
 8001098:	6013      	str	r3, [r2, #0]
					change = 1;
 800109a:	4b52      	ldr	r3, [pc, #328]	@ (80011e4 <main+0x53c>)
 800109c:	2201      	movs	r2, #1
 800109e:	701a      	strb	r2, [r3, #0]
					LCD_Sprite(151, 85, 35, 18, semaforo, 2, 1, 0, 0);
 80010a0:	2300      	movs	r3, #0
 80010a2:	9304      	str	r3, [sp, #16]
 80010a4:	2300      	movs	r3, #0
 80010a6:	9303      	str	r3, [sp, #12]
 80010a8:	2301      	movs	r3, #1
 80010aa:	9302      	str	r3, [sp, #8]
 80010ac:	2302      	movs	r3, #2
 80010ae:	9301      	str	r3, [sp, #4]
 80010b0:	4b4d      	ldr	r3, [pc, #308]	@ (80011e8 <main+0x540>)
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2312      	movs	r3, #18
 80010b6:	2223      	movs	r2, #35	@ 0x23
 80010b8:	2155      	movs	r1, #85	@ 0x55
 80010ba:	2097      	movs	r0, #151	@ 0x97
 80010bc:	f7ff fd48 	bl	8000b50 <LCD_Sprite>
					HAL_UART_Transmit(&huart5, "b", 1, 10);
 80010c0:	230a      	movs	r3, #10
 80010c2:	2201      	movs	r2, #1
 80010c4:	4951      	ldr	r1, [pc, #324]	@ (800120c <main+0x564>)
 80010c6:	484a      	ldr	r0, [pc, #296]	@ (80011f0 <main+0x548>)
 80010c8:	f004 fdeb 	bl	8005ca2 <HAL_UART_Transmit>
					send_i2c_command("2");
 80010cc:	4850      	ldr	r0, [pc, #320]	@ (8001210 <main+0x568>)
 80010ce:	f000 fee3 	bl	8001e98 <send_i2c_command>
 80010d2:	e033      	b.n	800113c <main+0x494>
				}
			}
		}else{
			if (carroD2 == 1){
 80010d4:	4b4a      	ldr	r3, [pc, #296]	@ (8001200 <main+0x558>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d12c      	bne.n	8001136 <main+0x48e>
				FillRect(150, 25, 36, 50, 0x736E);
 80010dc:	f247 336e 	movw	r3, #29550	@ 0x736e
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	2332      	movs	r3, #50	@ 0x32
 80010e4:	2224      	movs	r2, #36	@ 0x24
 80010e6:	2119      	movs	r1, #25
 80010e8:	2096      	movs	r0, #150	@ 0x96
 80010ea:	f7ff fcd7 	bl	8000a9c <FillRect>
				carroD2 = 0;
 80010ee:	4b44      	ldr	r3, [pc, #272]	@ (8001200 <main+0x558>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
				parqueos++;
 80010f4:	4b3a      	ldr	r3, [pc, #232]	@ (80011e0 <main+0x538>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	3301      	adds	r3, #1
 80010fa:	4a39      	ldr	r2, [pc, #228]	@ (80011e0 <main+0x538>)
 80010fc:	6013      	str	r3, [r2, #0]
				change = 1;
 80010fe:	4b39      	ldr	r3, [pc, #228]	@ (80011e4 <main+0x53c>)
 8001100:	2201      	movs	r2, #1
 8001102:	701a      	strb	r2, [r3, #0]
				LCD_Sprite(151, 85, 35, 18, semaforo, 2, 0, 0, 0);
 8001104:	2300      	movs	r3, #0
 8001106:	9304      	str	r3, [sp, #16]
 8001108:	2300      	movs	r3, #0
 800110a:	9303      	str	r3, [sp, #12]
 800110c:	2300      	movs	r3, #0
 800110e:	9302      	str	r3, [sp, #8]
 8001110:	2302      	movs	r3, #2
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	4b34      	ldr	r3, [pc, #208]	@ (80011e8 <main+0x540>)
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	2312      	movs	r3, #18
 800111a:	2223      	movs	r2, #35	@ 0x23
 800111c:	2155      	movs	r1, #85	@ 0x55
 800111e:	2097      	movs	r0, #151	@ 0x97
 8001120:	f7ff fd16 	bl	8000b50 <LCD_Sprite>
				HAL_UART_Transmit(&huart5, "j", 1, 10);
 8001124:	230a      	movs	r3, #10
 8001126:	2201      	movs	r2, #1
 8001128:	493a      	ldr	r1, [pc, #232]	@ (8001214 <main+0x56c>)
 800112a:	4831      	ldr	r0, [pc, #196]	@ (80011f0 <main+0x548>)
 800112c:	f004 fdb9 	bl	8005ca2 <HAL_UART_Transmit>
				send_i2c_command("b");
 8001130:	4836      	ldr	r0, [pc, #216]	@ (800120c <main+0x564>)
 8001132:	f000 feb1 	bl	8001e98 <send_i2c_command>
			}
			y2 = 35;
 8001136:	4b33      	ldr	r3, [pc, #204]	@ (8001204 <main+0x55c>)
 8001138:	2223      	movs	r2, #35	@ 0x23
 800113a:	601a      	str	r2, [r3, #0]
		}

		//CARRO 3
		if (HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin) == GPIO_PIN_RESET){
 800113c:	2104      	movs	r1, #4
 800113e:	482f      	ldr	r0, [pc, #188]	@ (80011fc <main+0x554>)
 8001140:	f001 fdbc 	bl	8002cbc <HAL_GPIO_ReadPin>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d16e      	bne.n	8001228 <main+0x580>
			if (carroD3 == 0){
 800114a:	4b33      	ldr	r3, [pc, #204]	@ (8001218 <main+0x570>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	f040 809e 	bne.w	8001290 <main+0x5e8>
				LCD_Sprite(200, y3, 36, 48, cars, 8, 2, 0, 0);
 8001154:	4b31      	ldr	r3, [pc, #196]	@ (800121c <main+0x574>)
 8001156:	6819      	ldr	r1, [r3, #0]
 8001158:	2300      	movs	r3, #0
 800115a:	9304      	str	r3, [sp, #16]
 800115c:	2300      	movs	r3, #0
 800115e:	9303      	str	r3, [sp, #12]
 8001160:	2302      	movs	r3, #2
 8001162:	9302      	str	r3, [sp, #8]
 8001164:	2308      	movs	r3, #8
 8001166:	9301      	str	r3, [sp, #4]
 8001168:	4b27      	ldr	r3, [pc, #156]	@ (8001208 <main+0x560>)
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2330      	movs	r3, #48	@ 0x30
 800116e:	2224      	movs	r2, #36	@ 0x24
 8001170:	20c8      	movs	r0, #200	@ 0xc8
 8001172:	f7ff fced 	bl	8000b50 <LCD_Sprite>
				if (y3 >= 26){
 8001176:	4b29      	ldr	r3, [pc, #164]	@ (800121c <main+0x574>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b19      	cmp	r3, #25
 800117c:	dd04      	ble.n	8001188 <main+0x4e0>
					y3--;
 800117e:	4b27      	ldr	r3, [pc, #156]	@ (800121c <main+0x574>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	3b01      	subs	r3, #1
 8001184:	4a25      	ldr	r2, [pc, #148]	@ (800121c <main+0x574>)
 8001186:	6013      	str	r3, [r2, #0]
				}
				if (y3 == 25){
 8001188:	4b24      	ldr	r3, [pc, #144]	@ (800121c <main+0x574>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b19      	cmp	r3, #25
 800118e:	d17f      	bne.n	8001290 <main+0x5e8>
					carroD3 = 1;
 8001190:	4b21      	ldr	r3, [pc, #132]	@ (8001218 <main+0x570>)
 8001192:	2201      	movs	r2, #1
 8001194:	701a      	strb	r2, [r3, #0]
					parqueos--;
 8001196:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <main+0x538>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	3b01      	subs	r3, #1
 800119c:	4a10      	ldr	r2, [pc, #64]	@ (80011e0 <main+0x538>)
 800119e:	6013      	str	r3, [r2, #0]
					change = 1;
 80011a0:	4b10      	ldr	r3, [pc, #64]	@ (80011e4 <main+0x53c>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	701a      	strb	r2, [r3, #0]
					LCD_Sprite(201, 85, 35, 18, semaforo, 2, 1, 0, 0);
 80011a6:	2300      	movs	r3, #0
 80011a8:	9304      	str	r3, [sp, #16]
 80011aa:	2300      	movs	r3, #0
 80011ac:	9303      	str	r3, [sp, #12]
 80011ae:	2301      	movs	r3, #1
 80011b0:	9302      	str	r3, [sp, #8]
 80011b2:	2302      	movs	r3, #2
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <main+0x540>)
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2312      	movs	r3, #18
 80011bc:	2223      	movs	r2, #35	@ 0x23
 80011be:	2155      	movs	r1, #85	@ 0x55
 80011c0:	20c9      	movs	r0, #201	@ 0xc9
 80011c2:	f7ff fcc5 	bl	8000b50 <LCD_Sprite>
					HAL_UART_Transmit(&huart5, "c", 1, 10);
 80011c6:	230a      	movs	r3, #10
 80011c8:	2201      	movs	r2, #1
 80011ca:	4915      	ldr	r1, [pc, #84]	@ (8001220 <main+0x578>)
 80011cc:	4808      	ldr	r0, [pc, #32]	@ (80011f0 <main+0x548>)
 80011ce:	f004 fd68 	bl	8005ca2 <HAL_UART_Transmit>
					send_i2c_command("3");
 80011d2:	4814      	ldr	r0, [pc, #80]	@ (8001224 <main+0x57c>)
 80011d4:	f000 fe60 	bl	8001e98 <send_i2c_command>
 80011d8:	e05a      	b.n	8001290 <main+0x5e8>
 80011da:	bf00      	nop
 80011dc:	2000c520 	.word	0x2000c520
 80011e0:	2000c330 	.word	0x2000c330
 80011e4:	2000c52c 	.word	0x2000c52c
 80011e8:	2000b958 	.word	0x2000b958
 80011ec:	08006d28 	.word	0x08006d28
 80011f0:	2000c428 	.word	0x2000c428
 80011f4:	08006d20 	.word	0x08006d20
 80011f8:	2000c334 	.word	0x2000c334
 80011fc:	40020800 	.word	0x40020800
 8001200:	2000c521 	.word	0x2000c521
 8001204:	2000c338 	.word	0x2000c338
 8001208:	20000000 	.word	0x20000000
 800120c:	08006d2c 	.word	0x08006d2c
 8001210:	08006d30 	.word	0x08006d30
 8001214:	08006d34 	.word	0x08006d34
 8001218:	2000c522 	.word	0x2000c522
 800121c:	2000c33c 	.word	0x2000c33c
 8001220:	08006d38 	.word	0x08006d38
 8001224:	08006d3c 	.word	0x08006d3c
				}
			}
		}else{
			if (carroD3 == 1){
 8001228:	4b81      	ldr	r3, [pc, #516]	@ (8001430 <main+0x788>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d12c      	bne.n	800128a <main+0x5e2>
				FillRect(200, 25, 36, 50, 0x736E);
 8001230:	f247 336e 	movw	r3, #29550	@ 0x736e
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2332      	movs	r3, #50	@ 0x32
 8001238:	2224      	movs	r2, #36	@ 0x24
 800123a:	2119      	movs	r1, #25
 800123c:	20c8      	movs	r0, #200	@ 0xc8
 800123e:	f7ff fc2d 	bl	8000a9c <FillRect>
				carroD3 = 0;
 8001242:	4b7b      	ldr	r3, [pc, #492]	@ (8001430 <main+0x788>)
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]
				parqueos++;
 8001248:	4b7a      	ldr	r3, [pc, #488]	@ (8001434 <main+0x78c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	3301      	adds	r3, #1
 800124e:	4a79      	ldr	r2, [pc, #484]	@ (8001434 <main+0x78c>)
 8001250:	6013      	str	r3, [r2, #0]
				change = 1;
 8001252:	4b79      	ldr	r3, [pc, #484]	@ (8001438 <main+0x790>)
 8001254:	2201      	movs	r2, #1
 8001256:	701a      	strb	r2, [r3, #0]
				LCD_Sprite(201, 85, 35, 18, semaforo, 2, 0, 0, 0);
 8001258:	2300      	movs	r3, #0
 800125a:	9304      	str	r3, [sp, #16]
 800125c:	2300      	movs	r3, #0
 800125e:	9303      	str	r3, [sp, #12]
 8001260:	2300      	movs	r3, #0
 8001262:	9302      	str	r3, [sp, #8]
 8001264:	2302      	movs	r3, #2
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	4b74      	ldr	r3, [pc, #464]	@ (800143c <main+0x794>)
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2312      	movs	r3, #18
 800126e:	2223      	movs	r2, #35	@ 0x23
 8001270:	2155      	movs	r1, #85	@ 0x55
 8001272:	20c9      	movs	r0, #201	@ 0xc9
 8001274:	f7ff fc6c 	bl	8000b50 <LCD_Sprite>
				HAL_UART_Transmit(&huart5, "k", 1, 10);
 8001278:	230a      	movs	r3, #10
 800127a:	2201      	movs	r2, #1
 800127c:	4970      	ldr	r1, [pc, #448]	@ (8001440 <main+0x798>)
 800127e:	4871      	ldr	r0, [pc, #452]	@ (8001444 <main+0x79c>)
 8001280:	f004 fd0f 	bl	8005ca2 <HAL_UART_Transmit>
				send_i2c_command("c");
 8001284:	4870      	ldr	r0, [pc, #448]	@ (8001448 <main+0x7a0>)
 8001286:	f000 fe07 	bl	8001e98 <send_i2c_command>
			}
			y3 = 35;
 800128a:	4b70      	ldr	r3, [pc, #448]	@ (800144c <main+0x7a4>)
 800128c:	2223      	movs	r2, #35	@ 0x23
 800128e:	601a      	str	r2, [r3, #0]
		}

		//CARRO 4
		if (HAL_GPIO_ReadPin(BUTTON4_GPIO_Port, BUTTON4_Pin) == GPIO_PIN_RESET){
 8001290:	2108      	movs	r1, #8
 8001292:	486f      	ldr	r0, [pc, #444]	@ (8001450 <main+0x7a8>)
 8001294:	f001 fd12 	bl	8002cbc <HAL_GPIO_ReadPin>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d146      	bne.n	800132c <main+0x684>
			if (carroD4 == 0){
 800129e:	4b6d      	ldr	r3, [pc, #436]	@ (8001454 <main+0x7ac>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d176      	bne.n	8001394 <main+0x6ec>
				LCD_Sprite(250, y4, 36, 48, cars, 8, 3, 0, 0);
 80012a6:	4b6c      	ldr	r3, [pc, #432]	@ (8001458 <main+0x7b0>)
 80012a8:	6819      	ldr	r1, [r3, #0]
 80012aa:	2300      	movs	r3, #0
 80012ac:	9304      	str	r3, [sp, #16]
 80012ae:	2300      	movs	r3, #0
 80012b0:	9303      	str	r3, [sp, #12]
 80012b2:	2303      	movs	r3, #3
 80012b4:	9302      	str	r3, [sp, #8]
 80012b6:	2308      	movs	r3, #8
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	4b68      	ldr	r3, [pc, #416]	@ (800145c <main+0x7b4>)
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	2330      	movs	r3, #48	@ 0x30
 80012c0:	2224      	movs	r2, #36	@ 0x24
 80012c2:	20fa      	movs	r0, #250	@ 0xfa
 80012c4:	f7ff fc44 	bl	8000b50 <LCD_Sprite>
				if (y4 >= 26){
 80012c8:	4b63      	ldr	r3, [pc, #396]	@ (8001458 <main+0x7b0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b19      	cmp	r3, #25
 80012ce:	dd04      	ble.n	80012da <main+0x632>
					y4--;
 80012d0:	4b61      	ldr	r3, [pc, #388]	@ (8001458 <main+0x7b0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	3b01      	subs	r3, #1
 80012d6:	4a60      	ldr	r2, [pc, #384]	@ (8001458 <main+0x7b0>)
 80012d8:	6013      	str	r3, [r2, #0]
				}
				if (y4 == 25){
 80012da:	4b5f      	ldr	r3, [pc, #380]	@ (8001458 <main+0x7b0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b19      	cmp	r3, #25
 80012e0:	d158      	bne.n	8001394 <main+0x6ec>
					carroD4 = 1;
 80012e2:	4b5c      	ldr	r3, [pc, #368]	@ (8001454 <main+0x7ac>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	701a      	strb	r2, [r3, #0]
					parqueos--;
 80012e8:	4b52      	ldr	r3, [pc, #328]	@ (8001434 <main+0x78c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3b01      	subs	r3, #1
 80012ee:	4a51      	ldr	r2, [pc, #324]	@ (8001434 <main+0x78c>)
 80012f0:	6013      	str	r3, [r2, #0]
					change = 1;
 80012f2:	4b51      	ldr	r3, [pc, #324]	@ (8001438 <main+0x790>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	701a      	strb	r2, [r3, #0]
					LCD_Sprite(251, 85, 35, 18, semaforo, 2, 1, 0, 0);
 80012f8:	2300      	movs	r3, #0
 80012fa:	9304      	str	r3, [sp, #16]
 80012fc:	2300      	movs	r3, #0
 80012fe:	9303      	str	r3, [sp, #12]
 8001300:	2301      	movs	r3, #1
 8001302:	9302      	str	r3, [sp, #8]
 8001304:	2302      	movs	r3, #2
 8001306:	9301      	str	r3, [sp, #4]
 8001308:	4b4c      	ldr	r3, [pc, #304]	@ (800143c <main+0x794>)
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2312      	movs	r3, #18
 800130e:	2223      	movs	r2, #35	@ 0x23
 8001310:	2155      	movs	r1, #85	@ 0x55
 8001312:	20fb      	movs	r0, #251	@ 0xfb
 8001314:	f7ff fc1c 	bl	8000b50 <LCD_Sprite>
					HAL_UART_Transmit(&huart5, "d", 1, 10);
 8001318:	230a      	movs	r3, #10
 800131a:	2201      	movs	r2, #1
 800131c:	4950      	ldr	r1, [pc, #320]	@ (8001460 <main+0x7b8>)
 800131e:	4849      	ldr	r0, [pc, #292]	@ (8001444 <main+0x79c>)
 8001320:	f004 fcbf 	bl	8005ca2 <HAL_UART_Transmit>
					send_i2c_command("4");
 8001324:	484f      	ldr	r0, [pc, #316]	@ (8001464 <main+0x7bc>)
 8001326:	f000 fdb7 	bl	8001e98 <send_i2c_command>
 800132a:	e033      	b.n	8001394 <main+0x6ec>
				}
			}
		}else{
			if (carroD4 == 1){
 800132c:	4b49      	ldr	r3, [pc, #292]	@ (8001454 <main+0x7ac>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d12c      	bne.n	800138e <main+0x6e6>
				FillRect(250, 25, 36, 50, 0x736E);
 8001334:	f247 336e 	movw	r3, #29550	@ 0x736e
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2332      	movs	r3, #50	@ 0x32
 800133c:	2224      	movs	r2, #36	@ 0x24
 800133e:	2119      	movs	r1, #25
 8001340:	20fa      	movs	r0, #250	@ 0xfa
 8001342:	f7ff fbab 	bl	8000a9c <FillRect>
				carroD4 = 0;
 8001346:	4b43      	ldr	r3, [pc, #268]	@ (8001454 <main+0x7ac>)
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
				parqueos++;
 800134c:	4b39      	ldr	r3, [pc, #228]	@ (8001434 <main+0x78c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	3301      	adds	r3, #1
 8001352:	4a38      	ldr	r2, [pc, #224]	@ (8001434 <main+0x78c>)
 8001354:	6013      	str	r3, [r2, #0]
				change = 1;
 8001356:	4b38      	ldr	r3, [pc, #224]	@ (8001438 <main+0x790>)
 8001358:	2201      	movs	r2, #1
 800135a:	701a      	strb	r2, [r3, #0]
				LCD_Sprite(251, 85, 35, 18, semaforo, 2, 0, 0, 0);
 800135c:	2300      	movs	r3, #0
 800135e:	9304      	str	r3, [sp, #16]
 8001360:	2300      	movs	r3, #0
 8001362:	9303      	str	r3, [sp, #12]
 8001364:	2300      	movs	r3, #0
 8001366:	9302      	str	r3, [sp, #8]
 8001368:	2302      	movs	r3, #2
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	4b33      	ldr	r3, [pc, #204]	@ (800143c <main+0x794>)
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	2312      	movs	r3, #18
 8001372:	2223      	movs	r2, #35	@ 0x23
 8001374:	2155      	movs	r1, #85	@ 0x55
 8001376:	20fb      	movs	r0, #251	@ 0xfb
 8001378:	f7ff fbea 	bl	8000b50 <LCD_Sprite>
				HAL_UART_Transmit(&huart5, "l", 1, 10);
 800137c:	230a      	movs	r3, #10
 800137e:	2201      	movs	r2, #1
 8001380:	4939      	ldr	r1, [pc, #228]	@ (8001468 <main+0x7c0>)
 8001382:	4830      	ldr	r0, [pc, #192]	@ (8001444 <main+0x79c>)
 8001384:	f004 fc8d 	bl	8005ca2 <HAL_UART_Transmit>
				send_i2c_command("d");
 8001388:	4835      	ldr	r0, [pc, #212]	@ (8001460 <main+0x7b8>)
 800138a:	f000 fd85 	bl	8001e98 <send_i2c_command>
			}
			y4 = 35;
 800138e:	4b32      	ldr	r3, [pc, #200]	@ (8001458 <main+0x7b0>)
 8001390:	2223      	movs	r2, #35	@ 0x23
 8001392:	601a      	str	r2, [r3, #0]
		}

		//CARRO 5
		if (parqueo5 == 1){	//SI SE RECIBE UN DATO PROVENIENTE DE LA UART
 8001394:	4b35      	ldr	r3, [pc, #212]	@ (800146c <main+0x7c4>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d171      	bne.n	8001480 <main+0x7d8>
			if (carroD5 == 0){
 800139c:	4b34      	ldr	r3, [pc, #208]	@ (8001470 <main+0x7c8>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f040 80a5 	bne.w	80014f0 <main+0x848>
				LCD_Sprite(100, y5, 36, 48, cars, 8, 4, 0, 0);
 80013a6:	4b33      	ldr	r3, [pc, #204]	@ (8001474 <main+0x7cc>)
 80013a8:	6819      	ldr	r1, [r3, #0]
 80013aa:	2300      	movs	r3, #0
 80013ac:	9304      	str	r3, [sp, #16]
 80013ae:	2300      	movs	r3, #0
 80013b0:	9303      	str	r3, [sp, #12]
 80013b2:	2304      	movs	r3, #4
 80013b4:	9302      	str	r3, [sp, #8]
 80013b6:	2308      	movs	r3, #8
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	4b28      	ldr	r3, [pc, #160]	@ (800145c <main+0x7b4>)
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	2330      	movs	r3, #48	@ 0x30
 80013c0:	2224      	movs	r2, #36	@ 0x24
 80013c2:	2064      	movs	r0, #100	@ 0x64
 80013c4:	f7ff fbc4 	bl	8000b50 <LCD_Sprite>
				if (y5 <= 169){
 80013c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001474 <main+0x7cc>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2ba9      	cmp	r3, #169	@ 0xa9
 80013ce:	dc04      	bgt.n	80013da <main+0x732>
					y5++;
 80013d0:	4b28      	ldr	r3, [pc, #160]	@ (8001474 <main+0x7cc>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	3301      	adds	r3, #1
 80013d6:	4a27      	ldr	r2, [pc, #156]	@ (8001474 <main+0x7cc>)
 80013d8:	6013      	str	r3, [r2, #0]
				}
				if (y5 == 170){
 80013da:	4b26      	ldr	r3, [pc, #152]	@ (8001474 <main+0x7cc>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2baa      	cmp	r3, #170	@ 0xaa
 80013e0:	f040 8086 	bne.w	80014f0 <main+0x848>
					carroD5 = 1;
 80013e4:	4b22      	ldr	r3, [pc, #136]	@ (8001470 <main+0x7c8>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	701a      	strb	r2, [r3, #0]
					parqueos--;
 80013ea:	4b12      	ldr	r3, [pc, #72]	@ (8001434 <main+0x78c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	4a10      	ldr	r2, [pc, #64]	@ (8001434 <main+0x78c>)
 80013f2:	6013      	str	r3, [r2, #0]
					change = 1;
 80013f4:	4b10      	ldr	r3, [pc, #64]	@ (8001438 <main+0x790>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	701a      	strb	r2, [r3, #0]
					LCD_Sprite(101, 140, 35, 18, semaforo, 2, 1, 0, 0);
 80013fa:	2300      	movs	r3, #0
 80013fc:	9304      	str	r3, [sp, #16]
 80013fe:	2300      	movs	r3, #0
 8001400:	9303      	str	r3, [sp, #12]
 8001402:	2301      	movs	r3, #1
 8001404:	9302      	str	r3, [sp, #8]
 8001406:	2302      	movs	r3, #2
 8001408:	9301      	str	r3, [sp, #4]
 800140a:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <main+0x794>)
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	2312      	movs	r3, #18
 8001410:	2223      	movs	r2, #35	@ 0x23
 8001412:	218c      	movs	r1, #140	@ 0x8c
 8001414:	2065      	movs	r0, #101	@ 0x65
 8001416:	f7ff fb9b 	bl	8000b50 <LCD_Sprite>
					HAL_UART_Transmit(&huart5, "e", 1, 10);
 800141a:	230a      	movs	r3, #10
 800141c:	2201      	movs	r2, #1
 800141e:	4916      	ldr	r1, [pc, #88]	@ (8001478 <main+0x7d0>)
 8001420:	4808      	ldr	r0, [pc, #32]	@ (8001444 <main+0x79c>)
 8001422:	f004 fc3e 	bl	8005ca2 <HAL_UART_Transmit>
					send_i2c_command("5");
 8001426:	4815      	ldr	r0, [pc, #84]	@ (800147c <main+0x7d4>)
 8001428:	f000 fd36 	bl	8001e98 <send_i2c_command>
 800142c:	e060      	b.n	80014f0 <main+0x848>
 800142e:	bf00      	nop
 8001430:	2000c522 	.word	0x2000c522
 8001434:	2000c330 	.word	0x2000c330
 8001438:	2000c52c 	.word	0x2000c52c
 800143c:	2000b958 	.word	0x2000b958
 8001440:	08006d40 	.word	0x08006d40
 8001444:	2000c428 	.word	0x2000c428
 8001448:	08006d38 	.word	0x08006d38
 800144c:	2000c33c 	.word	0x2000c33c
 8001450:	40020800 	.word	0x40020800
 8001454:	2000c523 	.word	0x2000c523
 8001458:	2000c340 	.word	0x2000c340
 800145c:	20000000 	.word	0x20000000
 8001460:	08006d44 	.word	0x08006d44
 8001464:	08006d48 	.word	0x08006d48
 8001468:	08006d4c 	.word	0x08006d4c
 800146c:	2000c528 	.word	0x2000c528
 8001470:	2000c524 	.word	0x2000c524
 8001474:	2000c344 	.word	0x2000c344
 8001478:	08006d50 	.word	0x08006d50
 800147c:	08006d54 	.word	0x08006d54
					//parqueo5 = 0;
				}
			}
		}else if (parqueo5 == 0){
 8001480:	4b83      	ldr	r3, [pc, #524]	@ (8001690 <main+0x9e8>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d133      	bne.n	80014f0 <main+0x848>
			if (carroD5 == 1){
 8001488:	4b82      	ldr	r3, [pc, #520]	@ (8001694 <main+0x9ec>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d12c      	bne.n	80014ea <main+0x842>
				FillRect(100, 170, 36, 50, 0x736E);
 8001490:	f247 336e 	movw	r3, #29550	@ 0x736e
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	2332      	movs	r3, #50	@ 0x32
 8001498:	2224      	movs	r2, #36	@ 0x24
 800149a:	21aa      	movs	r1, #170	@ 0xaa
 800149c:	2064      	movs	r0, #100	@ 0x64
 800149e:	f7ff fafd 	bl	8000a9c <FillRect>
				carroD5 = 0;
 80014a2:	4b7c      	ldr	r3, [pc, #496]	@ (8001694 <main+0x9ec>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
				parqueos++;
 80014a8:	4b7b      	ldr	r3, [pc, #492]	@ (8001698 <main+0x9f0>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	3301      	adds	r3, #1
 80014ae:	4a7a      	ldr	r2, [pc, #488]	@ (8001698 <main+0x9f0>)
 80014b0:	6013      	str	r3, [r2, #0]
				change = 1;
 80014b2:	4b7a      	ldr	r3, [pc, #488]	@ (800169c <main+0x9f4>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	701a      	strb	r2, [r3, #0]
				LCD_Sprite(101, 140, 35, 18, semaforo, 2, 0, 0, 0);
 80014b8:	2300      	movs	r3, #0
 80014ba:	9304      	str	r3, [sp, #16]
 80014bc:	2300      	movs	r3, #0
 80014be:	9303      	str	r3, [sp, #12]
 80014c0:	2300      	movs	r3, #0
 80014c2:	9302      	str	r3, [sp, #8]
 80014c4:	2302      	movs	r3, #2
 80014c6:	9301      	str	r3, [sp, #4]
 80014c8:	4b75      	ldr	r3, [pc, #468]	@ (80016a0 <main+0x9f8>)
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2312      	movs	r3, #18
 80014ce:	2223      	movs	r2, #35	@ 0x23
 80014d0:	218c      	movs	r1, #140	@ 0x8c
 80014d2:	2065      	movs	r0, #101	@ 0x65
 80014d4:	f7ff fb3c 	bl	8000b50 <LCD_Sprite>
				HAL_UART_Transmit(&huart5, "m", 1, 10);
 80014d8:	230a      	movs	r3, #10
 80014da:	2201      	movs	r2, #1
 80014dc:	4971      	ldr	r1, [pc, #452]	@ (80016a4 <main+0x9fc>)
 80014de:	4872      	ldr	r0, [pc, #456]	@ (80016a8 <main+0xa00>)
 80014e0:	f004 fbdf 	bl	8005ca2 <HAL_UART_Transmit>
				send_i2c_command("e");
 80014e4:	4871      	ldr	r0, [pc, #452]	@ (80016ac <main+0xa04>)
 80014e6:	f000 fcd7 	bl	8001e98 <send_i2c_command>
				//parqueo5 = 0;
			}
			y5 = 160;
 80014ea:	4b71      	ldr	r3, [pc, #452]	@ (80016b0 <main+0xa08>)
 80014ec:	22a0      	movs	r2, #160	@ 0xa0
 80014ee:	601a      	str	r2, [r3, #0]
		}

		//CARRO 6
		if (parqueo6 == 1){	//SI SE RECIBE UN DATO PROVENIENTE DE LA UART
 80014f0:	4b70      	ldr	r3, [pc, #448]	@ (80016b4 <main+0xa0c>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d146      	bne.n	8001586 <main+0x8de>
			if (carroD6 == 0){
 80014f8:	4b6f      	ldr	r3, [pc, #444]	@ (80016b8 <main+0xa10>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d17a      	bne.n	80015f6 <main+0x94e>
				LCD_Sprite(150, y6, 36, 48, cars, 8, 5, 0, 0);
 8001500:	4b6e      	ldr	r3, [pc, #440]	@ (80016bc <main+0xa14>)
 8001502:	6819      	ldr	r1, [r3, #0]
 8001504:	2300      	movs	r3, #0
 8001506:	9304      	str	r3, [sp, #16]
 8001508:	2300      	movs	r3, #0
 800150a:	9303      	str	r3, [sp, #12]
 800150c:	2305      	movs	r3, #5
 800150e:	9302      	str	r3, [sp, #8]
 8001510:	2308      	movs	r3, #8
 8001512:	9301      	str	r3, [sp, #4]
 8001514:	4b6a      	ldr	r3, [pc, #424]	@ (80016c0 <main+0xa18>)
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	2330      	movs	r3, #48	@ 0x30
 800151a:	2224      	movs	r2, #36	@ 0x24
 800151c:	2096      	movs	r0, #150	@ 0x96
 800151e:	f7ff fb17 	bl	8000b50 <LCD_Sprite>
				if (y6 <= 169){
 8001522:	4b66      	ldr	r3, [pc, #408]	@ (80016bc <main+0xa14>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2ba9      	cmp	r3, #169	@ 0xa9
 8001528:	dc04      	bgt.n	8001534 <main+0x88c>
					y6++;
 800152a:	4b64      	ldr	r3, [pc, #400]	@ (80016bc <main+0xa14>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	3301      	adds	r3, #1
 8001530:	4a62      	ldr	r2, [pc, #392]	@ (80016bc <main+0xa14>)
 8001532:	6013      	str	r3, [r2, #0]
				}
				if (y6 == 170){
 8001534:	4b61      	ldr	r3, [pc, #388]	@ (80016bc <main+0xa14>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2baa      	cmp	r3, #170	@ 0xaa
 800153a:	d15c      	bne.n	80015f6 <main+0x94e>
					carroD6 = 1;
 800153c:	4b5e      	ldr	r3, [pc, #376]	@ (80016b8 <main+0xa10>)
 800153e:	2201      	movs	r2, #1
 8001540:	701a      	strb	r2, [r3, #0]
					parqueos--;
 8001542:	4b55      	ldr	r3, [pc, #340]	@ (8001698 <main+0x9f0>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	3b01      	subs	r3, #1
 8001548:	4a53      	ldr	r2, [pc, #332]	@ (8001698 <main+0x9f0>)
 800154a:	6013      	str	r3, [r2, #0]
					change = 1;
 800154c:	4b53      	ldr	r3, [pc, #332]	@ (800169c <main+0x9f4>)
 800154e:	2201      	movs	r2, #1
 8001550:	701a      	strb	r2, [r3, #0]
					LCD_Sprite(151, 140, 35, 18, semaforo, 2, 1, 0, 0);
 8001552:	2300      	movs	r3, #0
 8001554:	9304      	str	r3, [sp, #16]
 8001556:	2300      	movs	r3, #0
 8001558:	9303      	str	r3, [sp, #12]
 800155a:	2301      	movs	r3, #1
 800155c:	9302      	str	r3, [sp, #8]
 800155e:	2302      	movs	r3, #2
 8001560:	9301      	str	r3, [sp, #4]
 8001562:	4b4f      	ldr	r3, [pc, #316]	@ (80016a0 <main+0x9f8>)
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	2312      	movs	r3, #18
 8001568:	2223      	movs	r2, #35	@ 0x23
 800156a:	218c      	movs	r1, #140	@ 0x8c
 800156c:	2097      	movs	r0, #151	@ 0x97
 800156e:	f7ff faef 	bl	8000b50 <LCD_Sprite>
					HAL_UART_Transmit(&huart5, "f", 1, 10);
 8001572:	230a      	movs	r3, #10
 8001574:	2201      	movs	r2, #1
 8001576:	4953      	ldr	r1, [pc, #332]	@ (80016c4 <main+0xa1c>)
 8001578:	484b      	ldr	r0, [pc, #300]	@ (80016a8 <main+0xa00>)
 800157a:	f004 fb92 	bl	8005ca2 <HAL_UART_Transmit>
					send_i2c_command("6");
 800157e:	4852      	ldr	r0, [pc, #328]	@ (80016c8 <main+0xa20>)
 8001580:	f000 fc8a 	bl	8001e98 <send_i2c_command>
 8001584:	e037      	b.n	80015f6 <main+0x94e>
					//parqueo5 = 0;
				}
			}
		}else if (parqueo6 == 0){
 8001586:	4b4b      	ldr	r3, [pc, #300]	@ (80016b4 <main+0xa0c>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d133      	bne.n	80015f6 <main+0x94e>
			if (carroD6 == 1){
 800158e:	4b4a      	ldr	r3, [pc, #296]	@ (80016b8 <main+0xa10>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d12c      	bne.n	80015f0 <main+0x948>
				FillRect(150, 170, 36, 50, 0x736E);
 8001596:	f247 336e 	movw	r3, #29550	@ 0x736e
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	2332      	movs	r3, #50	@ 0x32
 800159e:	2224      	movs	r2, #36	@ 0x24
 80015a0:	21aa      	movs	r1, #170	@ 0xaa
 80015a2:	2096      	movs	r0, #150	@ 0x96
 80015a4:	f7ff fa7a 	bl	8000a9c <FillRect>
				carroD6 = 0;
 80015a8:	4b43      	ldr	r3, [pc, #268]	@ (80016b8 <main+0xa10>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]
				parqueos++;
 80015ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001698 <main+0x9f0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	3301      	adds	r3, #1
 80015b4:	4a38      	ldr	r2, [pc, #224]	@ (8001698 <main+0x9f0>)
 80015b6:	6013      	str	r3, [r2, #0]
				change = 1;
 80015b8:	4b38      	ldr	r3, [pc, #224]	@ (800169c <main+0x9f4>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	701a      	strb	r2, [r3, #0]
				LCD_Sprite(151, 140, 35, 18, semaforo, 2, 0, 0, 0);
 80015be:	2300      	movs	r3, #0
 80015c0:	9304      	str	r3, [sp, #16]
 80015c2:	2300      	movs	r3, #0
 80015c4:	9303      	str	r3, [sp, #12]
 80015c6:	2300      	movs	r3, #0
 80015c8:	9302      	str	r3, [sp, #8]
 80015ca:	2302      	movs	r3, #2
 80015cc:	9301      	str	r3, [sp, #4]
 80015ce:	4b34      	ldr	r3, [pc, #208]	@ (80016a0 <main+0x9f8>)
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	2312      	movs	r3, #18
 80015d4:	2223      	movs	r2, #35	@ 0x23
 80015d6:	218c      	movs	r1, #140	@ 0x8c
 80015d8:	2097      	movs	r0, #151	@ 0x97
 80015da:	f7ff fab9 	bl	8000b50 <LCD_Sprite>
				HAL_UART_Transmit(&huart5, "n", 1, 10);
 80015de:	230a      	movs	r3, #10
 80015e0:	2201      	movs	r2, #1
 80015e2:	493a      	ldr	r1, [pc, #232]	@ (80016cc <main+0xa24>)
 80015e4:	4830      	ldr	r0, [pc, #192]	@ (80016a8 <main+0xa00>)
 80015e6:	f004 fb5c 	bl	8005ca2 <HAL_UART_Transmit>
				send_i2c_command("f");
 80015ea:	4836      	ldr	r0, [pc, #216]	@ (80016c4 <main+0xa1c>)
 80015ec:	f000 fc54 	bl	8001e98 <send_i2c_command>
				//parqueo5 = 0;
			}
			y6 = 160;
 80015f0:	4b32      	ldr	r3, [pc, #200]	@ (80016bc <main+0xa14>)
 80015f2:	22a0      	movs	r2, #160	@ 0xa0
 80015f4:	601a      	str	r2, [r3, #0]
		}
		//CARRO 7
		if (parqueo7 == 1){	//SI SE RECIBE UN DATO PROVENIENTE DE LA UART
 80015f6:	4b36      	ldr	r3, [pc, #216]	@ (80016d0 <main+0xa28>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d172      	bne.n	80016e4 <main+0xa3c>
			if (carroD7 == 0){
 80015fe:	4b35      	ldr	r3, [pc, #212]	@ (80016d4 <main+0xa2c>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	f040 80a6 	bne.w	8001754 <main+0xaac>
				LCD_Sprite(200, y7, 36, 48, cars, 8, 6, 0, 0);
 8001608:	4b33      	ldr	r3, [pc, #204]	@ (80016d8 <main+0xa30>)
 800160a:	6819      	ldr	r1, [r3, #0]
 800160c:	2300      	movs	r3, #0
 800160e:	9304      	str	r3, [sp, #16]
 8001610:	2300      	movs	r3, #0
 8001612:	9303      	str	r3, [sp, #12]
 8001614:	2306      	movs	r3, #6
 8001616:	9302      	str	r3, [sp, #8]
 8001618:	2308      	movs	r3, #8
 800161a:	9301      	str	r3, [sp, #4]
 800161c:	4b28      	ldr	r3, [pc, #160]	@ (80016c0 <main+0xa18>)
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	2330      	movs	r3, #48	@ 0x30
 8001622:	2224      	movs	r2, #36	@ 0x24
 8001624:	20c8      	movs	r0, #200	@ 0xc8
 8001626:	f7ff fa93 	bl	8000b50 <LCD_Sprite>
				if (y7 <= 169){
 800162a:	4b2b      	ldr	r3, [pc, #172]	@ (80016d8 <main+0xa30>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2ba9      	cmp	r3, #169	@ 0xa9
 8001630:	dc04      	bgt.n	800163c <main+0x994>
					y7++;
 8001632:	4b29      	ldr	r3, [pc, #164]	@ (80016d8 <main+0xa30>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	3301      	adds	r3, #1
 8001638:	4a27      	ldr	r2, [pc, #156]	@ (80016d8 <main+0xa30>)
 800163a:	6013      	str	r3, [r2, #0]
				}
				if (y7 == 170){
 800163c:	4b26      	ldr	r3, [pc, #152]	@ (80016d8 <main+0xa30>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2baa      	cmp	r3, #170	@ 0xaa
 8001642:	f040 8087 	bne.w	8001754 <main+0xaac>
					carroD7 = 1;
 8001646:	4b23      	ldr	r3, [pc, #140]	@ (80016d4 <main+0xa2c>)
 8001648:	2201      	movs	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
					parqueos--;
 800164c:	4b12      	ldr	r3, [pc, #72]	@ (8001698 <main+0x9f0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	3b01      	subs	r3, #1
 8001652:	4a11      	ldr	r2, [pc, #68]	@ (8001698 <main+0x9f0>)
 8001654:	6013      	str	r3, [r2, #0]
					change = 1;
 8001656:	4b11      	ldr	r3, [pc, #68]	@ (800169c <main+0x9f4>)
 8001658:	2201      	movs	r2, #1
 800165a:	701a      	strb	r2, [r3, #0]
					LCD_Sprite(201, 140, 35, 18, semaforo, 2, 1, 0, 0);
 800165c:	2300      	movs	r3, #0
 800165e:	9304      	str	r3, [sp, #16]
 8001660:	2300      	movs	r3, #0
 8001662:	9303      	str	r3, [sp, #12]
 8001664:	2301      	movs	r3, #1
 8001666:	9302      	str	r3, [sp, #8]
 8001668:	2302      	movs	r3, #2
 800166a:	9301      	str	r3, [sp, #4]
 800166c:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <main+0x9f8>)
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	2312      	movs	r3, #18
 8001672:	2223      	movs	r2, #35	@ 0x23
 8001674:	218c      	movs	r1, #140	@ 0x8c
 8001676:	20c9      	movs	r0, #201	@ 0xc9
 8001678:	f7ff fa6a 	bl	8000b50 <LCD_Sprite>
					HAL_UART_Transmit(&huart5, "g", 1, 10);
 800167c:	230a      	movs	r3, #10
 800167e:	2201      	movs	r2, #1
 8001680:	4916      	ldr	r1, [pc, #88]	@ (80016dc <main+0xa34>)
 8001682:	4809      	ldr	r0, [pc, #36]	@ (80016a8 <main+0xa00>)
 8001684:	f004 fb0d 	bl	8005ca2 <HAL_UART_Transmit>
					send_i2c_command("7");
 8001688:	4815      	ldr	r0, [pc, #84]	@ (80016e0 <main+0xa38>)
 800168a:	f000 fc05 	bl	8001e98 <send_i2c_command>
 800168e:	e061      	b.n	8001754 <main+0xaac>
 8001690:	2000c528 	.word	0x2000c528
 8001694:	2000c524 	.word	0x2000c524
 8001698:	2000c330 	.word	0x2000c330
 800169c:	2000c52c 	.word	0x2000c52c
 80016a0:	2000b958 	.word	0x2000b958
 80016a4:	08006d58 	.word	0x08006d58
 80016a8:	2000c428 	.word	0x2000c428
 80016ac:	08006d50 	.word	0x08006d50
 80016b0:	2000c344 	.word	0x2000c344
 80016b4:	2000c529 	.word	0x2000c529
 80016b8:	2000c525 	.word	0x2000c525
 80016bc:	2000c348 	.word	0x2000c348
 80016c0:	20000000 	.word	0x20000000
 80016c4:	08006d5c 	.word	0x08006d5c
 80016c8:	08006d60 	.word	0x08006d60
 80016cc:	08006d64 	.word	0x08006d64
 80016d0:	2000c52a 	.word	0x2000c52a
 80016d4:	2000c526 	.word	0x2000c526
 80016d8:	2000c34c 	.word	0x2000c34c
 80016dc:	08006d68 	.word	0x08006d68
 80016e0:	08006d6c 	.word	0x08006d6c
					//parqueo5 = 0;
				}
			}
		}else if (parqueo7 == 0){
 80016e4:	4ba3      	ldr	r3, [pc, #652]	@ (8001974 <main+0xccc>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d133      	bne.n	8001754 <main+0xaac>
			if (carroD7 == 1){
 80016ec:	4ba2      	ldr	r3, [pc, #648]	@ (8001978 <main+0xcd0>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d12c      	bne.n	800174e <main+0xaa6>
				FillRect(200, 170, 36, 50, 0x736E);
 80016f4:	f247 336e 	movw	r3, #29550	@ 0x736e
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2332      	movs	r3, #50	@ 0x32
 80016fc:	2224      	movs	r2, #36	@ 0x24
 80016fe:	21aa      	movs	r1, #170	@ 0xaa
 8001700:	20c8      	movs	r0, #200	@ 0xc8
 8001702:	f7ff f9cb 	bl	8000a9c <FillRect>
				carroD7 = 0;
 8001706:	4b9c      	ldr	r3, [pc, #624]	@ (8001978 <main+0xcd0>)
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]
				parqueos++;
 800170c:	4b9b      	ldr	r3, [pc, #620]	@ (800197c <main+0xcd4>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	3301      	adds	r3, #1
 8001712:	4a9a      	ldr	r2, [pc, #616]	@ (800197c <main+0xcd4>)
 8001714:	6013      	str	r3, [r2, #0]
				change = 1;
 8001716:	4b9a      	ldr	r3, [pc, #616]	@ (8001980 <main+0xcd8>)
 8001718:	2201      	movs	r2, #1
 800171a:	701a      	strb	r2, [r3, #0]
				LCD_Sprite(201, 140, 35, 18, semaforo, 2, 0, 0, 0);
 800171c:	2300      	movs	r3, #0
 800171e:	9304      	str	r3, [sp, #16]
 8001720:	2300      	movs	r3, #0
 8001722:	9303      	str	r3, [sp, #12]
 8001724:	2300      	movs	r3, #0
 8001726:	9302      	str	r3, [sp, #8]
 8001728:	2302      	movs	r3, #2
 800172a:	9301      	str	r3, [sp, #4]
 800172c:	4b95      	ldr	r3, [pc, #596]	@ (8001984 <main+0xcdc>)
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	2312      	movs	r3, #18
 8001732:	2223      	movs	r2, #35	@ 0x23
 8001734:	218c      	movs	r1, #140	@ 0x8c
 8001736:	20c9      	movs	r0, #201	@ 0xc9
 8001738:	f7ff fa0a 	bl	8000b50 <LCD_Sprite>
				HAL_UART_Transmit(&huart5, "o", 1, 10);
 800173c:	230a      	movs	r3, #10
 800173e:	2201      	movs	r2, #1
 8001740:	4991      	ldr	r1, [pc, #580]	@ (8001988 <main+0xce0>)
 8001742:	4892      	ldr	r0, [pc, #584]	@ (800198c <main+0xce4>)
 8001744:	f004 faad 	bl	8005ca2 <HAL_UART_Transmit>
				send_i2c_command("g");
 8001748:	4891      	ldr	r0, [pc, #580]	@ (8001990 <main+0xce8>)
 800174a:	f000 fba5 	bl	8001e98 <send_i2c_command>
				//parqueo5 = 0;
			}
			y7 = 160;
 800174e:	4b91      	ldr	r3, [pc, #580]	@ (8001994 <main+0xcec>)
 8001750:	22a0      	movs	r2, #160	@ 0xa0
 8001752:	601a      	str	r2, [r3, #0]
		}
		//CARRO 8
		if (parqueo8 == 1){	//SI SE RECIBE UN DATO PROVENIENTE DE LA UART
 8001754:	4b90      	ldr	r3, [pc, #576]	@ (8001998 <main+0xcf0>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d146      	bne.n	80017ea <main+0xb42>
			if (carroD8 == 0){
 800175c:	4b8f      	ldr	r3, [pc, #572]	@ (800199c <main+0xcf4>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d17a      	bne.n	800185a <main+0xbb2>
				LCD_Sprite(250, y8, 36, 48, cars, 8, 7, 0, 0);
 8001764:	4b8e      	ldr	r3, [pc, #568]	@ (80019a0 <main+0xcf8>)
 8001766:	6819      	ldr	r1, [r3, #0]
 8001768:	2300      	movs	r3, #0
 800176a:	9304      	str	r3, [sp, #16]
 800176c:	2300      	movs	r3, #0
 800176e:	9303      	str	r3, [sp, #12]
 8001770:	2307      	movs	r3, #7
 8001772:	9302      	str	r3, [sp, #8]
 8001774:	2308      	movs	r3, #8
 8001776:	9301      	str	r3, [sp, #4]
 8001778:	4b8a      	ldr	r3, [pc, #552]	@ (80019a4 <main+0xcfc>)
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	2330      	movs	r3, #48	@ 0x30
 800177e:	2224      	movs	r2, #36	@ 0x24
 8001780:	20fa      	movs	r0, #250	@ 0xfa
 8001782:	f7ff f9e5 	bl	8000b50 <LCD_Sprite>
				if (y8 <= 169){
 8001786:	4b86      	ldr	r3, [pc, #536]	@ (80019a0 <main+0xcf8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2ba9      	cmp	r3, #169	@ 0xa9
 800178c:	dc04      	bgt.n	8001798 <main+0xaf0>
					y8++;
 800178e:	4b84      	ldr	r3, [pc, #528]	@ (80019a0 <main+0xcf8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	3301      	adds	r3, #1
 8001794:	4a82      	ldr	r2, [pc, #520]	@ (80019a0 <main+0xcf8>)
 8001796:	6013      	str	r3, [r2, #0]
				}
				if (y8 == 170){
 8001798:	4b81      	ldr	r3, [pc, #516]	@ (80019a0 <main+0xcf8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2baa      	cmp	r3, #170	@ 0xaa
 800179e:	d15c      	bne.n	800185a <main+0xbb2>
					carroD8 = 1;
 80017a0:	4b7e      	ldr	r3, [pc, #504]	@ (800199c <main+0xcf4>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	701a      	strb	r2, [r3, #0]
					parqueos--;
 80017a6:	4b75      	ldr	r3, [pc, #468]	@ (800197c <main+0xcd4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	4a73      	ldr	r2, [pc, #460]	@ (800197c <main+0xcd4>)
 80017ae:	6013      	str	r3, [r2, #0]
					change = 1;
 80017b0:	4b73      	ldr	r3, [pc, #460]	@ (8001980 <main+0xcd8>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	701a      	strb	r2, [r3, #0]
					LCD_Sprite(251, 140, 35, 18, semaforo, 2, 1, 0, 0);
 80017b6:	2300      	movs	r3, #0
 80017b8:	9304      	str	r3, [sp, #16]
 80017ba:	2300      	movs	r3, #0
 80017bc:	9303      	str	r3, [sp, #12]
 80017be:	2301      	movs	r3, #1
 80017c0:	9302      	str	r3, [sp, #8]
 80017c2:	2302      	movs	r3, #2
 80017c4:	9301      	str	r3, [sp, #4]
 80017c6:	4b6f      	ldr	r3, [pc, #444]	@ (8001984 <main+0xcdc>)
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	2312      	movs	r3, #18
 80017cc:	2223      	movs	r2, #35	@ 0x23
 80017ce:	218c      	movs	r1, #140	@ 0x8c
 80017d0:	20fb      	movs	r0, #251	@ 0xfb
 80017d2:	f7ff f9bd 	bl	8000b50 <LCD_Sprite>
					HAL_UART_Transmit(&huart5, "h", 1, 10);
 80017d6:	230a      	movs	r3, #10
 80017d8:	2201      	movs	r2, #1
 80017da:	4973      	ldr	r1, [pc, #460]	@ (80019a8 <main+0xd00>)
 80017dc:	486b      	ldr	r0, [pc, #428]	@ (800198c <main+0xce4>)
 80017de:	f004 fa60 	bl	8005ca2 <HAL_UART_Transmit>
					send_i2c_command("8");
 80017e2:	4872      	ldr	r0, [pc, #456]	@ (80019ac <main+0xd04>)
 80017e4:	f000 fb58 	bl	8001e98 <send_i2c_command>
 80017e8:	e037      	b.n	800185a <main+0xbb2>
					//parqueo5 = 0;
				}
			}
		}else if (parqueo8 == 0){
 80017ea:	4b6b      	ldr	r3, [pc, #428]	@ (8001998 <main+0xcf0>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d133      	bne.n	800185a <main+0xbb2>
			if (carroD8 == 1){
 80017f2:	4b6a      	ldr	r3, [pc, #424]	@ (800199c <main+0xcf4>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d12c      	bne.n	8001854 <main+0xbac>
				FillRect(250, 170, 36, 50, 0x736E);
 80017fa:	f247 336e 	movw	r3, #29550	@ 0x736e
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	2332      	movs	r3, #50	@ 0x32
 8001802:	2224      	movs	r2, #36	@ 0x24
 8001804:	21aa      	movs	r1, #170	@ 0xaa
 8001806:	20fa      	movs	r0, #250	@ 0xfa
 8001808:	f7ff f948 	bl	8000a9c <FillRect>
				carroD8 = 0;
 800180c:	4b63      	ldr	r3, [pc, #396]	@ (800199c <main+0xcf4>)
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
				parqueos++;
 8001812:	4b5a      	ldr	r3, [pc, #360]	@ (800197c <main+0xcd4>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	3301      	adds	r3, #1
 8001818:	4a58      	ldr	r2, [pc, #352]	@ (800197c <main+0xcd4>)
 800181a:	6013      	str	r3, [r2, #0]
				change = 1;
 800181c:	4b58      	ldr	r3, [pc, #352]	@ (8001980 <main+0xcd8>)
 800181e:	2201      	movs	r2, #1
 8001820:	701a      	strb	r2, [r3, #0]
				LCD_Sprite(251, 140, 35, 18, semaforo, 2, 0, 0, 0);
 8001822:	2300      	movs	r3, #0
 8001824:	9304      	str	r3, [sp, #16]
 8001826:	2300      	movs	r3, #0
 8001828:	9303      	str	r3, [sp, #12]
 800182a:	2300      	movs	r3, #0
 800182c:	9302      	str	r3, [sp, #8]
 800182e:	2302      	movs	r3, #2
 8001830:	9301      	str	r3, [sp, #4]
 8001832:	4b54      	ldr	r3, [pc, #336]	@ (8001984 <main+0xcdc>)
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	2312      	movs	r3, #18
 8001838:	2223      	movs	r2, #35	@ 0x23
 800183a:	218c      	movs	r1, #140	@ 0x8c
 800183c:	20fb      	movs	r0, #251	@ 0xfb
 800183e:	f7ff f987 	bl	8000b50 <LCD_Sprite>
				HAL_UART_Transmit(&huart5, "p", 1, 10);
 8001842:	230a      	movs	r3, #10
 8001844:	2201      	movs	r2, #1
 8001846:	495a      	ldr	r1, [pc, #360]	@ (80019b0 <main+0xd08>)
 8001848:	4850      	ldr	r0, [pc, #320]	@ (800198c <main+0xce4>)
 800184a:	f004 fa2a 	bl	8005ca2 <HAL_UART_Transmit>
				send_i2c_command("h");
 800184e:	4856      	ldr	r0, [pc, #344]	@ (80019a8 <main+0xd00>)
 8001850:	f000 fb22 	bl	8001e98 <send_i2c_command>
				//parqueo5 = 0;
			}
			y8 = 160;
 8001854:	4b52      	ldr	r3, [pc, #328]	@ (80019a0 <main+0xcf8>)
 8001856:	22a0      	movs	r2, #160	@ 0xa0
 8001858:	601a      	str	r2, [r3, #0]
		}

		//NUMEROS
		if (parqueos == 8 && change == 1){
 800185a:	4b48      	ldr	r3, [pc, #288]	@ (800197c <main+0xcd4>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2b08      	cmp	r3, #8
 8001860:	d117      	bne.n	8001892 <main+0xbea>
 8001862:	4b47      	ldr	r3, [pc, #284]	@ (8001980 <main+0xcd8>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d113      	bne.n	8001892 <main+0xbea>
			LCD_Sprite(20, 107, 30, 33, numbers, 10, 8, 0, 0);
 800186a:	2300      	movs	r3, #0
 800186c:	9304      	str	r3, [sp, #16]
 800186e:	2300      	movs	r3, #0
 8001870:	9303      	str	r3, [sp, #12]
 8001872:	2308      	movs	r3, #8
 8001874:	9302      	str	r3, [sp, #8]
 8001876:	230a      	movs	r3, #10
 8001878:	9301      	str	r3, [sp, #4]
 800187a:	4b4e      	ldr	r3, [pc, #312]	@ (80019b4 <main+0xd0c>)
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	2321      	movs	r3, #33	@ 0x21
 8001880:	221e      	movs	r2, #30
 8001882:	216b      	movs	r1, #107	@ 0x6b
 8001884:	2014      	movs	r0, #20
 8001886:	f7ff f963 	bl	8000b50 <LCD_Sprite>
			change = 0;
 800188a:	4b3d      	ldr	r3, [pc, #244]	@ (8001980 <main+0xcd8>)
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]
 8001890:	e103      	b.n	8001a9a <main+0xdf2>
		}else if (parqueos == 7 && change == 1){
 8001892:	4b3a      	ldr	r3, [pc, #232]	@ (800197c <main+0xcd4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b07      	cmp	r3, #7
 8001898:	d117      	bne.n	80018ca <main+0xc22>
 800189a:	4b39      	ldr	r3, [pc, #228]	@ (8001980 <main+0xcd8>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d113      	bne.n	80018ca <main+0xc22>
			LCD_Sprite(20, 107, 30, 33, numbers, 10, 7, 0, 0);
 80018a2:	2300      	movs	r3, #0
 80018a4:	9304      	str	r3, [sp, #16]
 80018a6:	2300      	movs	r3, #0
 80018a8:	9303      	str	r3, [sp, #12]
 80018aa:	2307      	movs	r3, #7
 80018ac:	9302      	str	r3, [sp, #8]
 80018ae:	230a      	movs	r3, #10
 80018b0:	9301      	str	r3, [sp, #4]
 80018b2:	4b40      	ldr	r3, [pc, #256]	@ (80019b4 <main+0xd0c>)
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	2321      	movs	r3, #33	@ 0x21
 80018b8:	221e      	movs	r2, #30
 80018ba:	216b      	movs	r1, #107	@ 0x6b
 80018bc:	2014      	movs	r0, #20
 80018be:	f7ff f947 	bl	8000b50 <LCD_Sprite>
			change = 0;
 80018c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001980 <main+0xcd8>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
 80018c8:	e0e7      	b.n	8001a9a <main+0xdf2>
		}else if (parqueos == 6 && change == 1){
 80018ca:	4b2c      	ldr	r3, [pc, #176]	@ (800197c <main+0xcd4>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b06      	cmp	r3, #6
 80018d0:	d117      	bne.n	8001902 <main+0xc5a>
 80018d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001980 <main+0xcd8>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d113      	bne.n	8001902 <main+0xc5a>
			LCD_Sprite(20, 107, 30, 33, numbers, 10, 6, 0, 0);
 80018da:	2300      	movs	r3, #0
 80018dc:	9304      	str	r3, [sp, #16]
 80018de:	2300      	movs	r3, #0
 80018e0:	9303      	str	r3, [sp, #12]
 80018e2:	2306      	movs	r3, #6
 80018e4:	9302      	str	r3, [sp, #8]
 80018e6:	230a      	movs	r3, #10
 80018e8:	9301      	str	r3, [sp, #4]
 80018ea:	4b32      	ldr	r3, [pc, #200]	@ (80019b4 <main+0xd0c>)
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	2321      	movs	r3, #33	@ 0x21
 80018f0:	221e      	movs	r2, #30
 80018f2:	216b      	movs	r1, #107	@ 0x6b
 80018f4:	2014      	movs	r0, #20
 80018f6:	f7ff f92b 	bl	8000b50 <LCD_Sprite>
			change = 0;
 80018fa:	4b21      	ldr	r3, [pc, #132]	@ (8001980 <main+0xcd8>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
 8001900:	e0cb      	b.n	8001a9a <main+0xdf2>
		}else if (parqueos == 5 && change == 1){
 8001902:	4b1e      	ldr	r3, [pc, #120]	@ (800197c <main+0xcd4>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b05      	cmp	r3, #5
 8001908:	d117      	bne.n	800193a <main+0xc92>
 800190a:	4b1d      	ldr	r3, [pc, #116]	@ (8001980 <main+0xcd8>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d113      	bne.n	800193a <main+0xc92>
			LCD_Sprite(20, 107, 30, 33, numbers, 10, 5, 0, 0);
 8001912:	2300      	movs	r3, #0
 8001914:	9304      	str	r3, [sp, #16]
 8001916:	2300      	movs	r3, #0
 8001918:	9303      	str	r3, [sp, #12]
 800191a:	2305      	movs	r3, #5
 800191c:	9302      	str	r3, [sp, #8]
 800191e:	230a      	movs	r3, #10
 8001920:	9301      	str	r3, [sp, #4]
 8001922:	4b24      	ldr	r3, [pc, #144]	@ (80019b4 <main+0xd0c>)
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	2321      	movs	r3, #33	@ 0x21
 8001928:	221e      	movs	r2, #30
 800192a:	216b      	movs	r1, #107	@ 0x6b
 800192c:	2014      	movs	r0, #20
 800192e:	f7ff f90f 	bl	8000b50 <LCD_Sprite>
			change = 0;
 8001932:	4b13      	ldr	r3, [pc, #76]	@ (8001980 <main+0xcd8>)
 8001934:	2200      	movs	r2, #0
 8001936:	701a      	strb	r2, [r3, #0]
 8001938:	e0af      	b.n	8001a9a <main+0xdf2>
		}else if (parqueos == 4 && change == 1){
 800193a:	4b10      	ldr	r3, [pc, #64]	@ (800197c <main+0xcd4>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b04      	cmp	r3, #4
 8001940:	d13a      	bne.n	80019b8 <main+0xd10>
 8001942:	4b0f      	ldr	r3, [pc, #60]	@ (8001980 <main+0xcd8>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d136      	bne.n	80019b8 <main+0xd10>
			LCD_Sprite(20, 107, 30, 33, numbers, 10, 4, 0, 0);
 800194a:	2300      	movs	r3, #0
 800194c:	9304      	str	r3, [sp, #16]
 800194e:	2300      	movs	r3, #0
 8001950:	9303      	str	r3, [sp, #12]
 8001952:	2304      	movs	r3, #4
 8001954:	9302      	str	r3, [sp, #8]
 8001956:	230a      	movs	r3, #10
 8001958:	9301      	str	r3, [sp, #4]
 800195a:	4b16      	ldr	r3, [pc, #88]	@ (80019b4 <main+0xd0c>)
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	2321      	movs	r3, #33	@ 0x21
 8001960:	221e      	movs	r2, #30
 8001962:	216b      	movs	r1, #107	@ 0x6b
 8001964:	2014      	movs	r0, #20
 8001966:	f7ff f8f3 	bl	8000b50 <LCD_Sprite>
			change = 0;
 800196a:	4b05      	ldr	r3, [pc, #20]	@ (8001980 <main+0xcd8>)
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
 8001970:	e093      	b.n	8001a9a <main+0xdf2>
 8001972:	bf00      	nop
 8001974:	2000c52a 	.word	0x2000c52a
 8001978:	2000c526 	.word	0x2000c526
 800197c:	2000c330 	.word	0x2000c330
 8001980:	2000c52c 	.word	0x2000c52c
 8001984:	2000b958 	.word	0x2000b958
 8001988:	08006d70 	.word	0x08006d70
 800198c:	2000c428 	.word	0x2000c428
 8001990:	08006d68 	.word	0x08006d68
 8001994:	2000c34c 	.word	0x2000c34c
 8001998:	2000c52b 	.word	0x2000c52b
 800199c:	2000c527 	.word	0x2000c527
 80019a0:	2000c350 	.word	0x2000c350
 80019a4:	20000000 	.word	0x20000000
 80019a8:	08006d74 	.word	0x08006d74
 80019ac:	08006d78 	.word	0x08006d78
 80019b0:	08006d7c 	.word	0x08006d7c
 80019b4:	20006c00 	.word	0x20006c00
		}else if (parqueos == 3 && change == 1){
 80019b8:	4b39      	ldr	r3, [pc, #228]	@ (8001aa0 <main+0xdf8>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b03      	cmp	r3, #3
 80019be:	d117      	bne.n	80019f0 <main+0xd48>
 80019c0:	4b38      	ldr	r3, [pc, #224]	@ (8001aa4 <main+0xdfc>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d113      	bne.n	80019f0 <main+0xd48>
			LCD_Sprite(20, 107, 30, 33, numbers, 10, 3, 0, 0);
 80019c8:	2300      	movs	r3, #0
 80019ca:	9304      	str	r3, [sp, #16]
 80019cc:	2300      	movs	r3, #0
 80019ce:	9303      	str	r3, [sp, #12]
 80019d0:	2303      	movs	r3, #3
 80019d2:	9302      	str	r3, [sp, #8]
 80019d4:	230a      	movs	r3, #10
 80019d6:	9301      	str	r3, [sp, #4]
 80019d8:	4b33      	ldr	r3, [pc, #204]	@ (8001aa8 <main+0xe00>)
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	2321      	movs	r3, #33	@ 0x21
 80019de:	221e      	movs	r2, #30
 80019e0:	216b      	movs	r1, #107	@ 0x6b
 80019e2:	2014      	movs	r0, #20
 80019e4:	f7ff f8b4 	bl	8000b50 <LCD_Sprite>
			change = 0;
 80019e8:	4b2e      	ldr	r3, [pc, #184]	@ (8001aa4 <main+0xdfc>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]
 80019ee:	e054      	b.n	8001a9a <main+0xdf2>
		}else if (parqueos == 2 && change == 1){
 80019f0:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa0 <main+0xdf8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d117      	bne.n	8001a28 <main+0xd80>
 80019f8:	4b2a      	ldr	r3, [pc, #168]	@ (8001aa4 <main+0xdfc>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d113      	bne.n	8001a28 <main+0xd80>
			LCD_Sprite(20, 107, 30, 33, numbers, 10, 2, 0, 0);
 8001a00:	2300      	movs	r3, #0
 8001a02:	9304      	str	r3, [sp, #16]
 8001a04:	2300      	movs	r3, #0
 8001a06:	9303      	str	r3, [sp, #12]
 8001a08:	2302      	movs	r3, #2
 8001a0a:	9302      	str	r3, [sp, #8]
 8001a0c:	230a      	movs	r3, #10
 8001a0e:	9301      	str	r3, [sp, #4]
 8001a10:	4b25      	ldr	r3, [pc, #148]	@ (8001aa8 <main+0xe00>)
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	2321      	movs	r3, #33	@ 0x21
 8001a16:	221e      	movs	r2, #30
 8001a18:	216b      	movs	r1, #107	@ 0x6b
 8001a1a:	2014      	movs	r0, #20
 8001a1c:	f7ff f898 	bl	8000b50 <LCD_Sprite>
			change = 0;
 8001a20:	4b20      	ldr	r3, [pc, #128]	@ (8001aa4 <main+0xdfc>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
 8001a26:	e038      	b.n	8001a9a <main+0xdf2>
		}else if (parqueos == 1 && change == 1){
 8001a28:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa0 <main+0xdf8>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d117      	bne.n	8001a60 <main+0xdb8>
 8001a30:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa4 <main+0xdfc>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d113      	bne.n	8001a60 <main+0xdb8>
			LCD_Sprite(20, 107, 30, 33, numbers, 10, 1, 0, 0);
 8001a38:	2300      	movs	r3, #0
 8001a3a:	9304      	str	r3, [sp, #16]
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	9303      	str	r3, [sp, #12]
 8001a40:	2301      	movs	r3, #1
 8001a42:	9302      	str	r3, [sp, #8]
 8001a44:	230a      	movs	r3, #10
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	4b17      	ldr	r3, [pc, #92]	@ (8001aa8 <main+0xe00>)
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	2321      	movs	r3, #33	@ 0x21
 8001a4e:	221e      	movs	r2, #30
 8001a50:	216b      	movs	r1, #107	@ 0x6b
 8001a52:	2014      	movs	r0, #20
 8001a54:	f7ff f87c 	bl	8000b50 <LCD_Sprite>
			change = 0;
 8001a58:	4b12      	ldr	r3, [pc, #72]	@ (8001aa4 <main+0xdfc>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
 8001a5e:	e01c      	b.n	8001a9a <main+0xdf2>
		}else if (parqueos == 0 && change == 1){
 8001a60:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa0 <main+0xdf8>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f47f aa45 	bne.w	8000ef4 <main+0x24c>
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa4 <main+0xdfc>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	f47f aa40 	bne.w	8000ef4 <main+0x24c>
			LCD_Sprite(20, 107, 30, 33, numbers, 10, 0, 0, 0);
 8001a74:	2300      	movs	r3, #0
 8001a76:	9304      	str	r3, [sp, #16]
 8001a78:	2300      	movs	r3, #0
 8001a7a:	9303      	str	r3, [sp, #12]
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	9302      	str	r3, [sp, #8]
 8001a80:	230a      	movs	r3, #10
 8001a82:	9301      	str	r3, [sp, #4]
 8001a84:	4b08      	ldr	r3, [pc, #32]	@ (8001aa8 <main+0xe00>)
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	2321      	movs	r3, #33	@ 0x21
 8001a8a:	221e      	movs	r2, #30
 8001a8c:	216b      	movs	r1, #107	@ 0x6b
 8001a8e:	2014      	movs	r0, #20
 8001a90:	f7ff f85e 	bl	8000b50 <LCD_Sprite>
			change = 0;
 8001a94:	4b03      	ldr	r3, [pc, #12]	@ (8001aa4 <main+0xdfc>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == GPIO_PIN_RESET){
 8001a9a:	f7ff ba2b 	b.w	8000ef4 <main+0x24c>
 8001a9e:	bf00      	nop
 8001aa0:	2000c330 	.word	0x2000c330
 8001aa4:	2000c52c 	.word	0x2000c52c
 8001aa8:	20006c00 	.word	0x20006c00

08001aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b094      	sub	sp, #80	@ 0x50
 8001ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ab2:	f107 031c 	add.w	r3, r7, #28
 8001ab6:	2234      	movs	r2, #52	@ 0x34
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4618      	mov	r0, r3
 8001abc:	f005 f8f8 	bl	8006cb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ac0:	f107 0308 	add.w	r3, r7, #8
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	4b29      	ldr	r3, [pc, #164]	@ (8001b7c <SystemClock_Config+0xd0>)
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad8:	4a28      	ldr	r2, [pc, #160]	@ (8001b7c <SystemClock_Config+0xd0>)
 8001ada:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ade:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ae0:	4b26      	ldr	r3, [pc, #152]	@ (8001b7c <SystemClock_Config+0xd0>)
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001aec:	2300      	movs	r3, #0
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	4b23      	ldr	r3, [pc, #140]	@ (8001b80 <SystemClock_Config+0xd4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001af8:	4a21      	ldr	r2, [pc, #132]	@ (8001b80 <SystemClock_Config+0xd4>)
 8001afa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	4b1f      	ldr	r3, [pc, #124]	@ (8001b80 <SystemClock_Config+0xd4>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b08:	603b      	str	r3, [r7, #0]
 8001b0a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b10:	2301      	movs	r3, #1
 8001b12:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b14:	2310      	movs	r3, #16
 8001b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b20:	2308      	movs	r3, #8
 8001b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001b24:	2350      	movs	r3, #80	@ 0x50
 8001b26:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b30:	2302      	movs	r3, #2
 8001b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b34:	f107 031c 	add.w	r3, r7, #28
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f003 fd3b 	bl	80055b4 <HAL_RCC_OscConfig>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001b44:	f000 fa86 	bl	8002054 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b48:	230f      	movs	r3, #15
 8001b4a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b50:	2300      	movs	r3, #0
 8001b52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b5e:	f107 0308 	add.w	r3, r7, #8
 8001b62:	2102      	movs	r1, #2
 8001b64:	4618      	mov	r0, r3
 8001b66:	f003 fa61 	bl	800502c <HAL_RCC_ClockConfig>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001b70:	f000 fa70 	bl	8002054 <Error_Handler>
  }
}
 8001b74:	bf00      	nop
 8001b76:	3750      	adds	r7, #80	@ 0x50
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40007000 	.word	0x40007000

08001b84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b88:	4b12      	ldr	r3, [pc, #72]	@ (8001bd4 <MX_I2C1_Init+0x50>)
 8001b8a:	4a13      	ldr	r2, [pc, #76]	@ (8001bd8 <MX_I2C1_Init+0x54>)
 8001b8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b8e:	4b11      	ldr	r3, [pc, #68]	@ (8001bd4 <MX_I2C1_Init+0x50>)
 8001b90:	4a12      	ldr	r2, [pc, #72]	@ (8001bdc <MX_I2C1_Init+0x58>)
 8001b92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b94:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd4 <MX_I2C1_Init+0x50>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd4 <MX_I2C1_Init+0x50>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd4 <MX_I2C1_Init+0x50>)
 8001ba2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ba6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd4 <MX_I2C1_Init+0x50>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001bae:	4b09      	ldr	r3, [pc, #36]	@ (8001bd4 <MX_I2C1_Init+0x50>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bb4:	4b07      	ldr	r3, [pc, #28]	@ (8001bd4 <MX_I2C1_Init+0x50>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8001bba:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <MX_I2C1_Init+0x50>)
 8001bbc:	2280      	movs	r2, #128	@ 0x80
 8001bbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bc0:	4804      	ldr	r0, [pc, #16]	@ (8001bd4 <MX_I2C1_Init+0x50>)
 8001bc2:	f001 f8ad 	bl	8002d20 <HAL_I2C_Init>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bcc:	f000 fa42 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	2000c37c 	.word	0x2000c37c
 8001bd8:	40005400 	.word	0x40005400
 8001bdc:	000186a0 	.word	0x000186a0

08001be0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001be4:	4b17      	ldr	r3, [pc, #92]	@ (8001c44 <MX_SPI1_Init+0x64>)
 8001be6:	4a18      	ldr	r2, [pc, #96]	@ (8001c48 <MX_SPI1_Init+0x68>)
 8001be8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bea:	4b16      	ldr	r3, [pc, #88]	@ (8001c44 <MX_SPI1_Init+0x64>)
 8001bec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001bf0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bf2:	4b14      	ldr	r3, [pc, #80]	@ (8001c44 <MX_SPI1_Init+0x64>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bf8:	4b12      	ldr	r3, [pc, #72]	@ (8001c44 <MX_SPI1_Init+0x64>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bfe:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <MX_SPI1_Init+0x64>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c04:	4b0f      	ldr	r3, [pc, #60]	@ (8001c44 <MX_SPI1_Init+0x64>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c44 <MX_SPI1_Init+0x64>)
 8001c0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c12:	4b0c      	ldr	r3, [pc, #48]	@ (8001c44 <MX_SPI1_Init+0x64>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c18:	4b0a      	ldr	r3, [pc, #40]	@ (8001c44 <MX_SPI1_Init+0x64>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c1e:	4b09      	ldr	r3, [pc, #36]	@ (8001c44 <MX_SPI1_Init+0x64>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c24:	4b07      	ldr	r3, [pc, #28]	@ (8001c44 <MX_SPI1_Init+0x64>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c2a:	4b06      	ldr	r3, [pc, #24]	@ (8001c44 <MX_SPI1_Init+0x64>)
 8001c2c:	220a      	movs	r2, #10
 8001c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c30:	4804      	ldr	r0, [pc, #16]	@ (8001c44 <MX_SPI1_Init+0x64>)
 8001c32:	f003 ff5d 	bl	8005af0 <HAL_SPI_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c3c:	f000 fa0a 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	2000c3d0 	.word	0x2000c3d0
 8001c48:	40013000 	.word	0x40013000

08001c4c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001c50:	4b11      	ldr	r3, [pc, #68]	@ (8001c98 <MX_UART5_Init+0x4c>)
 8001c52:	4a12      	ldr	r2, [pc, #72]	@ (8001c9c <MX_UART5_Init+0x50>)
 8001c54:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001c56:	4b10      	ldr	r3, [pc, #64]	@ (8001c98 <MX_UART5_Init+0x4c>)
 8001c58:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001c5c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c98 <MX_UART5_Init+0x4c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001c64:	4b0c      	ldr	r3, [pc, #48]	@ (8001c98 <MX_UART5_Init+0x4c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c98 <MX_UART5_Init+0x4c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001c70:	4b09      	ldr	r3, [pc, #36]	@ (8001c98 <MX_UART5_Init+0x4c>)
 8001c72:	220c      	movs	r2, #12
 8001c74:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c76:	4b08      	ldr	r3, [pc, #32]	@ (8001c98 <MX_UART5_Init+0x4c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c7c:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <MX_UART5_Init+0x4c>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001c82:	4805      	ldr	r0, [pc, #20]	@ (8001c98 <MX_UART5_Init+0x4c>)
 8001c84:	f003 ffbd 	bl	8005c02 <HAL_UART_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001c8e:	f000 f9e1 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	2000c428 	.word	0x2000c428
 8001c9c:	40005000 	.word	0x40005000

08001ca0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ca4:	4b11      	ldr	r3, [pc, #68]	@ (8001cec <MX_USART2_UART_Init+0x4c>)
 8001ca6:	4a12      	ldr	r2, [pc, #72]	@ (8001cf0 <MX_USART2_UART_Init+0x50>)
 8001ca8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001caa:	4b10      	ldr	r3, [pc, #64]	@ (8001cec <MX_USART2_UART_Init+0x4c>)
 8001cac:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001cb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cec <MX_USART2_UART_Init+0x4c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cec <MX_USART2_UART_Init+0x4c>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001cec <MX_USART2_UART_Init+0x4c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cc4:	4b09      	ldr	r3, [pc, #36]	@ (8001cec <MX_USART2_UART_Init+0x4c>)
 8001cc6:	220c      	movs	r2, #12
 8001cc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cca:	4b08      	ldr	r3, [pc, #32]	@ (8001cec <MX_USART2_UART_Init+0x4c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd0:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <MX_USART2_UART_Init+0x4c>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cd6:	4805      	ldr	r0, [pc, #20]	@ (8001cec <MX_USART2_UART_Init+0x4c>)
 8001cd8:	f003 ff93 	bl	8005c02 <HAL_UART_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ce2:	f000 f9b7 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	2000c470 	.word	0x2000c470
 8001cf0:	40004400 	.word	0x40004400

08001cf4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cf8:	4b11      	ldr	r3, [pc, #68]	@ (8001d40 <MX_USART3_UART_Init+0x4c>)
 8001cfa:	4a12      	ldr	r2, [pc, #72]	@ (8001d44 <MX_USART3_UART_Init+0x50>)
 8001cfc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001cfe:	4b10      	ldr	r3, [pc, #64]	@ (8001d40 <MX_USART3_UART_Init+0x4c>)
 8001d00:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001d04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d06:	4b0e      	ldr	r3, [pc, #56]	@ (8001d40 <MX_USART3_UART_Init+0x4c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d40 <MX_USART3_UART_Init+0x4c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d12:	4b0b      	ldr	r3, [pc, #44]	@ (8001d40 <MX_USART3_UART_Init+0x4c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d18:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <MX_USART3_UART_Init+0x4c>)
 8001d1a:	220c      	movs	r2, #12
 8001d1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d1e:	4b08      	ldr	r3, [pc, #32]	@ (8001d40 <MX_USART3_UART_Init+0x4c>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d24:	4b06      	ldr	r3, [pc, #24]	@ (8001d40 <MX_USART3_UART_Init+0x4c>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d2a:	4805      	ldr	r0, [pc, #20]	@ (8001d40 <MX_USART3_UART_Init+0x4c>)
 8001d2c:	f003 ff69 	bl	8005c02 <HAL_UART_Init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001d36:	f000 f98d 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	2000c4b8 	.word	0x2000c4b8
 8001d44:	40004800 	.word	0x40004800

08001d48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08a      	sub	sp, #40	@ 0x28
 8001d4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4e:	f107 0314 	add.w	r3, r7, #20
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	60da      	str	r2, [r3, #12]
 8001d5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	4b49      	ldr	r3, [pc, #292]	@ (8001e88 <MX_GPIO_Init+0x140>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d66:	4a48      	ldr	r2, [pc, #288]	@ (8001e88 <MX_GPIO_Init+0x140>)
 8001d68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d6e:	4b46      	ldr	r3, [pc, #280]	@ (8001e88 <MX_GPIO_Init+0x140>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	4b42      	ldr	r3, [pc, #264]	@ (8001e88 <MX_GPIO_Init+0x140>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d82:	4a41      	ldr	r2, [pc, #260]	@ (8001e88 <MX_GPIO_Init+0x140>)
 8001d84:	f043 0304 	orr.w	r3, r3, #4
 8001d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d8a:	4b3f      	ldr	r3, [pc, #252]	@ (8001e88 <MX_GPIO_Init+0x140>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e88 <MX_GPIO_Init+0x140>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9e:	4a3a      	ldr	r2, [pc, #232]	@ (8001e88 <MX_GPIO_Init+0x140>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da6:	4b38      	ldr	r3, [pc, #224]	@ (8001e88 <MX_GPIO_Init+0x140>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	4b34      	ldr	r3, [pc, #208]	@ (8001e88 <MX_GPIO_Init+0x140>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dba:	4a33      	ldr	r2, [pc, #204]	@ (8001e88 <MX_GPIO_Init+0x140>)
 8001dbc:	f043 0302 	orr.w	r3, r3, #2
 8001dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dc2:	4b31      	ldr	r3, [pc, #196]	@ (8001e88 <MX_GPIO_Init+0x140>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	607b      	str	r3, [r7, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	603b      	str	r3, [r7, #0]
 8001dd2:	4b2d      	ldr	r3, [pc, #180]	@ (8001e88 <MX_GPIO_Init+0x140>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd6:	4a2c      	ldr	r2, [pc, #176]	@ (8001e88 <MX_GPIO_Init+0x140>)
 8001dd8:	f043 0308 	orr.w	r3, r3, #8
 8001ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dde:	4b2a      	ldr	r3, [pc, #168]	@ (8001e88 <MX_GPIO_Init+0x140>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	603b      	str	r3, [r7, #0]
 8001de8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_D1_Pin, GPIO_PIN_RESET);
 8001dea:	2200      	movs	r2, #0
 8001dec:	2182      	movs	r1, #130	@ 0x82
 8001dee:	4827      	ldr	r0, [pc, #156]	@ (8001e8c <MX_GPIO_Init+0x144>)
 8001df0:	f000 ff7c 	bl	8002cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 8001df4:	2200      	movs	r2, #0
 8001df6:	f240 7113 	movw	r1, #1811	@ 0x713
 8001dfa:	4825      	ldr	r0, [pc, #148]	@ (8001e90 <MX_GPIO_Init+0x148>)
 8001dfc:	f000 ff76 	bl	8002cec <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 8001e00:	2200      	movs	r2, #0
 8001e02:	f240 4179 	movw	r1, #1145	@ 0x479
 8001e06:	4823      	ldr	r0, [pc, #140]	@ (8001e94 <MX_GPIO_Init+0x14c>)
 8001e08:	f000 ff70 	bl	8002cec <HAL_GPIO_WritePin>
                          |LCD_D4_Pin|SD_SS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON2_Pin BUTTON3_Pin BUTTON4_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON3_Pin|BUTTON4_Pin|BUTTON1_Pin;
 8001e0c:	f240 230d 	movw	r3, #525	@ 0x20d
 8001e10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e16:	2301      	movs	r3, #1
 8001e18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e1a:	f107 0314 	add.w	r3, r7, #20
 8001e1e:	4619      	mov	r1, r3
 8001e20:	481a      	ldr	r0, [pc, #104]	@ (8001e8c <MX_GPIO_Init+0x144>)
 8001e22:	f000 fdb7 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
 8001e26:	2382      	movs	r3, #130	@ 0x82
 8001e28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e32:	2302      	movs	r3, #2
 8001e34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e36:	f107 0314 	add.w	r3, r7, #20
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4813      	ldr	r0, [pc, #76]	@ (8001e8c <MX_GPIO_Init+0x144>)
 8001e3e:	f000 fda9 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_D7_Pin
                           LCD_D0_Pin LCD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 8001e42:	f240 7313 	movw	r3, #1811	@ 0x713
 8001e46:	617b      	str	r3, [r7, #20]
                          |LCD_D0_Pin|LCD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e50:	2302      	movs	r3, #2
 8001e52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	4619      	mov	r1, r3
 8001e5a:	480d      	ldr	r0, [pc, #52]	@ (8001e90 <MX_GPIO_Init+0x148>)
 8001e5c:	f000 fd9a 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
                           LCD_D4_Pin SD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 8001e60:	f240 4379 	movw	r3, #1145	@ 0x479
 8001e64:	617b      	str	r3, [r7, #20]
                          |LCD_D4_Pin|SD_SS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e66:	2301      	movs	r3, #1
 8001e68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	4619      	mov	r1, r3
 8001e78:	4806      	ldr	r0, [pc, #24]	@ (8001e94 <MX_GPIO_Init+0x14c>)
 8001e7a:	f000 fd8b 	bl	8002994 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e7e:	bf00      	nop
 8001e80:	3728      	adds	r7, #40	@ 0x28
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40020800 	.word	0x40020800
 8001e90:	40020000 	.word	0x40020000
 8001e94:	40020400 	.word	0x40020400

08001e98 <send_i2c_command>:

/* USER CODE BEGIN 4 */

// Función para enviar un comando I2C
void send_i2c_command(char* command) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af02      	add	r7, sp, #8
 8001e9e:	6078      	str	r0, [r7, #4]
    HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(ESP32_ADDRESS << 1), (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7fe f9af 	bl	8000204 <strlen>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8001eae:	9200      	str	r2, [sp, #0]
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	2120      	movs	r1, #32
 8001eb4:	4803      	ldr	r0, [pc, #12]	@ (8001ec4 <send_i2c_command+0x2c>)
 8001eb6:	f001 f88d 	bl	8002fd4 <HAL_I2C_Master_Transmit>
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	2000c37c 	.word	0x2000c37c

08001ec8 <HAL_UART_RxCpltCallback>:
}
void transmit_uart5(char *message) {
   HAL_UART_Transmit(&huart5, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a52      	ldr	r2, [pc, #328]	@ (8002020 <HAL_UART_RxCpltCallback+0x158>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d126      	bne.n	8001f28 <HAL_UART_RxCpltCallback+0x60>
		switch (option1[0]){
 8001eda:	4b52      	ldr	r3, [pc, #328]	@ (8002024 <HAL_UART_RxCpltCallback+0x15c>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	3b65      	subs	r3, #101	@ 0x65
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	d81b      	bhi.n	8001f1c <HAL_UART_RxCpltCallback+0x54>
 8001ee4:	a201      	add	r2, pc, #4	@ (adr r2, 8001eec <HAL_UART_RxCpltCallback+0x24>)
 8001ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eea:	bf00      	nop
 8001eec:	08001efd 	.word	0x08001efd
 8001ef0:	08001f05 	.word	0x08001f05
 8001ef4:	08001f0d 	.word	0x08001f0d
 8001ef8:	08001f15 	.word	0x08001f15
		case 'e':
			parqueo5 = 1;
 8001efc:	4b4a      	ldr	r3, [pc, #296]	@ (8002028 <HAL_UART_RxCpltCallback+0x160>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	701a      	strb	r2, [r3, #0]
			break;
 8001f02:	e00c      	b.n	8001f1e <HAL_UART_RxCpltCallback+0x56>
		case 'f':
			parqueo6 = 1;
 8001f04:	4b49      	ldr	r3, [pc, #292]	@ (800202c <HAL_UART_RxCpltCallback+0x164>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	701a      	strb	r2, [r3, #0]
			break;
 8001f0a:	e008      	b.n	8001f1e <HAL_UART_RxCpltCallback+0x56>
		case 'g':
			parqueo7 = 1;
 8001f0c:	4b48      	ldr	r3, [pc, #288]	@ (8002030 <HAL_UART_RxCpltCallback+0x168>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	701a      	strb	r2, [r3, #0]
			break;
 8001f12:	e004      	b.n	8001f1e <HAL_UART_RxCpltCallback+0x56>
		case 'h':
			parqueo8 = 1;
 8001f14:	4b47      	ldr	r3, [pc, #284]	@ (8002034 <HAL_UART_RxCpltCallback+0x16c>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	701a      	strb	r2, [r3, #0]
			break;
 8001f1a:	e000      	b.n	8001f1e <HAL_UART_RxCpltCallback+0x56>
		default:
			break;
 8001f1c:	bf00      	nop
		}
		HAL_UART_Receive_IT(&huart2, option1, 1);  // EMPEZAR RECEPCIÓN
 8001f1e:	2201      	movs	r2, #1
 8001f20:	4940      	ldr	r1, [pc, #256]	@ (8002024 <HAL_UART_RxCpltCallback+0x15c>)
 8001f22:	4845      	ldr	r0, [pc, #276]	@ (8002038 <HAL_UART_RxCpltCallback+0x170>)
 8001f24:	f003 ff48 	bl	8005db8 <HAL_UART_Receive_IT>
	}
	if(huart->Instance == USART3){
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a43      	ldr	r2, [pc, #268]	@ (800203c <HAL_UART_RxCpltCallback+0x174>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d146      	bne.n	8001fc0 <HAL_UART_RxCpltCallback+0xf8>
		switch (option1[0]){
 8001f32:	4b3c      	ldr	r3, [pc, #240]	@ (8002024 <HAL_UART_RxCpltCallback+0x15c>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	3b65      	subs	r3, #101	@ 0x65
 8001f38:	2b0b      	cmp	r3, #11
 8001f3a:	d83b      	bhi.n	8001fb4 <HAL_UART_RxCpltCallback+0xec>
 8001f3c:	a201      	add	r2, pc, #4	@ (adr r2, 8001f44 <HAL_UART_RxCpltCallback+0x7c>)
 8001f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f42:	bf00      	nop
 8001f44:	08001f75 	.word	0x08001f75
 8001f48:	08001f85 	.word	0x08001f85
 8001f4c:	08001f95 	.word	0x08001f95
 8001f50:	08001fa5 	.word	0x08001fa5
 8001f54:	08001fb5 	.word	0x08001fb5
 8001f58:	08001fb5 	.word	0x08001fb5
 8001f5c:	08001fb5 	.word	0x08001fb5
 8001f60:	08001fb5 	.word	0x08001fb5
 8001f64:	08001f7d 	.word	0x08001f7d
 8001f68:	08001f8d 	.word	0x08001f8d
 8001f6c:	08001f9d 	.word	0x08001f9d
 8001f70:	08001fad 	.word	0x08001fad
			case 'e':
				parqueo5 = 1;
 8001f74:	4b2c      	ldr	r3, [pc, #176]	@ (8002028 <HAL_UART_RxCpltCallback+0x160>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	701a      	strb	r2, [r3, #0]
				break;
 8001f7a:	e01c      	b.n	8001fb6 <HAL_UART_RxCpltCallback+0xee>
			case 'm':
				parqueo5 = 0;
 8001f7c:	4b2a      	ldr	r3, [pc, #168]	@ (8002028 <HAL_UART_RxCpltCallback+0x160>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	701a      	strb	r2, [r3, #0]
				break;
 8001f82:	e018      	b.n	8001fb6 <HAL_UART_RxCpltCallback+0xee>
			case 'f':
				parqueo6 = 1;
 8001f84:	4b29      	ldr	r3, [pc, #164]	@ (800202c <HAL_UART_RxCpltCallback+0x164>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	701a      	strb	r2, [r3, #0]
				break;
 8001f8a:	e014      	b.n	8001fb6 <HAL_UART_RxCpltCallback+0xee>
			case 'n':
				parqueo6 = 0;
 8001f8c:	4b27      	ldr	r3, [pc, #156]	@ (800202c <HAL_UART_RxCpltCallback+0x164>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	701a      	strb	r2, [r3, #0]
				break;
 8001f92:	e010      	b.n	8001fb6 <HAL_UART_RxCpltCallback+0xee>
			case 'g':
				parqueo7 = 1;
 8001f94:	4b26      	ldr	r3, [pc, #152]	@ (8002030 <HAL_UART_RxCpltCallback+0x168>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	701a      	strb	r2, [r3, #0]
				break;
 8001f9a:	e00c      	b.n	8001fb6 <HAL_UART_RxCpltCallback+0xee>
			case 'o':
				parqueo7 = 0;
 8001f9c:	4b24      	ldr	r3, [pc, #144]	@ (8002030 <HAL_UART_RxCpltCallback+0x168>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	701a      	strb	r2, [r3, #0]
				break;
 8001fa2:	e008      	b.n	8001fb6 <HAL_UART_RxCpltCallback+0xee>
			case 'h':
				parqueo8 = 1;
 8001fa4:	4b23      	ldr	r3, [pc, #140]	@ (8002034 <HAL_UART_RxCpltCallback+0x16c>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	701a      	strb	r2, [r3, #0]
				break;
 8001faa:	e004      	b.n	8001fb6 <HAL_UART_RxCpltCallback+0xee>
			case 'p':
				parqueo8 = 0;
 8001fac:	4b21      	ldr	r3, [pc, #132]	@ (8002034 <HAL_UART_RxCpltCallback+0x16c>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
				break;
 8001fb2:	e000      	b.n	8001fb6 <HAL_UART_RxCpltCallback+0xee>
			default:
				break;
 8001fb4:	bf00      	nop
			}
			HAL_UART_Receive_IT(&huart3, option1, 1);  // EMPEZAR RECEPCIÓN
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	491a      	ldr	r1, [pc, #104]	@ (8002024 <HAL_UART_RxCpltCallback+0x15c>)
 8001fba:	4821      	ldr	r0, [pc, #132]	@ (8002040 <HAL_UART_RxCpltCallback+0x178>)
 8001fbc:	f003 fefc 	bl	8005db8 <HAL_UART_Receive_IT>
		}
	if(huart->Instance == UART5){
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a1f      	ldr	r2, [pc, #124]	@ (8002044 <HAL_UART_RxCpltCallback+0x17c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d126      	bne.n	8002018 <HAL_UART_RxCpltCallback+0x150>
			switch (option2[0]){
 8001fca:	4b1f      	ldr	r3, [pc, #124]	@ (8002048 <HAL_UART_RxCpltCallback+0x180>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	3b65      	subs	r3, #101	@ 0x65
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d81b      	bhi.n	800200c <HAL_UART_RxCpltCallback+0x144>
 8001fd4:	a201      	add	r2, pc, #4	@ (adr r2, 8001fdc <HAL_UART_RxCpltCallback+0x114>)
 8001fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fda:	bf00      	nop
 8001fdc:	08001fed 	.word	0x08001fed
 8001fe0:	08001ff5 	.word	0x08001ff5
 8001fe4:	08001ffd 	.word	0x08001ffd
 8001fe8:	08002005 	.word	0x08002005
			case 'e':
				strcpy(tx_buffer, "e");
 8001fec:	4b17      	ldr	r3, [pc, #92]	@ (800204c <HAL_UART_RxCpltCallback+0x184>)
 8001fee:	2265      	movs	r2, #101	@ 0x65
 8001ff0:	801a      	strh	r2, [r3, #0]
				break;
 8001ff2:	e00c      	b.n	800200e <HAL_UART_RxCpltCallback+0x146>
			case 'f':
				strcpy(tx_buffer, "f");
 8001ff4:	4b15      	ldr	r3, [pc, #84]	@ (800204c <HAL_UART_RxCpltCallback+0x184>)
 8001ff6:	2266      	movs	r2, #102	@ 0x66
 8001ff8:	801a      	strh	r2, [r3, #0]
				break;
 8001ffa:	e008      	b.n	800200e <HAL_UART_RxCpltCallback+0x146>
			case 'g':
				strcpy(tx_buffer, "g");
 8001ffc:	4b13      	ldr	r3, [pc, #76]	@ (800204c <HAL_UART_RxCpltCallback+0x184>)
 8001ffe:	2267      	movs	r2, #103	@ 0x67
 8002000:	801a      	strh	r2, [r3, #0]
				break;
 8002002:	e004      	b.n	800200e <HAL_UART_RxCpltCallback+0x146>
			case 'h':
				strcpy(tx_buffer, "h");
 8002004:	4b11      	ldr	r3, [pc, #68]	@ (800204c <HAL_UART_RxCpltCallback+0x184>)
 8002006:	2268      	movs	r2, #104	@ 0x68
 8002008:	801a      	strh	r2, [r3, #0]
				break;
 800200a:	e000      	b.n	800200e <HAL_UART_RxCpltCallback+0x146>
			default:
				break;
 800200c:	bf00      	nop
			}
			HAL_UART_Receive_IT(&huart5, option2, 1);  // EMPEZAR RECEPCIÓN
 800200e:	2201      	movs	r2, #1
 8002010:	490d      	ldr	r1, [pc, #52]	@ (8002048 <HAL_UART_RxCpltCallback+0x180>)
 8002012:	480f      	ldr	r0, [pc, #60]	@ (8002050 <HAL_UART_RxCpltCallback+0x188>)
 8002014:	f003 fed0 	bl	8005db8 <HAL_UART_Receive_IT>
		}
}
 8002018:	bf00      	nop
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40004400 	.word	0x40004400
 8002024:	2000c504 	.word	0x2000c504
 8002028:	2000c528 	.word	0x2000c528
 800202c:	2000c529 	.word	0x2000c529
 8002030:	2000c52a 	.word	0x2000c52a
 8002034:	2000c52b 	.word	0x2000c52b
 8002038:	2000c470 	.word	0x2000c470
 800203c:	40004800 	.word	0x40004800
 8002040:	2000c4b8 	.word	0x2000c4b8
 8002044:	40005000 	.word	0x40005000
 8002048:	2000c508 	.word	0x2000c508
 800204c:	2000c50c 	.word	0x2000c50c
 8002050:	2000c428 	.word	0x2000c428

08002054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002058:	b672      	cpsid	i
}
 800205a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800205c:	bf00      	nop
 800205e:	e7fd      	b.n	800205c <Error_Handler+0x8>

08002060 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	4b10      	ldr	r3, [pc, #64]	@ (80020ac <HAL_MspInit+0x4c>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206e:	4a0f      	ldr	r2, [pc, #60]	@ (80020ac <HAL_MspInit+0x4c>)
 8002070:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002074:	6453      	str	r3, [r2, #68]	@ 0x44
 8002076:	4b0d      	ldr	r3, [pc, #52]	@ (80020ac <HAL_MspInit+0x4c>)
 8002078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800207e:	607b      	str	r3, [r7, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	603b      	str	r3, [r7, #0]
 8002086:	4b09      	ldr	r3, [pc, #36]	@ (80020ac <HAL_MspInit+0x4c>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208a:	4a08      	ldr	r2, [pc, #32]	@ (80020ac <HAL_MspInit+0x4c>)
 800208c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002090:	6413      	str	r3, [r2, #64]	@ 0x40
 8002092:	4b06      	ldr	r3, [pc, #24]	@ (80020ac <HAL_MspInit+0x4c>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800209a:	603b      	str	r3, [r7, #0]
 800209c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40023800 	.word	0x40023800

080020b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08a      	sub	sp, #40	@ 0x28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a21      	ldr	r2, [pc, #132]	@ (8002154 <HAL_I2C_MspInit+0xa4>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d13c      	bne.n	800214c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	4b20      	ldr	r3, [pc, #128]	@ (8002158 <HAL_I2C_MspInit+0xa8>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020da:	4a1f      	ldr	r2, [pc, #124]	@ (8002158 <HAL_I2C_MspInit+0xa8>)
 80020dc:	f043 0302 	orr.w	r3, r3, #2
 80020e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002158 <HAL_I2C_MspInit+0xa8>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80020f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020f4:	2312      	movs	r3, #18
 80020f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fc:	2303      	movs	r3, #3
 80020fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002100:	2304      	movs	r3, #4
 8002102:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002104:	f107 0314 	add.w	r3, r7, #20
 8002108:	4619      	mov	r1, r3
 800210a:	4814      	ldr	r0, [pc, #80]	@ (800215c <HAL_I2C_MspInit+0xac>)
 800210c:	f000 fc42 	bl	8002994 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002110:	2300      	movs	r3, #0
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	4b10      	ldr	r3, [pc, #64]	@ (8002158 <HAL_I2C_MspInit+0xa8>)
 8002116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002118:	4a0f      	ldr	r2, [pc, #60]	@ (8002158 <HAL_I2C_MspInit+0xa8>)
 800211a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800211e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002120:	4b0d      	ldr	r3, [pc, #52]	@ (8002158 <HAL_I2C_MspInit+0xa8>)
 8002122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002124:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800212c:	2200      	movs	r2, #0
 800212e:	2100      	movs	r1, #0
 8002130:	201f      	movs	r0, #31
 8002132:	f000 fb58 	bl	80027e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002136:	201f      	movs	r0, #31
 8002138:	f000 fb71 	bl	800281e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800213c:	2200      	movs	r2, #0
 800213e:	2100      	movs	r1, #0
 8002140:	2020      	movs	r0, #32
 8002142:	f000 fb50 	bl	80027e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002146:	2020      	movs	r0, #32
 8002148:	f000 fb69 	bl	800281e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800214c:	bf00      	nop
 800214e:	3728      	adds	r7, #40	@ 0x28
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40005400 	.word	0x40005400
 8002158:	40023800 	.word	0x40023800
 800215c:	40020400 	.word	0x40020400

08002160 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	@ 0x28
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a19      	ldr	r2, [pc, #100]	@ (80021e4 <HAL_SPI_MspInit+0x84>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d12b      	bne.n	80021da <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	4b18      	ldr	r3, [pc, #96]	@ (80021e8 <HAL_SPI_MspInit+0x88>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800218a:	4a17      	ldr	r2, [pc, #92]	@ (80021e8 <HAL_SPI_MspInit+0x88>)
 800218c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002190:	6453      	str	r3, [r2, #68]	@ 0x44
 8002192:	4b15      	ldr	r3, [pc, #84]	@ (80021e8 <HAL_SPI_MspInit+0x88>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002196:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	4b11      	ldr	r3, [pc, #68]	@ (80021e8 <HAL_SPI_MspInit+0x88>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a6:	4a10      	ldr	r2, [pc, #64]	@ (80021e8 <HAL_SPI_MspInit+0x88>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ae:	4b0e      	ldr	r3, [pc, #56]	@ (80021e8 <HAL_SPI_MspInit+0x88>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80021ba:	23e0      	movs	r3, #224	@ 0xe0
 80021bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	2302      	movs	r3, #2
 80021c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c6:	2303      	movs	r3, #3
 80021c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021ca:	2305      	movs	r3, #5
 80021cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ce:	f107 0314 	add.w	r3, r7, #20
 80021d2:	4619      	mov	r1, r3
 80021d4:	4805      	ldr	r0, [pc, #20]	@ (80021ec <HAL_SPI_MspInit+0x8c>)
 80021d6:	f000 fbdd 	bl	8002994 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80021da:	bf00      	nop
 80021dc:	3728      	adds	r7, #40	@ 0x28
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40013000 	.word	0x40013000
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40020000 	.word	0x40020000

080021f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08e      	sub	sp, #56	@ 0x38
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a67      	ldr	r2, [pc, #412]	@ (80023ac <HAL_UART_MspInit+0x1bc>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d153      	bne.n	80022ba <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	623b      	str	r3, [r7, #32]
 8002216:	4b66      	ldr	r3, [pc, #408]	@ (80023b0 <HAL_UART_MspInit+0x1c0>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221a:	4a65      	ldr	r2, [pc, #404]	@ (80023b0 <HAL_UART_MspInit+0x1c0>)
 800221c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002220:	6413      	str	r3, [r2, #64]	@ 0x40
 8002222:	4b63      	ldr	r3, [pc, #396]	@ (80023b0 <HAL_UART_MspInit+0x1c0>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002226:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800222a:	623b      	str	r3, [r7, #32]
 800222c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
 8002232:	4b5f      	ldr	r3, [pc, #380]	@ (80023b0 <HAL_UART_MspInit+0x1c0>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	4a5e      	ldr	r2, [pc, #376]	@ (80023b0 <HAL_UART_MspInit+0x1c0>)
 8002238:	f043 0304 	orr.w	r3, r3, #4
 800223c:	6313      	str	r3, [r2, #48]	@ 0x30
 800223e:	4b5c      	ldr	r3, [pc, #368]	@ (80023b0 <HAL_UART_MspInit+0x1c0>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	61fb      	str	r3, [r7, #28]
 8002248:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	61bb      	str	r3, [r7, #24]
 800224e:	4b58      	ldr	r3, [pc, #352]	@ (80023b0 <HAL_UART_MspInit+0x1c0>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	4a57      	ldr	r2, [pc, #348]	@ (80023b0 <HAL_UART_MspInit+0x1c0>)
 8002254:	f043 0308 	orr.w	r3, r3, #8
 8002258:	6313      	str	r3, [r2, #48]	@ 0x30
 800225a:	4b55      	ldr	r3, [pc, #340]	@ (80023b0 <HAL_UART_MspInit+0x1c0>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	61bb      	str	r3, [r7, #24]
 8002264:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002266:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800226a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226c:	2302      	movs	r3, #2
 800226e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002274:	2303      	movs	r3, #3
 8002276:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002278:	2308      	movs	r3, #8
 800227a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800227c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002280:	4619      	mov	r1, r3
 8002282:	484c      	ldr	r0, [pc, #304]	@ (80023b4 <HAL_UART_MspInit+0x1c4>)
 8002284:	f000 fb86 	bl	8002994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002288:	2304      	movs	r3, #4
 800228a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228c:	2302      	movs	r3, #2
 800228e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002294:	2303      	movs	r3, #3
 8002296:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002298:	2308      	movs	r3, #8
 800229a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800229c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022a0:	4619      	mov	r1, r3
 80022a2:	4845      	ldr	r0, [pc, #276]	@ (80023b8 <HAL_UART_MspInit+0x1c8>)
 80022a4:	f000 fb76 	bl	8002994 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80022a8:	2200      	movs	r2, #0
 80022aa:	2100      	movs	r1, #0
 80022ac:	2035      	movs	r0, #53	@ 0x35
 80022ae:	f000 fa9a 	bl	80027e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80022b2:	2035      	movs	r0, #53	@ 0x35
 80022b4:	f000 fab3 	bl	800281e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80022b8:	e073      	b.n	80023a2 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a3f      	ldr	r2, [pc, #252]	@ (80023bc <HAL_UART_MspInit+0x1cc>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d134      	bne.n	800232e <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	4b39      	ldr	r3, [pc, #228]	@ (80023b0 <HAL_UART_MspInit+0x1c0>)
 80022ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022cc:	4a38      	ldr	r2, [pc, #224]	@ (80023b0 <HAL_UART_MspInit+0x1c0>)
 80022ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80022d4:	4b36      	ldr	r3, [pc, #216]	@ (80023b0 <HAL_UART_MspInit+0x1c0>)
 80022d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e0:	2300      	movs	r3, #0
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	4b32      	ldr	r3, [pc, #200]	@ (80023b0 <HAL_UART_MspInit+0x1c0>)
 80022e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e8:	4a31      	ldr	r2, [pc, #196]	@ (80023b0 <HAL_UART_MspInit+0x1c0>)
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80022f0:	4b2f      	ldr	r3, [pc, #188]	@ (80023b0 <HAL_UART_MspInit+0x1c0>)
 80022f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	613b      	str	r3, [r7, #16]
 80022fa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022fc:	230c      	movs	r3, #12
 80022fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002300:	2302      	movs	r3, #2
 8002302:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002308:	2303      	movs	r3, #3
 800230a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800230c:	2307      	movs	r3, #7
 800230e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002310:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002314:	4619      	mov	r1, r3
 8002316:	482a      	ldr	r0, [pc, #168]	@ (80023c0 <HAL_UART_MspInit+0x1d0>)
 8002318:	f000 fb3c 	bl	8002994 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800231c:	2200      	movs	r2, #0
 800231e:	2100      	movs	r1, #0
 8002320:	2026      	movs	r0, #38	@ 0x26
 8002322:	f000 fa60 	bl	80027e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002326:	2026      	movs	r0, #38	@ 0x26
 8002328:	f000 fa79 	bl	800281e <HAL_NVIC_EnableIRQ>
}
 800232c:	e039      	b.n	80023a2 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a24      	ldr	r2, [pc, #144]	@ (80023c4 <HAL_UART_MspInit+0x1d4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d134      	bne.n	80023a2 <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002338:	2300      	movs	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	4b1c      	ldr	r3, [pc, #112]	@ (80023b0 <HAL_UART_MspInit+0x1c0>)
 800233e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002340:	4a1b      	ldr	r2, [pc, #108]	@ (80023b0 <HAL_UART_MspInit+0x1c0>)
 8002342:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002346:	6413      	str	r3, [r2, #64]	@ 0x40
 8002348:	4b19      	ldr	r3, [pc, #100]	@ (80023b0 <HAL_UART_MspInit+0x1c0>)
 800234a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002354:	2300      	movs	r3, #0
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	4b15      	ldr	r3, [pc, #84]	@ (80023b0 <HAL_UART_MspInit+0x1c0>)
 800235a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235c:	4a14      	ldr	r2, [pc, #80]	@ (80023b0 <HAL_UART_MspInit+0x1c0>)
 800235e:	f043 0304 	orr.w	r3, r3, #4
 8002362:	6313      	str	r3, [r2, #48]	@ 0x30
 8002364:	4b12      	ldr	r3, [pc, #72]	@ (80023b0 <HAL_UART_MspInit+0x1c0>)
 8002366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8002370:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8002374:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002376:	2302      	movs	r3, #2
 8002378:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800237e:	2303      	movs	r3, #3
 8002380:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002382:	2307      	movs	r3, #7
 8002384:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002386:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800238a:	4619      	mov	r1, r3
 800238c:	4809      	ldr	r0, [pc, #36]	@ (80023b4 <HAL_UART_MspInit+0x1c4>)
 800238e:	f000 fb01 	bl	8002994 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002392:	2200      	movs	r2, #0
 8002394:	2100      	movs	r1, #0
 8002396:	2027      	movs	r0, #39	@ 0x27
 8002398:	f000 fa25 	bl	80027e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800239c:	2027      	movs	r0, #39	@ 0x27
 800239e:	f000 fa3e 	bl	800281e <HAL_NVIC_EnableIRQ>
}
 80023a2:	bf00      	nop
 80023a4:	3738      	adds	r7, #56	@ 0x38
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40005000 	.word	0x40005000
 80023b0:	40023800 	.word	0x40023800
 80023b4:	40020800 	.word	0x40020800
 80023b8:	40020c00 	.word	0x40020c00
 80023bc:	40004400 	.word	0x40004400
 80023c0:	40020000 	.word	0x40020000
 80023c4:	40004800 	.word	0x40004800

080023c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023cc:	bf00      	nop
 80023ce:	e7fd      	b.n	80023cc <NMI_Handler+0x4>

080023d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023d4:	bf00      	nop
 80023d6:	e7fd      	b.n	80023d4 <HardFault_Handler+0x4>

080023d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023dc:	bf00      	nop
 80023de:	e7fd      	b.n	80023dc <MemManage_Handler+0x4>

080023e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023e4:	bf00      	nop
 80023e6:	e7fd      	b.n	80023e4 <BusFault_Handler+0x4>

080023e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023ec:	bf00      	nop
 80023ee:	e7fd      	b.n	80023ec <UsageFault_Handler+0x4>

080023f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023fe:	b480      	push	{r7}
 8002400:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800241e:	f000 f8c3 	bl	80025a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
	...

08002428 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800242c:	4802      	ldr	r0, [pc, #8]	@ (8002438 <I2C1_EV_IRQHandler+0x10>)
 800242e:	f000 fecf 	bl	80031d0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	2000c37c 	.word	0x2000c37c

0800243c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002440:	4802      	ldr	r0, [pc, #8]	@ (800244c <I2C1_ER_IRQHandler+0x10>)
 8002442:	f001 f818 	bl	8003476 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	2000c37c 	.word	0x2000c37c

08002450 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002454:	4802      	ldr	r0, [pc, #8]	@ (8002460 <USART2_IRQHandler+0x10>)
 8002456:	f003 fcd5 	bl	8005e04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	2000c470 	.word	0x2000c470

08002464 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002468:	4802      	ldr	r0, [pc, #8]	@ (8002474 <USART3_IRQHandler+0x10>)
 800246a:	f003 fccb 	bl	8005e04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	2000c4b8 	.word	0x2000c4b8

08002478 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800247c:	4802      	ldr	r0, [pc, #8]	@ (8002488 <UART5_IRQHandler+0x10>)
 800247e:	f003 fcc1 	bl	8005e04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	2000c428 	.word	0x2000c428

0800248c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002490:	4b06      	ldr	r3, [pc, #24]	@ (80024ac <SystemInit+0x20>)
 8002492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002496:	4a05      	ldr	r2, [pc, #20]	@ (80024ac <SystemInit+0x20>)
 8002498:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800249c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80024b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80024b4:	f7ff ffea 	bl	800248c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024b8:	480c      	ldr	r0, [pc, #48]	@ (80024ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024ba:	490d      	ldr	r1, [pc, #52]	@ (80024f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024bc:	4a0d      	ldr	r2, [pc, #52]	@ (80024f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024c0:	e002      	b.n	80024c8 <LoopCopyDataInit>

080024c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024c6:	3304      	adds	r3, #4

080024c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024cc:	d3f9      	bcc.n	80024c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ce:	4a0a      	ldr	r2, [pc, #40]	@ (80024f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024d0:	4c0a      	ldr	r4, [pc, #40]	@ (80024fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80024d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024d4:	e001      	b.n	80024da <LoopFillZerobss>

080024d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024d8:	3204      	adds	r2, #4

080024da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024dc:	d3fb      	bcc.n	80024d6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80024de:	f004 fbef 	bl	8006cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024e2:	f7fe fbe1 	bl	8000ca8 <main>
  bx  lr    
 80024e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024f0:	2000c360 	.word	0x2000c360
  ldr r2, =_sidata
 80024f4:	08006da8 	.word	0x08006da8
  ldr r2, =_sbss
 80024f8:	2000c360 	.word	0x2000c360
  ldr r4, =_ebss
 80024fc:	2000c534 	.word	0x2000c534

08002500 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002500:	e7fe      	b.n	8002500 <ADC_IRQHandler>
	...

08002504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002508:	4b0e      	ldr	r3, [pc, #56]	@ (8002544 <HAL_Init+0x40>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a0d      	ldr	r2, [pc, #52]	@ (8002544 <HAL_Init+0x40>)
 800250e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002514:	4b0b      	ldr	r3, [pc, #44]	@ (8002544 <HAL_Init+0x40>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a0a      	ldr	r2, [pc, #40]	@ (8002544 <HAL_Init+0x40>)
 800251a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800251e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002520:	4b08      	ldr	r3, [pc, #32]	@ (8002544 <HAL_Init+0x40>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a07      	ldr	r2, [pc, #28]	@ (8002544 <HAL_Init+0x40>)
 8002526:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800252a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800252c:	2003      	movs	r0, #3
 800252e:	f000 f94f 	bl	80027d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002532:	200f      	movs	r0, #15
 8002534:	f000 f808 	bl	8002548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002538:	f7ff fd92 	bl	8002060 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40023c00 	.word	0x40023c00

08002548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002550:	4b12      	ldr	r3, [pc, #72]	@ (800259c <HAL_InitTick+0x54>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b12      	ldr	r3, [pc, #72]	@ (80025a0 <HAL_InitTick+0x58>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	4619      	mov	r1, r3
 800255a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800255e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002562:	fbb2 f3f3 	udiv	r3, r2, r3
 8002566:	4618      	mov	r0, r3
 8002568:	f000 f967 	bl	800283a <HAL_SYSTICK_Config>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e00e      	b.n	8002594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b0f      	cmp	r3, #15
 800257a:	d80a      	bhi.n	8002592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800257c:	2200      	movs	r2, #0
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	f04f 30ff 	mov.w	r0, #4294967295
 8002584:	f000 f92f 	bl	80027e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002588:	4a06      	ldr	r2, [pc, #24]	@ (80025a4 <HAL_InitTick+0x5c>)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	e000      	b.n	8002594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	2000c354 	.word	0x2000c354
 80025a0:	2000c35c 	.word	0x2000c35c
 80025a4:	2000c358 	.word	0x2000c358

080025a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025ac:	4b06      	ldr	r3, [pc, #24]	@ (80025c8 <HAL_IncTick+0x20>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	461a      	mov	r2, r3
 80025b2:	4b06      	ldr	r3, [pc, #24]	@ (80025cc <HAL_IncTick+0x24>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4413      	add	r3, r2
 80025b8:	4a04      	ldr	r2, [pc, #16]	@ (80025cc <HAL_IncTick+0x24>)
 80025ba:	6013      	str	r3, [r2, #0]
}
 80025bc:	bf00      	nop
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	2000c35c 	.word	0x2000c35c
 80025cc:	2000c530 	.word	0x2000c530

080025d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return uwTick;
 80025d4:	4b03      	ldr	r3, [pc, #12]	@ (80025e4 <HAL_GetTick+0x14>)
 80025d6:	681b      	ldr	r3, [r3, #0]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	2000c530 	.word	0x2000c530

080025e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025f0:	f7ff ffee 	bl	80025d0 <HAL_GetTick>
 80025f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002600:	d005      	beq.n	800260e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002602:	4b0a      	ldr	r3, [pc, #40]	@ (800262c <HAL_Delay+0x44>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4413      	add	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800260e:	bf00      	nop
 8002610:	f7ff ffde 	bl	80025d0 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	429a      	cmp	r2, r3
 800261e:	d8f7      	bhi.n	8002610 <HAL_Delay+0x28>
  {
  }
}
 8002620:	bf00      	nop
 8002622:	bf00      	nop
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	2000c35c 	.word	0x2000c35c

08002630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002640:	4b0c      	ldr	r3, [pc, #48]	@ (8002674 <__NVIC_SetPriorityGrouping+0x44>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800264c:	4013      	ands	r3, r2
 800264e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002658:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800265c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002662:	4a04      	ldr	r2, [pc, #16]	@ (8002674 <__NVIC_SetPriorityGrouping+0x44>)
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	60d3      	str	r3, [r2, #12]
}
 8002668:	bf00      	nop
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800267c:	4b04      	ldr	r3, [pc, #16]	@ (8002690 <__NVIC_GetPriorityGrouping+0x18>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	0a1b      	lsrs	r3, r3, #8
 8002682:	f003 0307 	and.w	r3, r3, #7
}
 8002686:	4618      	mov	r0, r3
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800269e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	db0b      	blt.n	80026be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	f003 021f 	and.w	r2, r3, #31
 80026ac:	4907      	ldr	r1, [pc, #28]	@ (80026cc <__NVIC_EnableIRQ+0x38>)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	2001      	movs	r0, #1
 80026b6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	e000e100 	.word	0xe000e100

080026d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	6039      	str	r1, [r7, #0]
 80026da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	db0a      	blt.n	80026fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	490c      	ldr	r1, [pc, #48]	@ (800271c <__NVIC_SetPriority+0x4c>)
 80026ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ee:	0112      	lsls	r2, r2, #4
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	440b      	add	r3, r1
 80026f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026f8:	e00a      	b.n	8002710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	4908      	ldr	r1, [pc, #32]	@ (8002720 <__NVIC_SetPriority+0x50>)
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	3b04      	subs	r3, #4
 8002708:	0112      	lsls	r2, r2, #4
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	440b      	add	r3, r1
 800270e:	761a      	strb	r2, [r3, #24]
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	e000e100 	.word	0xe000e100
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002724:	b480      	push	{r7}
 8002726:	b089      	sub	sp, #36	@ 0x24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f1c3 0307 	rsb	r3, r3, #7
 800273e:	2b04      	cmp	r3, #4
 8002740:	bf28      	it	cs
 8002742:	2304      	movcs	r3, #4
 8002744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	3304      	adds	r3, #4
 800274a:	2b06      	cmp	r3, #6
 800274c:	d902      	bls.n	8002754 <NVIC_EncodePriority+0x30>
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3b03      	subs	r3, #3
 8002752:	e000      	b.n	8002756 <NVIC_EncodePriority+0x32>
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002758:	f04f 32ff 	mov.w	r2, #4294967295
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43da      	mvns	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	401a      	ands	r2, r3
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800276c:	f04f 31ff 	mov.w	r1, #4294967295
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	fa01 f303 	lsl.w	r3, r1, r3
 8002776:	43d9      	mvns	r1, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800277c:	4313      	orrs	r3, r2
         );
}
 800277e:	4618      	mov	r0, r3
 8002780:	3724      	adds	r7, #36	@ 0x24
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
	...

0800278c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3b01      	subs	r3, #1
 8002798:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800279c:	d301      	bcc.n	80027a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800279e:	2301      	movs	r3, #1
 80027a0:	e00f      	b.n	80027c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027a2:	4a0a      	ldr	r2, [pc, #40]	@ (80027cc <SysTick_Config+0x40>)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027aa:	210f      	movs	r1, #15
 80027ac:	f04f 30ff 	mov.w	r0, #4294967295
 80027b0:	f7ff ff8e 	bl	80026d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027b4:	4b05      	ldr	r3, [pc, #20]	@ (80027cc <SysTick_Config+0x40>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ba:	4b04      	ldr	r3, [pc, #16]	@ (80027cc <SysTick_Config+0x40>)
 80027bc:	2207      	movs	r2, #7
 80027be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	e000e010 	.word	0xe000e010

080027d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7ff ff29 	bl	8002630 <__NVIC_SetPriorityGrouping>
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b086      	sub	sp, #24
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	4603      	mov	r3, r0
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	607a      	str	r2, [r7, #4]
 80027f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027f8:	f7ff ff3e 	bl	8002678 <__NVIC_GetPriorityGrouping>
 80027fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	68b9      	ldr	r1, [r7, #8]
 8002802:	6978      	ldr	r0, [r7, #20]
 8002804:	f7ff ff8e 	bl	8002724 <NVIC_EncodePriority>
 8002808:	4602      	mov	r2, r0
 800280a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800280e:	4611      	mov	r1, r2
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ff5d 	bl	80026d0 <__NVIC_SetPriority>
}
 8002816:	bf00      	nop
 8002818:	3718      	adds	r7, #24
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
 8002824:	4603      	mov	r3, r0
 8002826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff ff31 	bl	8002694 <__NVIC_EnableIRQ>
}
 8002832:	bf00      	nop
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b082      	sub	sp, #8
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff ffa2 	bl	800278c <SysTick_Config>
 8002848:	4603      	mov	r3, r0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b084      	sub	sp, #16
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800285e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002860:	f7ff feb6 	bl	80025d0 <HAL_GetTick>
 8002864:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d008      	beq.n	8002884 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2280      	movs	r2, #128	@ 0x80
 8002876:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e052      	b.n	800292a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0216 	bic.w	r2, r2, #22
 8002892:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695a      	ldr	r2, [r3, #20]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028a2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d103      	bne.n	80028b4 <HAL_DMA_Abort+0x62>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d007      	beq.n	80028c4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0208 	bic.w	r2, r2, #8
 80028c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0201 	bic.w	r2, r2, #1
 80028d2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028d4:	e013      	b.n	80028fe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028d6:	f7ff fe7b 	bl	80025d0 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b05      	cmp	r3, #5
 80028e2:	d90c      	bls.n	80028fe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2220      	movs	r2, #32
 80028e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2203      	movs	r2, #3
 80028ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e015      	b.n	800292a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1e4      	bne.n	80028d6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002910:	223f      	movs	r2, #63	@ 0x3f
 8002912:	409a      	lsls	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d004      	beq.n	8002950 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2280      	movs	r2, #128	@ 0x80
 800294a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e00c      	b.n	800296a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2205      	movs	r2, #5
 8002954:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0201 	bic.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002984:	b2db      	uxtb	r3, r3
}
 8002986:	4618      	mov	r0, r3
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
	...

08002994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002994:	b480      	push	{r7}
 8002996:	b089      	sub	sp, #36	@ 0x24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029aa:	2300      	movs	r3, #0
 80029ac:	61fb      	str	r3, [r7, #28]
 80029ae:	e165      	b.n	8002c7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029b0:	2201      	movs	r2, #1
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	4013      	ands	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	f040 8154 	bne.w	8002c76 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d005      	beq.n	80029e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d130      	bne.n	8002a48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	2203      	movs	r2, #3
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43db      	mvns	r3, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4013      	ands	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	43db      	mvns	r3, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	091b      	lsrs	r3, r3, #4
 8002a32:	f003 0201 	and.w	r2, r3, #1
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	d017      	beq.n	8002a84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	2203      	movs	r2, #3
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 0303 	and.w	r3, r3, #3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d123      	bne.n	8002ad8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	08da      	lsrs	r2, r3, #3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3208      	adds	r2, #8
 8002a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	220f      	movs	r2, #15
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	691a      	ldr	r2, [r3, #16]
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	08da      	lsrs	r2, r3, #3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	3208      	adds	r2, #8
 8002ad2:	69b9      	ldr	r1, [r7, #24]
 8002ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 0203 	and.w	r2, r3, #3
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 80ae 	beq.w	8002c76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	4b5d      	ldr	r3, [pc, #372]	@ (8002c94 <HAL_GPIO_Init+0x300>)
 8002b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b22:	4a5c      	ldr	r2, [pc, #368]	@ (8002c94 <HAL_GPIO_Init+0x300>)
 8002b24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b28:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b2a:	4b5a      	ldr	r3, [pc, #360]	@ (8002c94 <HAL_GPIO_Init+0x300>)
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b36:	4a58      	ldr	r2, [pc, #352]	@ (8002c98 <HAL_GPIO_Init+0x304>)
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	089b      	lsrs	r3, r3, #2
 8002b3c:	3302      	adds	r3, #2
 8002b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	220f      	movs	r2, #15
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4013      	ands	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a4f      	ldr	r2, [pc, #316]	@ (8002c9c <HAL_GPIO_Init+0x308>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d025      	beq.n	8002bae <HAL_GPIO_Init+0x21a>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a4e      	ldr	r2, [pc, #312]	@ (8002ca0 <HAL_GPIO_Init+0x30c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d01f      	beq.n	8002baa <HAL_GPIO_Init+0x216>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a4d      	ldr	r2, [pc, #308]	@ (8002ca4 <HAL_GPIO_Init+0x310>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d019      	beq.n	8002ba6 <HAL_GPIO_Init+0x212>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a4c      	ldr	r2, [pc, #304]	@ (8002ca8 <HAL_GPIO_Init+0x314>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d013      	beq.n	8002ba2 <HAL_GPIO_Init+0x20e>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a4b      	ldr	r2, [pc, #300]	@ (8002cac <HAL_GPIO_Init+0x318>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d00d      	beq.n	8002b9e <HAL_GPIO_Init+0x20a>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a4a      	ldr	r2, [pc, #296]	@ (8002cb0 <HAL_GPIO_Init+0x31c>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d007      	beq.n	8002b9a <HAL_GPIO_Init+0x206>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a49      	ldr	r2, [pc, #292]	@ (8002cb4 <HAL_GPIO_Init+0x320>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d101      	bne.n	8002b96 <HAL_GPIO_Init+0x202>
 8002b92:	2306      	movs	r3, #6
 8002b94:	e00c      	b.n	8002bb0 <HAL_GPIO_Init+0x21c>
 8002b96:	2307      	movs	r3, #7
 8002b98:	e00a      	b.n	8002bb0 <HAL_GPIO_Init+0x21c>
 8002b9a:	2305      	movs	r3, #5
 8002b9c:	e008      	b.n	8002bb0 <HAL_GPIO_Init+0x21c>
 8002b9e:	2304      	movs	r3, #4
 8002ba0:	e006      	b.n	8002bb0 <HAL_GPIO_Init+0x21c>
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e004      	b.n	8002bb0 <HAL_GPIO_Init+0x21c>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e002      	b.n	8002bb0 <HAL_GPIO_Init+0x21c>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <HAL_GPIO_Init+0x21c>
 8002bae:	2300      	movs	r3, #0
 8002bb0:	69fa      	ldr	r2, [r7, #28]
 8002bb2:	f002 0203 	and.w	r2, r2, #3
 8002bb6:	0092      	lsls	r2, r2, #2
 8002bb8:	4093      	lsls	r3, r2
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bc0:	4935      	ldr	r1, [pc, #212]	@ (8002c98 <HAL_GPIO_Init+0x304>)
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	089b      	lsrs	r3, r3, #2
 8002bc6:	3302      	adds	r3, #2
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bce:	4b3a      	ldr	r3, [pc, #232]	@ (8002cb8 <HAL_GPIO_Init+0x324>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bf2:	4a31      	ldr	r2, [pc, #196]	@ (8002cb8 <HAL_GPIO_Init+0x324>)
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bf8:	4b2f      	ldr	r3, [pc, #188]	@ (8002cb8 <HAL_GPIO_Init+0x324>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c1c:	4a26      	ldr	r2, [pc, #152]	@ (8002cb8 <HAL_GPIO_Init+0x324>)
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c22:	4b25      	ldr	r3, [pc, #148]	@ (8002cb8 <HAL_GPIO_Init+0x324>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c46:	4a1c      	ldr	r2, [pc, #112]	@ (8002cb8 <HAL_GPIO_Init+0x324>)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb8 <HAL_GPIO_Init+0x324>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c70:	4a11      	ldr	r2, [pc, #68]	@ (8002cb8 <HAL_GPIO_Init+0x324>)
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	61fb      	str	r3, [r7, #28]
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	2b0f      	cmp	r3, #15
 8002c80:	f67f ae96 	bls.w	80029b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c84:	bf00      	nop
 8002c86:	bf00      	nop
 8002c88:	3724      	adds	r7, #36	@ 0x24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40023800 	.word	0x40023800
 8002c98:	40013800 	.word	0x40013800
 8002c9c:	40020000 	.word	0x40020000
 8002ca0:	40020400 	.word	0x40020400
 8002ca4:	40020800 	.word	0x40020800
 8002ca8:	40020c00 	.word	0x40020c00
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	40021400 	.word	0x40021400
 8002cb4:	40021800 	.word	0x40021800
 8002cb8:	40013c00 	.word	0x40013c00

08002cbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	691a      	ldr	r2, [r3, #16]
 8002ccc:	887b      	ldrh	r3, [r7, #2]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d002      	beq.n	8002cda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	73fb      	strb	r3, [r7, #15]
 8002cd8:	e001      	b.n	8002cde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	807b      	strh	r3, [r7, #2]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cfc:	787b      	ldrb	r3, [r7, #1]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d02:	887a      	ldrh	r2, [r7, #2]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d08:	e003      	b.n	8002d12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d0a:	887b      	ldrh	r3, [r7, #2]
 8002d0c:	041a      	lsls	r2, r3, #16
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	619a      	str	r2, [r3, #24]
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
	...

08002d20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e12b      	b.n	8002f8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d106      	bne.n	8002d4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7ff f9b2 	bl	80020b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2224      	movs	r2, #36	@ 0x24
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0201 	bic.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d84:	f002 fa44 	bl	8005210 <HAL_RCC_GetPCLK1Freq>
 8002d88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4a81      	ldr	r2, [pc, #516]	@ (8002f94 <HAL_I2C_Init+0x274>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d807      	bhi.n	8002da4 <HAL_I2C_Init+0x84>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4a80      	ldr	r2, [pc, #512]	@ (8002f98 <HAL_I2C_Init+0x278>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	bf94      	ite	ls
 8002d9c:	2301      	movls	r3, #1
 8002d9e:	2300      	movhi	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	e006      	b.n	8002db2 <HAL_I2C_Init+0x92>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4a7d      	ldr	r2, [pc, #500]	@ (8002f9c <HAL_I2C_Init+0x27c>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	bf94      	ite	ls
 8002dac:	2301      	movls	r3, #1
 8002dae:	2300      	movhi	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e0e7      	b.n	8002f8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	4a78      	ldr	r2, [pc, #480]	@ (8002fa0 <HAL_I2C_Init+0x280>)
 8002dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc2:	0c9b      	lsrs	r3, r3, #18
 8002dc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	4a6a      	ldr	r2, [pc, #424]	@ (8002f94 <HAL_I2C_Init+0x274>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d802      	bhi.n	8002df4 <HAL_I2C_Init+0xd4>
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	3301      	adds	r3, #1
 8002df2:	e009      	b.n	8002e08 <HAL_I2C_Init+0xe8>
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002dfa:	fb02 f303 	mul.w	r3, r2, r3
 8002dfe:	4a69      	ldr	r2, [pc, #420]	@ (8002fa4 <HAL_I2C_Init+0x284>)
 8002e00:	fba2 2303 	umull	r2, r3, r2, r3
 8002e04:	099b      	lsrs	r3, r3, #6
 8002e06:	3301      	adds	r3, #1
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6812      	ldr	r2, [r2, #0]
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002e1a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	495c      	ldr	r1, [pc, #368]	@ (8002f94 <HAL_I2C_Init+0x274>)
 8002e24:	428b      	cmp	r3, r1
 8002e26:	d819      	bhi.n	8002e5c <HAL_I2C_Init+0x13c>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	1e59      	subs	r1, r3, #1
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e36:	1c59      	adds	r1, r3, #1
 8002e38:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002e3c:	400b      	ands	r3, r1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00a      	beq.n	8002e58 <HAL_I2C_Init+0x138>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	1e59      	subs	r1, r3, #1
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e50:	3301      	adds	r3, #1
 8002e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e56:	e051      	b.n	8002efc <HAL_I2C_Init+0x1dc>
 8002e58:	2304      	movs	r3, #4
 8002e5a:	e04f      	b.n	8002efc <HAL_I2C_Init+0x1dc>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d111      	bne.n	8002e88 <HAL_I2C_Init+0x168>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	1e58      	subs	r0, r3, #1
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6859      	ldr	r1, [r3, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	440b      	add	r3, r1
 8002e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e76:	3301      	adds	r3, #1
 8002e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	bf0c      	ite	eq
 8002e80:	2301      	moveq	r3, #1
 8002e82:	2300      	movne	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	e012      	b.n	8002eae <HAL_I2C_Init+0x18e>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	1e58      	subs	r0, r3, #1
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6859      	ldr	r1, [r3, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	0099      	lsls	r1, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	bf0c      	ite	eq
 8002ea8:	2301      	moveq	r3, #1
 8002eaa:	2300      	movne	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_I2C_Init+0x196>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e022      	b.n	8002efc <HAL_I2C_Init+0x1dc>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10e      	bne.n	8002edc <HAL_I2C_Init+0x1bc>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	1e58      	subs	r0, r3, #1
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6859      	ldr	r1, [r3, #4]
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	440b      	add	r3, r1
 8002ecc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002eda:	e00f      	b.n	8002efc <HAL_I2C_Init+0x1dc>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	1e58      	subs	r0, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6859      	ldr	r1, [r3, #4]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	440b      	add	r3, r1
 8002eea:	0099      	lsls	r1, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	6809      	ldr	r1, [r1, #0]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69da      	ldr	r2, [r3, #28]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002f2a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6911      	ldr	r1, [r2, #16]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	68d2      	ldr	r2, [r2, #12]
 8002f36:	4311      	orrs	r1, r2
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6812      	ldr	r2, [r2, #0]
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0201 	orr.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2220      	movs	r2, #32
 8002f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	000186a0 	.word	0x000186a0
 8002f98:	001e847f 	.word	0x001e847f
 8002f9c:	003d08ff 	.word	0x003d08ff
 8002fa0:	431bde83 	.word	0x431bde83
 8002fa4:	10624dd3 	.word	0x10624dd3

08002fa8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fba:	2b80      	cmp	r3, #128	@ 0x80
 8002fbc:	d103      	bne.n	8002fc6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	611a      	str	r2, [r3, #16]
  }
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
	...

08002fd4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b088      	sub	sp, #32
 8002fd8:	af02      	add	r7, sp, #8
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	607a      	str	r2, [r7, #4]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	817b      	strh	r3, [r7, #10]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fe8:	f7ff faf2 	bl	80025d0 <HAL_GetTick>
 8002fec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b20      	cmp	r3, #32
 8002ff8:	f040 80e0 	bne.w	80031bc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	2319      	movs	r3, #25
 8003002:	2201      	movs	r2, #1
 8003004:	4970      	ldr	r1, [pc, #448]	@ (80031c8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f001 fdea 	bl	8004be0 <I2C_WaitOnFlagUntilTimeout>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003012:	2302      	movs	r3, #2
 8003014:	e0d3      	b.n	80031be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_I2C_Master_Transmit+0x50>
 8003020:	2302      	movs	r3, #2
 8003022:	e0cc      	b.n	80031be <HAL_I2C_Master_Transmit+0x1ea>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b01      	cmp	r3, #1
 8003038:	d007      	beq.n	800304a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 0201 	orr.w	r2, r2, #1
 8003048:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003058:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2221      	movs	r2, #33	@ 0x21
 800305e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2210      	movs	r2, #16
 8003066:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	893a      	ldrh	r2, [r7, #8]
 800307a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003080:	b29a      	uxth	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	4a50      	ldr	r2, [pc, #320]	@ (80031cc <HAL_I2C_Master_Transmit+0x1f8>)
 800308a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800308c:	8979      	ldrh	r1, [r7, #10]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	6a3a      	ldr	r2, [r7, #32]
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f001 fc7a 	bl	800498c <I2C_MasterRequestWrite>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e08d      	b.n	80031be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030a2:	2300      	movs	r3, #0
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80030b8:	e066      	b.n	8003188 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	6a39      	ldr	r1, [r7, #32]
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f001 fea8 	bl	8004e14 <I2C_WaitOnTXEFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00d      	beq.n	80030e6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	d107      	bne.n	80030e2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e06b      	b.n	80031be <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ea:	781a      	ldrb	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f6:	1c5a      	adds	r2, r3, #1
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003100:	b29b      	uxth	r3, r3
 8003102:	3b01      	subs	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800310e:	3b01      	subs	r3, #1
 8003110:	b29a      	uxth	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b04      	cmp	r3, #4
 8003122:	d11b      	bne.n	800315c <HAL_I2C_Master_Transmit+0x188>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003128:	2b00      	cmp	r3, #0
 800312a:	d017      	beq.n	800315c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003130:	781a      	ldrb	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003146:	b29b      	uxth	r3, r3
 8003148:	3b01      	subs	r3, #1
 800314a:	b29a      	uxth	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003154:	3b01      	subs	r3, #1
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	6a39      	ldr	r1, [r7, #32]
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f001 fe9f 	bl	8004ea4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00d      	beq.n	8003188 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003170:	2b04      	cmp	r3, #4
 8003172:	d107      	bne.n	8003184 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003182:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e01a      	b.n	80031be <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800318c:	2b00      	cmp	r3, #0
 800318e:	d194      	bne.n	80030ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800319e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80031b8:	2300      	movs	r3, #0
 80031ba:	e000      	b.n	80031be <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80031bc:	2302      	movs	r3, #2
  }
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3718      	adds	r7, #24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	00100002 	.word	0x00100002
 80031cc:	ffff0000 	.word	0xffff0000

080031d0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b088      	sub	sp, #32
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80031d8:	2300      	movs	r3, #0
 80031da:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031f0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031f8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
 80031fc:	2b10      	cmp	r3, #16
 80031fe:	d003      	beq.n	8003208 <HAL_I2C_EV_IRQHandler+0x38>
 8003200:	7bfb      	ldrb	r3, [r7, #15]
 8003202:	2b40      	cmp	r3, #64	@ 0x40
 8003204:	f040 80b1 	bne.w	800336a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10d      	bne.n	800323e <HAL_I2C_EV_IRQHandler+0x6e>
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003228:	d003      	beq.n	8003232 <HAL_I2C_EV_IRQHandler+0x62>
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003230:	d101      	bne.n	8003236 <HAL_I2C_EV_IRQHandler+0x66>
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <HAL_I2C_EV_IRQHandler+0x68>
 8003236:	2300      	movs	r3, #0
 8003238:	2b01      	cmp	r3, #1
 800323a:	f000 8114 	beq.w	8003466 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00b      	beq.n	8003260 <HAL_I2C_EV_IRQHandler+0x90>
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800324e:	2b00      	cmp	r3, #0
 8003250:	d006      	beq.n	8003260 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f001 fecf 	bl	8004ff6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 fd7a 	bl	8003d52 <I2C_Master_SB>
 800325e:	e083      	b.n	8003368 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d008      	beq.n	800327c <HAL_I2C_EV_IRQHandler+0xac>
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 fdf2 	bl	8003e5e <I2C_Master_ADD10>
 800327a:	e075      	b.n	8003368 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d008      	beq.n	8003298 <HAL_I2C_EV_IRQHandler+0xc8>
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 fe0e 	bl	8003eb2 <I2C_Master_ADDR>
 8003296:	e067      	b.n	8003368 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	f003 0304 	and.w	r3, r3, #4
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d036      	beq.n	8003310 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032b0:	f000 80db 	beq.w	800346a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00d      	beq.n	80032da <HAL_I2C_EV_IRQHandler+0x10a>
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d008      	beq.n	80032da <HAL_I2C_EV_IRQHandler+0x10a>
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f003 0304 	and.w	r3, r3, #4
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d103      	bne.n	80032da <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f9d6 	bl	8003684 <I2C_MasterTransmit_TXE>
 80032d8:	e046      	b.n	8003368 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 80c2 	beq.w	800346a <HAL_I2C_EV_IRQHandler+0x29a>
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 80bc 	beq.w	800346a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80032f2:	7bbb      	ldrb	r3, [r7, #14]
 80032f4:	2b21      	cmp	r3, #33	@ 0x21
 80032f6:	d103      	bne.n	8003300 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 fa5f 	bl	80037bc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032fe:	e0b4      	b.n	800346a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003300:	7bfb      	ldrb	r3, [r7, #15]
 8003302:	2b40      	cmp	r3, #64	@ 0x40
 8003304:	f040 80b1 	bne.w	800346a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 facd 	bl	80038a8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800330e:	e0ac      	b.n	800346a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800331a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800331e:	f000 80a4 	beq.w	800346a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00d      	beq.n	8003348 <HAL_I2C_EV_IRQHandler+0x178>
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003332:	2b00      	cmp	r3, #0
 8003334:	d008      	beq.n	8003348 <HAL_I2C_EV_IRQHandler+0x178>
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b00      	cmp	r3, #0
 800333e:	d103      	bne.n	8003348 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 fb49 	bl	80039d8 <I2C_MasterReceive_RXNE>
 8003346:	e00f      	b.n	8003368 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 808b 	beq.w	800346a <HAL_I2C_EV_IRQHandler+0x29a>
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 8085 	beq.w	800346a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 fc01 	bl	8003b68 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003366:	e080      	b.n	800346a <HAL_I2C_EV_IRQHandler+0x29a>
 8003368:	e07f      	b.n	800346a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336e:	2b00      	cmp	r3, #0
 8003370:	d004      	beq.n	800337c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	61fb      	str	r3, [r7, #28]
 800337a:	e007      	b.n	800338c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d011      	beq.n	80033ba <HAL_I2C_EV_IRQHandler+0x1ea>
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00c      	beq.n	80033ba <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80033b0:	69b9      	ldr	r1, [r7, #24]
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 ffcc 	bl	8004350 <I2C_Slave_ADDR>
 80033b8:	e05a      	b.n	8003470 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d008      	beq.n	80033d6 <HAL_I2C_EV_IRQHandler+0x206>
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f001 f806 	bl	80043e0 <I2C_Slave_STOPF>
 80033d4:	e04c      	b.n	8003470 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80033d6:	7bbb      	ldrb	r3, [r7, #14]
 80033d8:	2b21      	cmp	r3, #33	@ 0x21
 80033da:	d002      	beq.n	80033e2 <HAL_I2C_EV_IRQHandler+0x212>
 80033dc:	7bbb      	ldrb	r3, [r7, #14]
 80033de:	2b29      	cmp	r3, #41	@ 0x29
 80033e0:	d120      	bne.n	8003424 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00d      	beq.n	8003408 <HAL_I2C_EV_IRQHandler+0x238>
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d008      	beq.n	8003408 <HAL_I2C_EV_IRQHandler+0x238>
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d103      	bne.n	8003408 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 fee7 	bl	80041d4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003406:	e032      	b.n	800346e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	f003 0304 	and.w	r3, r3, #4
 800340e:	2b00      	cmp	r3, #0
 8003410:	d02d      	beq.n	800346e <HAL_I2C_EV_IRQHandler+0x29e>
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003418:	2b00      	cmp	r3, #0
 800341a:	d028      	beq.n	800346e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 ff16 	bl	800424e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003422:	e024      	b.n	800346e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00d      	beq.n	800344a <HAL_I2C_EV_IRQHandler+0x27a>
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003434:	2b00      	cmp	r3, #0
 8003436:	d008      	beq.n	800344a <HAL_I2C_EV_IRQHandler+0x27a>
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f003 0304 	and.w	r3, r3, #4
 800343e:	2b00      	cmp	r3, #0
 8003440:	d103      	bne.n	800344a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 ff24 	bl	8004290 <I2C_SlaveReceive_RXNE>
 8003448:	e012      	b.n	8003470 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00d      	beq.n	8003470 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800345a:	2b00      	cmp	r3, #0
 800345c:	d008      	beq.n	8003470 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 ff54 	bl	800430c <I2C_SlaveReceive_BTF>
 8003464:	e004      	b.n	8003470 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003466:	bf00      	nop
 8003468:	e002      	b.n	8003470 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800346a:	bf00      	nop
 800346c:	e000      	b.n	8003470 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800346e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003470:	3720      	adds	r7, #32
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b08a      	sub	sp, #40	@ 0x28
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800348e:	2300      	movs	r3, #0
 8003490:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003498:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00d      	beq.n	80034c0 <HAL_I2C_ER_IRQHandler+0x4a>
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d008      	beq.n	80034c0 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80034ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b0:	f043 0301 	orr.w	r3, r3, #1
 80034b4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80034be:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00d      	beq.n	80034e6 <HAL_I2C_ER_IRQHandler+0x70>
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80034d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d6:	f043 0302 	orr.w	r3, r3, #2
 80034da:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80034e4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d03e      	beq.n	800356e <HAL_I2C_ER_IRQHandler+0xf8>
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d039      	beq.n	800356e <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80034fa:	7efb      	ldrb	r3, [r7, #27]
 80034fc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003502:	b29b      	uxth	r3, r3
 8003504:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800350c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003512:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003514:	7ebb      	ldrb	r3, [r7, #26]
 8003516:	2b20      	cmp	r3, #32
 8003518:	d112      	bne.n	8003540 <HAL_I2C_ER_IRQHandler+0xca>
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10f      	bne.n	8003540 <HAL_I2C_ER_IRQHandler+0xca>
 8003520:	7cfb      	ldrb	r3, [r7, #19]
 8003522:	2b21      	cmp	r3, #33	@ 0x21
 8003524:	d008      	beq.n	8003538 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003526:	7cfb      	ldrb	r3, [r7, #19]
 8003528:	2b29      	cmp	r3, #41	@ 0x29
 800352a:	d005      	beq.n	8003538 <HAL_I2C_ER_IRQHandler+0xc2>
 800352c:	7cfb      	ldrb	r3, [r7, #19]
 800352e:	2b28      	cmp	r3, #40	@ 0x28
 8003530:	d106      	bne.n	8003540 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2b21      	cmp	r3, #33	@ 0x21
 8003536:	d103      	bne.n	8003540 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f001 f881 	bl	8004640 <I2C_Slave_AF>
 800353e:	e016      	b.n	800356e <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003548:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800354a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354c:	f043 0304 	orr.w	r3, r3, #4
 8003550:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003552:	7efb      	ldrb	r3, [r7, #27]
 8003554:	2b10      	cmp	r3, #16
 8003556:	d002      	beq.n	800355e <HAL_I2C_ER_IRQHandler+0xe8>
 8003558:	7efb      	ldrb	r3, [r7, #27]
 800355a:	2b40      	cmp	r3, #64	@ 0x40
 800355c:	d107      	bne.n	800356e <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800356c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800356e:	6a3b      	ldr	r3, [r7, #32]
 8003570:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00d      	beq.n	8003594 <HAL_I2C_ER_IRQHandler+0x11e>
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800357e:	2b00      	cmp	r3, #0
 8003580:	d008      	beq.n	8003594 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003584:	f043 0308 	orr.w	r3, r3, #8
 8003588:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003592:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003596:	2b00      	cmp	r3, #0
 8003598:	d008      	beq.n	80035ac <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800359e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f001 f8be 	bl	8004728 <I2C_ITError>
  }
}
 80035ac:	bf00      	nop
 80035ae:	3728      	adds	r7, #40	@ 0x28
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	460b      	mov	r3, r1
 800360e:	70fb      	strb	r3, [r7, #3]
 8003610:	4613      	mov	r3, r2
 8003612:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003692:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800369a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d150      	bne.n	800374c <I2C_MasterTransmit_TXE+0xc8>
 80036aa:	7bfb      	ldrb	r3, [r7, #15]
 80036ac:	2b21      	cmp	r3, #33	@ 0x21
 80036ae:	d14d      	bne.n	800374c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d01d      	beq.n	80036f2 <I2C_MasterTransmit_TXE+0x6e>
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	d01a      	beq.n	80036f2 <I2C_MasterTransmit_TXE+0x6e>
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80036c2:	d016      	beq.n	80036f2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80036d2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2211      	movs	r2, #17
 80036d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff ff62 	bl	80035b4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036f0:	e060      	b.n	80037b4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003700:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003710:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b40      	cmp	r3, #64	@ 0x40
 800372a:	d107      	bne.n	800373c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f7ff ff7d 	bl	8003634 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800373a:	e03b      	b.n	80037b4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7ff ff35 	bl	80035b4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800374a:	e033      	b.n	80037b4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800374c:	7bfb      	ldrb	r3, [r7, #15]
 800374e:	2b21      	cmp	r3, #33	@ 0x21
 8003750:	d005      	beq.n	800375e <I2C_MasterTransmit_TXE+0xda>
 8003752:	7bbb      	ldrb	r3, [r7, #14]
 8003754:	2b40      	cmp	r3, #64	@ 0x40
 8003756:	d12d      	bne.n	80037b4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003758:	7bfb      	ldrb	r3, [r7, #15]
 800375a:	2b22      	cmp	r3, #34	@ 0x22
 800375c:	d12a      	bne.n	80037b4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003762:	b29b      	uxth	r3, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	d108      	bne.n	800377a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003776:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003778:	e01c      	b.n	80037b4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b40      	cmp	r3, #64	@ 0x40
 8003784:	d103      	bne.n	800378e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f88e 	bl	80038a8 <I2C_MemoryTransmit_TXE_BTF>
}
 800378c:	e012      	b.n	80037b4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003792:	781a      	ldrb	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80037b2:	e7ff      	b.n	80037b4 <I2C_MasterTransmit_TXE+0x130>
 80037b4:	bf00      	nop
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b21      	cmp	r3, #33	@ 0x21
 80037d4:	d164      	bne.n	80038a0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037da:	b29b      	uxth	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d012      	beq.n	8003806 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e4:	781a      	ldrb	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29a      	uxth	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003804:	e04c      	b.n	80038a0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2b08      	cmp	r3, #8
 800380a:	d01d      	beq.n	8003848 <I2C_MasterTransmit_BTF+0x8c>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2b20      	cmp	r3, #32
 8003810:	d01a      	beq.n	8003848 <I2C_MasterTransmit_BTF+0x8c>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003818:	d016      	beq.n	8003848 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003828:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2211      	movs	r2, #17
 800382e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2220      	movs	r2, #32
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff feb7 	bl	80035b4 <HAL_I2C_MasterTxCpltCallback>
}
 8003846:	e02b      	b.n	80038a0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003856:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003866:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2220      	movs	r2, #32
 8003872:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b40      	cmp	r3, #64	@ 0x40
 8003880:	d107      	bne.n	8003892 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7ff fed2 	bl	8003634 <HAL_I2C_MemTxCpltCallback>
}
 8003890:	e006      	b.n	80038a0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7ff fe8a 	bl	80035b4 <HAL_I2C_MasterTxCpltCallback>
}
 80038a0:	bf00      	nop
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038b6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d11d      	bne.n	80038fc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d10b      	bne.n	80038e0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038d8:	1c9a      	adds	r2, r3, #2
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80038de:	e077      	b.n	80039d0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	121b      	asrs	r3, r3, #8
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038f4:	1c5a      	adds	r2, r3, #1
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80038fa:	e069      	b.n	80039d0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003900:	2b01      	cmp	r3, #1
 8003902:	d10b      	bne.n	800391c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003908:	b2da      	uxtb	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800391a:	e059      	b.n	80039d0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003920:	2b02      	cmp	r3, #2
 8003922:	d152      	bne.n	80039ca <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003924:	7bfb      	ldrb	r3, [r7, #15]
 8003926:	2b22      	cmp	r3, #34	@ 0x22
 8003928:	d10d      	bne.n	8003946 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003938:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003944:	e044      	b.n	80039d0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800394a:	b29b      	uxth	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d015      	beq.n	800397c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003950:	7bfb      	ldrb	r3, [r7, #15]
 8003952:	2b21      	cmp	r3, #33	@ 0x21
 8003954:	d112      	bne.n	800397c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395a:	781a      	ldrb	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003970:	b29b      	uxth	r3, r3
 8003972:	3b01      	subs	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800397a:	e029      	b.n	80039d0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003980:	b29b      	uxth	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d124      	bne.n	80039d0 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003986:	7bfb      	ldrb	r3, [r7, #15]
 8003988:	2b21      	cmp	r3, #33	@ 0x21
 800398a:	d121      	bne.n	80039d0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800399a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039aa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff fe36 	bl	8003634 <HAL_I2C_MemTxCpltCallback>
}
 80039c8:	e002      	b.n	80039d0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7ff faec 	bl	8002fa8 <I2C_Flush_DR>
}
 80039d0:	bf00      	nop
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b22      	cmp	r3, #34	@ 0x22
 80039ea:	f040 80b9 	bne.w	8003b60 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f2:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2b03      	cmp	r3, #3
 8003a00:	d921      	bls.n	8003a46 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	f040 8096 	bne.w	8003b60 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a42:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003a44:	e08c      	b.n	8003b60 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d07f      	beq.n	8003b4e <I2C_MasterReceive_RXNE+0x176>
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d002      	beq.n	8003a5a <I2C_MasterReceive_RXNE+0x82>
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d179      	bne.n	8003b4e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f001 fa6a 	bl	8004f34 <I2C_WaitOnSTOPRequestThroughIT>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d14c      	bne.n	8003b00 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a74:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003a84:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	691a      	ldr	r2, [r3, #16]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a90:	b2d2      	uxtb	r2, r2
 8003a92:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a98:	1c5a      	adds	r2, r3, #1
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b40      	cmp	r3, #64	@ 0x40
 8003abe:	d10a      	bne.n	8003ad6 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7ff fdba 	bl	8003648 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003ad4:	e044      	b.n	8003b60 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d002      	beq.n	8003aea <I2C_MasterReceive_RXNE+0x112>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2b20      	cmp	r3, #32
 8003ae8:	d103      	bne.n	8003af2 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	631a      	str	r2, [r3, #48]	@ 0x30
 8003af0:	e002      	b.n	8003af8 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2212      	movs	r2, #18
 8003af6:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff fd65 	bl	80035c8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003afe:	e02f      	b.n	8003b60 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b0e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	691a      	ldr	r2, [r3, #16]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b22:	1c5a      	adds	r2, r3, #1
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7ff fd88 	bl	800365c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b4c:	e008      	b.n	8003b60 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b5c:	605a      	str	r2, [r3, #4]
}
 8003b5e:	e7ff      	b.n	8003b60 <I2C_MasterReceive_RXNE+0x188>
 8003b60:	bf00      	nop
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b74:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	2b04      	cmp	r3, #4
 8003b7e:	d11b      	bne.n	8003bb8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	685a      	ldr	r2, [r3, #4]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b8e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691a      	ldr	r2, [r3, #16]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003bb6:	e0c8      	b.n	8003d4a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	2b03      	cmp	r3, #3
 8003bc0:	d129      	bne.n	8003c16 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bd0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d00a      	beq.n	8003bee <I2C_MasterReceive_BTF+0x86>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d007      	beq.n	8003bee <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bec:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	691a      	ldr	r2, [r3, #16]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c00:	1c5a      	adds	r2, r3, #1
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003c14:	e099      	b.n	8003d4a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	f040 8081 	bne.w	8003d24 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d002      	beq.n	8003c2e <I2C_MasterReceive_BTF+0xc6>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2b10      	cmp	r3, #16
 8003c2c:	d108      	bne.n	8003c40 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	e019      	b.n	8003c74 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d002      	beq.n	8003c4c <I2C_MasterReceive_BTF+0xe4>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d108      	bne.n	8003c5e <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	e00a      	b.n	8003c74 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2b10      	cmp	r3, #16
 8003c62:	d007      	beq.n	8003c74 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c72:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	691a      	ldr	r2, [r3, #16]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c86:	1c5a      	adds	r2, r3, #1
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	3b01      	subs	r3, #1
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca4:	b2d2      	uxtb	r2, r2
 8003ca6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cac:	1c5a      	adds	r2, r3, #1
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003cce:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b40      	cmp	r3, #64	@ 0x40
 8003ce2:	d10a      	bne.n	8003cfa <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7ff fca8 	bl	8003648 <HAL_I2C_MemRxCpltCallback>
}
 8003cf8:	e027      	b.n	8003d4a <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	d002      	beq.n	8003d0e <I2C_MasterReceive_BTF+0x1a6>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2b20      	cmp	r3, #32
 8003d0c:	d103      	bne.n	8003d16 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d14:	e002      	b.n	8003d1c <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2212      	movs	r2, #18
 8003d1a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7ff fc53 	bl	80035c8 <HAL_I2C_MasterRxCpltCallback>
}
 8003d22:	e012      	b.n	8003d4a <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691a      	ldr	r2, [r3, #16]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	3b01      	subs	r3, #1
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003d4a:	bf00      	nop
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b40      	cmp	r3, #64	@ 0x40
 8003d64:	d117      	bne.n	8003d96 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d109      	bne.n	8003d82 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	461a      	mov	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d7e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003d80:	e067      	b.n	8003e52 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	f043 0301 	orr.w	r3, r3, #1
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	611a      	str	r2, [r3, #16]
}
 8003d94:	e05d      	b.n	8003e52 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d9e:	d133      	bne.n	8003e08 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b21      	cmp	r3, #33	@ 0x21
 8003daa:	d109      	bne.n	8003dc0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	461a      	mov	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003dbc:	611a      	str	r2, [r3, #16]
 8003dbe:	e008      	b.n	8003dd2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	f043 0301 	orr.w	r3, r3, #1
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d004      	beq.n	8003de4 <I2C_Master_SB+0x92>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d108      	bne.n	8003df6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d032      	beq.n	8003e52 <I2C_Master_SB+0x100>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d02d      	beq.n	8003e52 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e04:	605a      	str	r2, [r3, #4]
}
 8003e06:	e024      	b.n	8003e52 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10e      	bne.n	8003e2e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	11db      	asrs	r3, r3, #7
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	f003 0306 	and.w	r3, r3, #6
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	f063 030f 	orn	r3, r3, #15
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	611a      	str	r2, [r3, #16]
}
 8003e2c:	e011      	b.n	8003e52 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d10d      	bne.n	8003e52 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	11db      	asrs	r3, r3, #7
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	f003 0306 	and.w	r3, r3, #6
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	f063 030e 	orn	r3, r3, #14
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	611a      	str	r2, [r3, #16]
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d004      	beq.n	8003e84 <I2C_Master_ADD10+0x26>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d108      	bne.n	8003e96 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00c      	beq.n	8003ea6 <I2C_Master_ADD10+0x48>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d007      	beq.n	8003ea6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ea4:	605a      	str	r2, [r3, #4]
  }
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b091      	sub	sp, #68	@ 0x44
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ec0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec8:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ece:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b22      	cmp	r3, #34	@ 0x22
 8003eda:	f040 8169 	bne.w	80041b0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10f      	bne.n	8003f06 <I2C_Master_ADDR+0x54>
 8003ee6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003eea:	2b40      	cmp	r3, #64	@ 0x40
 8003eec:	d10b      	bne.n	8003f06 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eee:	2300      	movs	r3, #0
 8003ef0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f04:	e160      	b.n	80041c8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d11d      	bne.n	8003f4a <I2C_Master_ADDR+0x98>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003f16:	d118      	bne.n	8003f4a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f18:	2300      	movs	r3, #0
 8003f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f3c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	651a      	str	r2, [r3, #80]	@ 0x50
 8003f48:	e13e      	b.n	80041c8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d113      	bne.n	8003f7c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f54:	2300      	movs	r3, #0
 8003f56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	e115      	b.n	80041a8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	f040 808a 	bne.w	800409c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f8a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f8e:	d137      	bne.n	8004000 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f9e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003faa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fae:	d113      	bne.n	8003fd8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fbe:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd6:	e0e7      	b.n	80041a8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fd8:	2300      	movs	r3, #0
 8003fda:	623b      	str	r3, [r7, #32]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	623b      	str	r3, [r7, #32]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	623b      	str	r3, [r7, #32]
 8003fec:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	e0d3      	b.n	80041a8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004002:	2b08      	cmp	r3, #8
 8004004:	d02e      	beq.n	8004064 <I2C_Master_ADDR+0x1b2>
 8004006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004008:	2b20      	cmp	r3, #32
 800400a:	d02b      	beq.n	8004064 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800400c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800400e:	2b12      	cmp	r3, #18
 8004010:	d102      	bne.n	8004018 <I2C_Master_ADDR+0x166>
 8004012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004014:	2b01      	cmp	r3, #1
 8004016:	d125      	bne.n	8004064 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800401a:	2b04      	cmp	r3, #4
 800401c:	d00e      	beq.n	800403c <I2C_Master_ADDR+0x18a>
 800401e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004020:	2b02      	cmp	r3, #2
 8004022:	d00b      	beq.n	800403c <I2C_Master_ADDR+0x18a>
 8004024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004026:	2b10      	cmp	r3, #16
 8004028:	d008      	beq.n	800403c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	e007      	b.n	800404c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800404a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800404c:	2300      	movs	r3, #0
 800404e:	61fb      	str	r3, [r7, #28]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	61fb      	str	r3, [r7, #28]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	61fb      	str	r3, [r7, #28]
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	e0a1      	b.n	80041a8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004072:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004074:	2300      	movs	r3, #0
 8004076:	61bb      	str	r3, [r7, #24]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	61bb      	str	r3, [r7, #24]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	61bb      	str	r3, [r7, #24]
 8004088:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	e085      	b.n	80041a8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d14d      	bne.n	8004142 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80040a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040a8:	2b04      	cmp	r3, #4
 80040aa:	d016      	beq.n	80040da <I2C_Master_ADDR+0x228>
 80040ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d013      	beq.n	80040da <I2C_Master_ADDR+0x228>
 80040b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b4:	2b10      	cmp	r3, #16
 80040b6:	d010      	beq.n	80040da <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040c6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	e007      	b.n	80040ea <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80040e8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040f8:	d117      	bne.n	800412a <I2C_Master_ADDR+0x278>
 80040fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004100:	d00b      	beq.n	800411a <I2C_Master_ADDR+0x268>
 8004102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004104:	2b01      	cmp	r3, #1
 8004106:	d008      	beq.n	800411a <I2C_Master_ADDR+0x268>
 8004108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800410a:	2b08      	cmp	r3, #8
 800410c:	d005      	beq.n	800411a <I2C_Master_ADDR+0x268>
 800410e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004110:	2b10      	cmp	r3, #16
 8004112:	d002      	beq.n	800411a <I2C_Master_ADDR+0x268>
 8004114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004116:	2b20      	cmp	r3, #32
 8004118:	d107      	bne.n	800412a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004128:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800412a:	2300      	movs	r3, #0
 800412c:	617b      	str	r3, [r7, #20]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	e032      	b.n	80041a8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004150:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800415c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004160:	d117      	bne.n	8004192 <I2C_Master_ADDR+0x2e0>
 8004162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004164:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004168:	d00b      	beq.n	8004182 <I2C_Master_ADDR+0x2d0>
 800416a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800416c:	2b01      	cmp	r3, #1
 800416e:	d008      	beq.n	8004182 <I2C_Master_ADDR+0x2d0>
 8004170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004172:	2b08      	cmp	r3, #8
 8004174:	d005      	beq.n	8004182 <I2C_Master_ADDR+0x2d0>
 8004176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004178:	2b10      	cmp	r3, #16
 800417a:	d002      	beq.n	8004182 <I2C_Master_ADDR+0x2d0>
 800417c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800417e:	2b20      	cmp	r3, #32
 8004180:	d107      	bne.n	8004192 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004190:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004192:	2300      	movs	r3, #0
 8004194:	613b      	str	r3, [r7, #16]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	613b      	str	r3, [r7, #16]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	613b      	str	r3, [r7, #16]
 80041a6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80041ae:	e00b      	b.n	80041c8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041b0:	2300      	movs	r3, #0
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	68fb      	ldr	r3, [r7, #12]
}
 80041c6:	e7ff      	b.n	80041c8 <I2C_Master_ADDR+0x316>
 80041c8:	bf00      	nop
 80041ca:	3744      	adds	r7, #68	@ 0x44
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041e2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d02b      	beq.n	8004246 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f2:	781a      	ldrb	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004208:	b29b      	uxth	r3, r3
 800420a:	3b01      	subs	r3, #1
 800420c:	b29a      	uxth	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004216:	b29b      	uxth	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	d114      	bne.n	8004246 <I2C_SlaveTransmit_TXE+0x72>
 800421c:	7bfb      	ldrb	r3, [r7, #15]
 800421e:	2b29      	cmp	r3, #41	@ 0x29
 8004220:	d111      	bne.n	8004246 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004230:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2221      	movs	r2, #33	@ 0x21
 8004236:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2228      	movs	r2, #40	@ 0x28
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f7ff f9cb 	bl	80035dc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004246:	bf00      	nop
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800425a:	b29b      	uxth	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d011      	beq.n	8004284 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004264:	781a      	ldrb	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800427a:	b29b      	uxth	r3, r3
 800427c:	3b01      	subs	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800429e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d02c      	beq.n	8004304 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	691a      	ldr	r2, [r3, #16]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b4:	b2d2      	uxtb	r2, r2
 80042b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d114      	bne.n	8004304 <I2C_SlaveReceive_RXNE+0x74>
 80042da:	7bfb      	ldrb	r3, [r7, #15]
 80042dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80042de:	d111      	bne.n	8004304 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042ee:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2222      	movs	r2, #34	@ 0x22
 80042f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2228      	movs	r2, #40	@ 0x28
 80042fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7ff f976 	bl	80035f0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004304:	bf00      	nop
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d012      	beq.n	8004344 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004330:	1c5a      	adds	r2, r3, #1
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800433a:	b29b      	uxth	r3, r3
 800433c:	3b01      	subs	r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800435a:	2300      	movs	r3, #0
 800435c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004364:	b2db      	uxtb	r3, r3
 8004366:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800436a:	2b28      	cmp	r3, #40	@ 0x28
 800436c:	d125      	bne.n	80043ba <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800437c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004388:	2301      	movs	r3, #1
 800438a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004392:	2b00      	cmp	r3, #0
 8004394:	d103      	bne.n	800439e <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	81bb      	strh	r3, [r7, #12]
 800439c:	e002      	b.n	80043a4 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80043ac:	89ba      	ldrh	r2, [r7, #12]
 80043ae:	7bfb      	ldrb	r3, [r7, #15]
 80043b0:	4619      	mov	r1, r3
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7ff f926 	bl	8003604 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80043b8:	e00e      	b.n	80043d8 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ba:	2300      	movs	r3, #0
 80043bc:	60bb      	str	r3, [r7, #8]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	60bb      	str	r3, [r7, #8]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	60bb      	str	r3, [r7, #8]
 80043ce:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80043d8:	bf00      	nop
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043ee:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80043fe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004400:	2300      	movs	r3, #0
 8004402:	60bb      	str	r3, [r7, #8]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	60bb      	str	r3, [r7, #8]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0201 	orr.w	r2, r2, #1
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800442c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004438:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800443c:	d172      	bne.n	8004524 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800443e:	7bfb      	ldrb	r3, [r7, #15]
 8004440:	2b22      	cmp	r3, #34	@ 0x22
 8004442:	d002      	beq.n	800444a <I2C_Slave_STOPF+0x6a>
 8004444:	7bfb      	ldrb	r3, [r7, #15]
 8004446:	2b2a      	cmp	r3, #42	@ 0x2a
 8004448:	d135      	bne.n	80044b6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	b29a      	uxth	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800445c:	b29b      	uxth	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d005      	beq.n	800446e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004466:	f043 0204 	orr.w	r2, r3, #4
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800447c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004482:	4618      	mov	r0, r3
 8004484:	f7fe fa77 	bl	8002976 <HAL_DMA_GetState>
 8004488:	4603      	mov	r3, r0
 800448a:	2b01      	cmp	r3, #1
 800448c:	d049      	beq.n	8004522 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004492:	4a69      	ldr	r2, [pc, #420]	@ (8004638 <I2C_Slave_STOPF+0x258>)
 8004494:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800449a:	4618      	mov	r0, r3
 800449c:	f7fe fa49 	bl	8002932 <HAL_DMA_Abort_IT>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d03d      	beq.n	8004522 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80044b0:	4610      	mov	r0, r2
 80044b2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044b4:	e035      	b.n	8004522 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	b29a      	uxth	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d005      	beq.n	80044da <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d2:	f043 0204 	orr.w	r2, r3, #4
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044e8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fe fa41 	bl	8002976 <HAL_DMA_GetState>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d014      	beq.n	8004524 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044fe:	4a4e      	ldr	r2, [pc, #312]	@ (8004638 <I2C_Slave_STOPF+0x258>)
 8004500:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004506:	4618      	mov	r0, r3
 8004508:	f7fe fa13 	bl	8002932 <HAL_DMA_Abort_IT>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d008      	beq.n	8004524 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800451c:	4610      	mov	r0, r2
 800451e:	4798      	blx	r3
 8004520:	e000      	b.n	8004524 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004522:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004528:	b29b      	uxth	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d03e      	beq.n	80045ac <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b04      	cmp	r3, #4
 800453a:	d112      	bne.n	8004562 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691a      	ldr	r2, [r3, #16]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004558:	b29b      	uxth	r3, r3
 800455a:	3b01      	subs	r3, #1
 800455c:	b29a      	uxth	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800456c:	2b40      	cmp	r3, #64	@ 0x40
 800456e:	d112      	bne.n	8004596 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691a      	ldr	r2, [r3, #16]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004582:	1c5a      	adds	r2, r3, #1
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800458c:	b29b      	uxth	r3, r3
 800458e:	3b01      	subs	r3, #1
 8004590:	b29a      	uxth	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800459a:	b29b      	uxth	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	d005      	beq.n	80045ac <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a4:	f043 0204 	orr.w	r2, r3, #4
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f8b7 	bl	8004728 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80045ba:	e039      	b.n	8004630 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	2b2a      	cmp	r3, #42	@ 0x2a
 80045c0:	d109      	bne.n	80045d6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2228      	movs	r2, #40	@ 0x28
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7ff f80d 	bl	80035f0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b28      	cmp	r3, #40	@ 0x28
 80045e0:	d111      	bne.n	8004606 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a15      	ldr	r2, [pc, #84]	@ (800463c <I2C_Slave_STOPF+0x25c>)
 80045e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2220      	movs	r2, #32
 80045f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7ff f80e 	bl	8003620 <HAL_I2C_ListenCpltCallback>
}
 8004604:	e014      	b.n	8004630 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460a:	2b22      	cmp	r3, #34	@ 0x22
 800460c:	d002      	beq.n	8004614 <I2C_Slave_STOPF+0x234>
 800460e:	7bfb      	ldrb	r3, [r7, #15]
 8004610:	2b22      	cmp	r3, #34	@ 0x22
 8004612:	d10d      	bne.n	8004630 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2220      	movs	r2, #32
 800461e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fe ffe0 	bl	80035f0 <HAL_I2C_SlaveRxCpltCallback>
}
 8004630:	bf00      	nop
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	08004a91 	.word	0x08004a91
 800463c:	ffff0000 	.word	0xffff0000

08004640 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800464e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004654:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2b08      	cmp	r3, #8
 800465a:	d002      	beq.n	8004662 <I2C_Slave_AF+0x22>
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2b20      	cmp	r3, #32
 8004660:	d129      	bne.n	80046b6 <I2C_Slave_AF+0x76>
 8004662:	7bfb      	ldrb	r3, [r7, #15]
 8004664:	2b28      	cmp	r3, #40	@ 0x28
 8004666:	d126      	bne.n	80046b6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a2e      	ldr	r2, [pc, #184]	@ (8004724 <I2C_Slave_AF+0xe4>)
 800466c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800467c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004686:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004696:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7fe ffb6 	bl	8003620 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80046b4:	e031      	b.n	800471a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80046b6:	7bfb      	ldrb	r3, [r7, #15]
 80046b8:	2b21      	cmp	r3, #33	@ 0x21
 80046ba:	d129      	bne.n	8004710 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a19      	ldr	r2, [pc, #100]	@ (8004724 <I2C_Slave_AF+0xe4>)
 80046c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2221      	movs	r2, #33	@ 0x21
 80046c6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80046e6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046f0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004700:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7fe fc50 	bl	8002fa8 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f7fe ff67 	bl	80035dc <HAL_I2C_SlaveTxCpltCallback>
}
 800470e:	e004      	b.n	800471a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004718:	615a      	str	r2, [r3, #20]
}
 800471a:	bf00      	nop
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	ffff0000 	.word	0xffff0000

08004728 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004736:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800473e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004740:	7bbb      	ldrb	r3, [r7, #14]
 8004742:	2b10      	cmp	r3, #16
 8004744:	d002      	beq.n	800474c <I2C_ITError+0x24>
 8004746:	7bbb      	ldrb	r3, [r7, #14]
 8004748:	2b40      	cmp	r3, #64	@ 0x40
 800474a:	d10a      	bne.n	8004762 <I2C_ITError+0x3a>
 800474c:	7bfb      	ldrb	r3, [r7, #15]
 800474e:	2b22      	cmp	r3, #34	@ 0x22
 8004750:	d107      	bne.n	8004762 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004760:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004762:	7bfb      	ldrb	r3, [r7, #15]
 8004764:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004768:	2b28      	cmp	r3, #40	@ 0x28
 800476a:	d107      	bne.n	800477c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2228      	movs	r2, #40	@ 0x28
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800477a:	e015      	b.n	80047a8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004786:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800478a:	d00a      	beq.n	80047a2 <I2C_ITError+0x7a>
 800478c:	7bfb      	ldrb	r3, [r7, #15]
 800478e:	2b60      	cmp	r3, #96	@ 0x60
 8004790:	d007      	beq.n	80047a2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2220      	movs	r2, #32
 8004796:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047b6:	d162      	bne.n	800487e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047c6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d020      	beq.n	8004818 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047da:	4a6a      	ldr	r2, [pc, #424]	@ (8004984 <I2C_ITError+0x25c>)
 80047dc:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7fe f8a5 	bl	8002932 <HAL_DMA_Abort_IT>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 8089 	beq.w	8004902 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0201 	bic.w	r2, r2, #1
 80047fe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2220      	movs	r2, #32
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800480c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004812:	4610      	mov	r0, r2
 8004814:	4798      	blx	r3
 8004816:	e074      	b.n	8004902 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800481c:	4a59      	ldr	r2, [pc, #356]	@ (8004984 <I2C_ITError+0x25c>)
 800481e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004824:	4618      	mov	r0, r3
 8004826:	f7fe f884 	bl	8002932 <HAL_DMA_Abort_IT>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d068      	beq.n	8004902 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800483a:	2b40      	cmp	r3, #64	@ 0x40
 800483c:	d10b      	bne.n	8004856 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004848:	b2d2      	uxtb	r2, r2
 800484a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004850:	1c5a      	adds	r2, r3, #1
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0201 	bic.w	r2, r2, #1
 8004864:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2220      	movs	r2, #32
 800486a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004878:	4610      	mov	r0, r2
 800487a:	4798      	blx	r3
 800487c:	e041      	b.n	8004902 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b60      	cmp	r3, #96	@ 0x60
 8004888:	d125      	bne.n	80048d6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2220      	movs	r2, #32
 800488e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a2:	2b40      	cmp	r3, #64	@ 0x40
 80048a4:	d10b      	bne.n	80048be <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	691a      	ldr	r2, [r3, #16]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b0:	b2d2      	uxtb	r2, r2
 80048b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 0201 	bic.w	r2, r2, #1
 80048cc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7fe fece 	bl	8003670 <HAL_I2C_AbortCpltCallback>
 80048d4:	e015      	b.n	8004902 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048e0:	2b40      	cmp	r3, #64	@ 0x40
 80048e2:	d10b      	bne.n	80048fc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	691a      	ldr	r2, [r3, #16]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ee:	b2d2      	uxtb	r2, r2
 80048f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f6:	1c5a      	adds	r2, r3, #1
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7fe fead 	bl	800365c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004906:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10e      	bne.n	8004930 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004918:	2b00      	cmp	r3, #0
 800491a:	d109      	bne.n	8004930 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004922:	2b00      	cmp	r3, #0
 8004924:	d104      	bne.n	8004930 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800492c:	2b00      	cmp	r3, #0
 800492e:	d007      	beq.n	8004940 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800493e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004946:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b04      	cmp	r3, #4
 8004952:	d113      	bne.n	800497c <I2C_ITError+0x254>
 8004954:	7bfb      	ldrb	r3, [r7, #15]
 8004956:	2b28      	cmp	r3, #40	@ 0x28
 8004958:	d110      	bne.n	800497c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a0a      	ldr	r2, [pc, #40]	@ (8004988 <I2C_ITError+0x260>)
 800495e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2220      	movs	r2, #32
 800496a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7fe fe52 	bl	8003620 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800497c:	bf00      	nop
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	08004a91 	.word	0x08004a91
 8004988:	ffff0000 	.word	0xffff0000

0800498c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b088      	sub	sp, #32
 8004990:	af02      	add	r7, sp, #8
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	607a      	str	r2, [r7, #4]
 8004996:	603b      	str	r3, [r7, #0]
 8004998:	460b      	mov	r3, r1
 800499a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2b08      	cmp	r3, #8
 80049a6:	d006      	beq.n	80049b6 <I2C_MasterRequestWrite+0x2a>
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d003      	beq.n	80049b6 <I2C_MasterRequestWrite+0x2a>
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80049b4:	d108      	bne.n	80049c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	e00b      	b.n	80049e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049cc:	2b12      	cmp	r3, #18
 80049ce:	d107      	bne.n	80049e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 f8f7 	bl	8004be0 <I2C_WaitOnFlagUntilTimeout>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00d      	beq.n	8004a14 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a06:	d103      	bne.n	8004a10 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a0e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e035      	b.n	8004a80 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a1c:	d108      	bne.n	8004a30 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a1e:	897b      	ldrh	r3, [r7, #10]
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	461a      	mov	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a2c:	611a      	str	r2, [r3, #16]
 8004a2e:	e01b      	b.n	8004a68 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a30:	897b      	ldrh	r3, [r7, #10]
 8004a32:	11db      	asrs	r3, r3, #7
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	f003 0306 	and.w	r3, r3, #6
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	f063 030f 	orn	r3, r3, #15
 8004a40:	b2da      	uxtb	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	490e      	ldr	r1, [pc, #56]	@ (8004a88 <I2C_MasterRequestWrite+0xfc>)
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 f940 	bl	8004cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e010      	b.n	8004a80 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a5e:	897b      	ldrh	r3, [r7, #10]
 8004a60:	b2da      	uxtb	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	4907      	ldr	r1, [pc, #28]	@ (8004a8c <I2C_MasterRequestWrite+0x100>)
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 f930 	bl	8004cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e000      	b.n	8004a80 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3718      	adds	r7, #24
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	00010008 	.word	0x00010008
 8004a8c:	00010002 	.word	0x00010002

08004a90 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aa8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004aaa:	4b4b      	ldr	r3, [pc, #300]	@ (8004bd8 <I2C_DMAAbort+0x148>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	08db      	lsrs	r3, r3, #3
 8004ab0:	4a4a      	ldr	r2, [pc, #296]	@ (8004bdc <I2C_DMAAbort+0x14c>)
 8004ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab6:	0a1a      	lsrs	r2, r3, #8
 8004ab8:	4613      	mov	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	00da      	lsls	r2, r3, #3
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d106      	bne.n	8004ad8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ace:	f043 0220 	orr.w	r2, r3, #32
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004ad6:	e00a      	b.n	8004aee <I2C_DMAAbort+0x5e>
    }
    count--;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	3b01      	subs	r3, #1
 8004adc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ae8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aec:	d0ea      	beq.n	8004ac4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004afa:	2200      	movs	r2, #0
 8004afc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b1c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2200      	movs	r2, #0
 8004b22:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b30:	2200      	movs	r2, #0
 8004b32:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b40:	2200      	movs	r2, #0
 8004b42:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0201 	bic.w	r2, r2, #1
 8004b52:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b60      	cmp	r3, #96	@ 0x60
 8004b5e:	d10e      	bne.n	8004b7e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	2220      	movs	r2, #32
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	2200      	movs	r2, #0
 8004b74:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b76:	6978      	ldr	r0, [r7, #20]
 8004b78:	f7fe fd7a 	bl	8003670 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b7c:	e027      	b.n	8004bce <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b7e:	7cfb      	ldrb	r3, [r7, #19]
 8004b80:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004b84:	2b28      	cmp	r3, #40	@ 0x28
 8004b86:	d117      	bne.n	8004bb8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0201 	orr.w	r2, r2, #1
 8004b96:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ba6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	2200      	movs	r2, #0
 8004bac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2228      	movs	r2, #40	@ 0x28
 8004bb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004bb6:	e007      	b.n	8004bc8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004bc8:	6978      	ldr	r0, [r7, #20]
 8004bca:	f7fe fd47 	bl	800365c <HAL_I2C_ErrorCallback>
}
 8004bce:	bf00      	nop
 8004bd0:	3718      	adds	r7, #24
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	2000c354 	.word	0x2000c354
 8004bdc:	14f8b589 	.word	0x14f8b589

08004be0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	603b      	str	r3, [r7, #0]
 8004bec:	4613      	mov	r3, r2
 8004bee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bf0:	e048      	b.n	8004c84 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf8:	d044      	beq.n	8004c84 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bfa:	f7fd fce9 	bl	80025d0 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d302      	bcc.n	8004c10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d139      	bne.n	8004c84 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	0c1b      	lsrs	r3, r3, #16
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d10d      	bne.n	8004c36 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	43da      	mvns	r2, r3
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	4013      	ands	r3, r2
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	bf0c      	ite	eq
 8004c2c:	2301      	moveq	r3, #1
 8004c2e:	2300      	movne	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	461a      	mov	r2, r3
 8004c34:	e00c      	b.n	8004c50 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	43da      	mvns	r2, r3
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	4013      	ands	r3, r2
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	bf0c      	ite	eq
 8004c48:	2301      	moveq	r3, #1
 8004c4a:	2300      	movne	r3, #0
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	461a      	mov	r2, r3
 8004c50:	79fb      	ldrb	r3, [r7, #7]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d116      	bne.n	8004c84 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c70:	f043 0220 	orr.w	r2, r3, #32
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e023      	b.n	8004ccc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	0c1b      	lsrs	r3, r3, #16
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d10d      	bne.n	8004caa <I2C_WaitOnFlagUntilTimeout+0xca>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	43da      	mvns	r2, r3
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	4013      	ands	r3, r2
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	bf0c      	ite	eq
 8004ca0:	2301      	moveq	r3, #1
 8004ca2:	2300      	movne	r3, #0
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	e00c      	b.n	8004cc4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	43da      	mvns	r2, r3
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	bf0c      	ite	eq
 8004cbc:	2301      	moveq	r3, #1
 8004cbe:	2300      	movne	r3, #0
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	79fb      	ldrb	r3, [r7, #7]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d093      	beq.n	8004bf2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
 8004ce0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ce2:	e071      	b.n	8004dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cf2:	d123      	bne.n	8004d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d02:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2220      	movs	r2, #32
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d28:	f043 0204 	orr.w	r2, r3, #4
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e067      	b.n	8004e0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d42:	d041      	beq.n	8004dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d44:	f7fd fc44 	bl	80025d0 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d302      	bcc.n	8004d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d136      	bne.n	8004dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	0c1b      	lsrs	r3, r3, #16
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d10c      	bne.n	8004d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	43da      	mvns	r2, r3
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	bf14      	ite	ne
 8004d76:	2301      	movne	r3, #1
 8004d78:	2300      	moveq	r3, #0
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	e00b      	b.n	8004d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	43da      	mvns	r2, r3
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	bf14      	ite	ne
 8004d90:	2301      	movne	r3, #1
 8004d92:	2300      	moveq	r3, #0
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d016      	beq.n	8004dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2220      	movs	r2, #32
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db4:	f043 0220 	orr.w	r2, r3, #32
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e021      	b.n	8004e0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	0c1b      	lsrs	r3, r3, #16
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d10c      	bne.n	8004dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	43da      	mvns	r2, r3
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	4013      	ands	r3, r2
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	bf14      	ite	ne
 8004de4:	2301      	movne	r3, #1
 8004de6:	2300      	moveq	r3, #0
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	e00b      	b.n	8004e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	43da      	mvns	r2, r3
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	4013      	ands	r3, r2
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	bf14      	ite	ne
 8004dfe:	2301      	movne	r3, #1
 8004e00:	2300      	moveq	r3, #0
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f47f af6d 	bne.w	8004ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e20:	e034      	b.n	8004e8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 f8b8 	bl	8004f98 <I2C_IsAcknowledgeFailed>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e034      	b.n	8004e9c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e38:	d028      	beq.n	8004e8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e3a:	f7fd fbc9 	bl	80025d0 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d302      	bcc.n	8004e50 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d11d      	bne.n	8004e8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e5a:	2b80      	cmp	r3, #128	@ 0x80
 8004e5c:	d016      	beq.n	8004e8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2220      	movs	r2, #32
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e78:	f043 0220 	orr.w	r2, r3, #32
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e007      	b.n	8004e9c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e96:	2b80      	cmp	r3, #128	@ 0x80
 8004e98:	d1c3      	bne.n	8004e22 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004eb0:	e034      	b.n	8004f1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f000 f870 	bl	8004f98 <I2C_IsAcknowledgeFailed>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e034      	b.n	8004f2c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec8:	d028      	beq.n	8004f1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eca:	f7fd fb81 	bl	80025d0 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d302      	bcc.n	8004ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d11d      	bne.n	8004f1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	f003 0304 	and.w	r3, r3, #4
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	d016      	beq.n	8004f1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f08:	f043 0220 	orr.w	r2, r3, #32
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e007      	b.n	8004f2c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	f003 0304 	and.w	r3, r3, #4
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d1c3      	bne.n	8004eb2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f40:	4b13      	ldr	r3, [pc, #76]	@ (8004f90 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	08db      	lsrs	r3, r3, #3
 8004f46:	4a13      	ldr	r2, [pc, #76]	@ (8004f94 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004f48:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4c:	0a1a      	lsrs	r2, r3, #8
 8004f4e:	4613      	mov	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4413      	add	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d107      	bne.n	8004f72 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f66:	f043 0220 	orr.w	r2, r3, #32
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e008      	b.n	8004f84 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f80:	d0e9      	beq.n	8004f56 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	2000c354 	.word	0x2000c354
 8004f94:	14f8b589 	.word	0x14f8b589

08004f98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fae:	d11b      	bne.n	8004fe8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004fb8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd4:	f043 0204 	orr.w	r2, r3, #4
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e000      	b.n	8004fea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005002:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005006:	d103      	bne.n	8005010 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800500e:	e007      	b.n	8005020 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005014:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005018:	d102      	bne.n	8005020 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2208      	movs	r2, #8
 800501e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e0cc      	b.n	80051da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005040:	4b68      	ldr	r3, [pc, #416]	@ (80051e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 030f 	and.w	r3, r3, #15
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	429a      	cmp	r2, r3
 800504c:	d90c      	bls.n	8005068 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800504e:	4b65      	ldr	r3, [pc, #404]	@ (80051e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005050:	683a      	ldr	r2, [r7, #0]
 8005052:	b2d2      	uxtb	r2, r2
 8005054:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005056:	4b63      	ldr	r3, [pc, #396]	@ (80051e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 030f 	and.w	r3, r3, #15
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	429a      	cmp	r2, r3
 8005062:	d001      	beq.n	8005068 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e0b8      	b.n	80051da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d020      	beq.n	80050b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0304 	and.w	r3, r3, #4
 800507c:	2b00      	cmp	r3, #0
 800507e:	d005      	beq.n	800508c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005080:	4b59      	ldr	r3, [pc, #356]	@ (80051e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	4a58      	ldr	r2, [pc, #352]	@ (80051e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005086:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800508a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0308 	and.w	r3, r3, #8
 8005094:	2b00      	cmp	r3, #0
 8005096:	d005      	beq.n	80050a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005098:	4b53      	ldr	r3, [pc, #332]	@ (80051e8 <HAL_RCC_ClockConfig+0x1bc>)
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	4a52      	ldr	r2, [pc, #328]	@ (80051e8 <HAL_RCC_ClockConfig+0x1bc>)
 800509e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80050a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050a4:	4b50      	ldr	r3, [pc, #320]	@ (80051e8 <HAL_RCC_ClockConfig+0x1bc>)
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	494d      	ldr	r1, [pc, #308]	@ (80051e8 <HAL_RCC_ClockConfig+0x1bc>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d044      	beq.n	800514c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d107      	bne.n	80050da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ca:	4b47      	ldr	r3, [pc, #284]	@ (80051e8 <HAL_RCC_ClockConfig+0x1bc>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d119      	bne.n	800510a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e07f      	b.n	80051da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d003      	beq.n	80050ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050e6:	2b03      	cmp	r3, #3
 80050e8:	d107      	bne.n	80050fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ea:	4b3f      	ldr	r3, [pc, #252]	@ (80051e8 <HAL_RCC_ClockConfig+0x1bc>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d109      	bne.n	800510a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e06f      	b.n	80051da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050fa:	4b3b      	ldr	r3, [pc, #236]	@ (80051e8 <HAL_RCC_ClockConfig+0x1bc>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e067      	b.n	80051da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800510a:	4b37      	ldr	r3, [pc, #220]	@ (80051e8 <HAL_RCC_ClockConfig+0x1bc>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f023 0203 	bic.w	r2, r3, #3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	4934      	ldr	r1, [pc, #208]	@ (80051e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005118:	4313      	orrs	r3, r2
 800511a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800511c:	f7fd fa58 	bl	80025d0 <HAL_GetTick>
 8005120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005122:	e00a      	b.n	800513a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005124:	f7fd fa54 	bl	80025d0 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005132:	4293      	cmp	r3, r2
 8005134:	d901      	bls.n	800513a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e04f      	b.n	80051da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800513a:	4b2b      	ldr	r3, [pc, #172]	@ (80051e8 <HAL_RCC_ClockConfig+0x1bc>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 020c 	and.w	r2, r3, #12
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	429a      	cmp	r2, r3
 800514a:	d1eb      	bne.n	8005124 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800514c:	4b25      	ldr	r3, [pc, #148]	@ (80051e4 <HAL_RCC_ClockConfig+0x1b8>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 030f 	and.w	r3, r3, #15
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	429a      	cmp	r2, r3
 8005158:	d20c      	bcs.n	8005174 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800515a:	4b22      	ldr	r3, [pc, #136]	@ (80051e4 <HAL_RCC_ClockConfig+0x1b8>)
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	b2d2      	uxtb	r2, r2
 8005160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005162:	4b20      	ldr	r3, [pc, #128]	@ (80051e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	429a      	cmp	r2, r3
 800516e:	d001      	beq.n	8005174 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e032      	b.n	80051da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b00      	cmp	r3, #0
 800517e:	d008      	beq.n	8005192 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005180:	4b19      	ldr	r3, [pc, #100]	@ (80051e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	4916      	ldr	r1, [pc, #88]	@ (80051e8 <HAL_RCC_ClockConfig+0x1bc>)
 800518e:	4313      	orrs	r3, r2
 8005190:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0308 	and.w	r3, r3, #8
 800519a:	2b00      	cmp	r3, #0
 800519c:	d009      	beq.n	80051b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800519e:	4b12      	ldr	r3, [pc, #72]	@ (80051e8 <HAL_RCC_ClockConfig+0x1bc>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	00db      	lsls	r3, r3, #3
 80051ac:	490e      	ldr	r1, [pc, #56]	@ (80051e8 <HAL_RCC_ClockConfig+0x1bc>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051b2:	f000 f855 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 80051b6:	4602      	mov	r2, r0
 80051b8:	4b0b      	ldr	r3, [pc, #44]	@ (80051e8 <HAL_RCC_ClockConfig+0x1bc>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	091b      	lsrs	r3, r3, #4
 80051be:	f003 030f 	and.w	r3, r3, #15
 80051c2:	490a      	ldr	r1, [pc, #40]	@ (80051ec <HAL_RCC_ClockConfig+0x1c0>)
 80051c4:	5ccb      	ldrb	r3, [r1, r3]
 80051c6:	fa22 f303 	lsr.w	r3, r2, r3
 80051ca:	4a09      	ldr	r2, [pc, #36]	@ (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 80051cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80051ce:	4b09      	ldr	r3, [pc, #36]	@ (80051f4 <HAL_RCC_ClockConfig+0x1c8>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fd f9b8 	bl	8002548 <HAL_InitTick>

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	40023c00 	.word	0x40023c00
 80051e8:	40023800 	.word	0x40023800
 80051ec:	08006d80 	.word	0x08006d80
 80051f0:	2000c354 	.word	0x2000c354
 80051f4:	2000c358 	.word	0x2000c358

080051f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051f8:	b480      	push	{r7}
 80051fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051fc:	4b03      	ldr	r3, [pc, #12]	@ (800520c <HAL_RCC_GetHCLKFreq+0x14>)
 80051fe:	681b      	ldr	r3, [r3, #0]
}
 8005200:	4618      	mov	r0, r3
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	2000c354 	.word	0x2000c354

08005210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005214:	f7ff fff0 	bl	80051f8 <HAL_RCC_GetHCLKFreq>
 8005218:	4602      	mov	r2, r0
 800521a:	4b05      	ldr	r3, [pc, #20]	@ (8005230 <HAL_RCC_GetPCLK1Freq+0x20>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	0a9b      	lsrs	r3, r3, #10
 8005220:	f003 0307 	and.w	r3, r3, #7
 8005224:	4903      	ldr	r1, [pc, #12]	@ (8005234 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005226:	5ccb      	ldrb	r3, [r1, r3]
 8005228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800522c:	4618      	mov	r0, r3
 800522e:	bd80      	pop	{r7, pc}
 8005230:	40023800 	.word	0x40023800
 8005234:	08006d90 	.word	0x08006d90

08005238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800523c:	f7ff ffdc 	bl	80051f8 <HAL_RCC_GetHCLKFreq>
 8005240:	4602      	mov	r2, r0
 8005242:	4b05      	ldr	r3, [pc, #20]	@ (8005258 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	0b5b      	lsrs	r3, r3, #13
 8005248:	f003 0307 	and.w	r3, r3, #7
 800524c:	4903      	ldr	r1, [pc, #12]	@ (800525c <HAL_RCC_GetPCLK2Freq+0x24>)
 800524e:	5ccb      	ldrb	r3, [r1, r3]
 8005250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005254:	4618      	mov	r0, r3
 8005256:	bd80      	pop	{r7, pc}
 8005258:	40023800 	.word	0x40023800
 800525c:	08006d90 	.word	0x08006d90

08005260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005264:	b0a6      	sub	sp, #152	@ 0x98
 8005266:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005268:	2300      	movs	r3, #0
 800526a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800526e:	2300      	movs	r3, #0
 8005270:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8005274:	2300      	movs	r3, #0
 8005276:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800527a:	2300      	movs	r3, #0
 800527c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8005280:	2300      	movs	r3, #0
 8005282:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005286:	4bc8      	ldr	r3, [pc, #800]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0x348>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 030c 	and.w	r3, r3, #12
 800528e:	2b0c      	cmp	r3, #12
 8005290:	f200 817e 	bhi.w	8005590 <HAL_RCC_GetSysClockFreq+0x330>
 8005294:	a201      	add	r2, pc, #4	@ (adr r2, 800529c <HAL_RCC_GetSysClockFreq+0x3c>)
 8005296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529a:	bf00      	nop
 800529c:	080052d1 	.word	0x080052d1
 80052a0:	08005591 	.word	0x08005591
 80052a4:	08005591 	.word	0x08005591
 80052a8:	08005591 	.word	0x08005591
 80052ac:	080052d9 	.word	0x080052d9
 80052b0:	08005591 	.word	0x08005591
 80052b4:	08005591 	.word	0x08005591
 80052b8:	08005591 	.word	0x08005591
 80052bc:	080052e1 	.word	0x080052e1
 80052c0:	08005591 	.word	0x08005591
 80052c4:	08005591 	.word	0x08005591
 80052c8:	08005591 	.word	0x08005591
 80052cc:	0800544b 	.word	0x0800544b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052d0:	4bb6      	ldr	r3, [pc, #728]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x34c>)
 80052d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 80052d6:	e15f      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052d8:	4bb5      	ldr	r3, [pc, #724]	@ (80055b0 <HAL_RCC_GetSysClockFreq+0x350>)
 80052da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80052de:	e15b      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052e0:	4bb1      	ldr	r3, [pc, #708]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0x348>)
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052ec:	4bae      	ldr	r3, [pc, #696]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0x348>)
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d031      	beq.n	800535c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052f8:	4bab      	ldr	r3, [pc, #684]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0x348>)
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	099b      	lsrs	r3, r3, #6
 80052fe:	2200      	movs	r2, #0
 8005300:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005302:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005304:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800530a:	663b      	str	r3, [r7, #96]	@ 0x60
 800530c:	2300      	movs	r3, #0
 800530e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005310:	4ba7      	ldr	r3, [pc, #668]	@ (80055b0 <HAL_RCC_GetSysClockFreq+0x350>)
 8005312:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005316:	462a      	mov	r2, r5
 8005318:	fb03 f202 	mul.w	r2, r3, r2
 800531c:	2300      	movs	r3, #0
 800531e:	4621      	mov	r1, r4
 8005320:	fb01 f303 	mul.w	r3, r1, r3
 8005324:	4413      	add	r3, r2
 8005326:	4aa2      	ldr	r2, [pc, #648]	@ (80055b0 <HAL_RCC_GetSysClockFreq+0x350>)
 8005328:	4621      	mov	r1, r4
 800532a:	fba1 1202 	umull	r1, r2, r1, r2
 800532e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005330:	460a      	mov	r2, r1
 8005332:	67ba      	str	r2, [r7, #120]	@ 0x78
 8005334:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005336:	4413      	add	r3, r2
 8005338:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800533a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800533e:	2200      	movs	r2, #0
 8005340:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005342:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005344:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005348:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800534c:	f7fa ff62 	bl	8000214 <__aeabi_uldivmod>
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	4613      	mov	r3, r2
 8005356:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800535a:	e064      	b.n	8005426 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800535c:	4b92      	ldr	r3, [pc, #584]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0x348>)
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	099b      	lsrs	r3, r3, #6
 8005362:	2200      	movs	r2, #0
 8005364:	653b      	str	r3, [r7, #80]	@ 0x50
 8005366:	657a      	str	r2, [r7, #84]	@ 0x54
 8005368:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800536a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800536e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005370:	2300      	movs	r3, #0
 8005372:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005374:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8005378:	4622      	mov	r2, r4
 800537a:	462b      	mov	r3, r5
 800537c:	f04f 0000 	mov.w	r0, #0
 8005380:	f04f 0100 	mov.w	r1, #0
 8005384:	0159      	lsls	r1, r3, #5
 8005386:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800538a:	0150      	lsls	r0, r2, #5
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4621      	mov	r1, r4
 8005392:	1a51      	subs	r1, r2, r1
 8005394:	6139      	str	r1, [r7, #16]
 8005396:	4629      	mov	r1, r5
 8005398:	eb63 0301 	sbc.w	r3, r3, r1
 800539c:	617b      	str	r3, [r7, #20]
 800539e:	f04f 0200 	mov.w	r2, #0
 80053a2:	f04f 0300 	mov.w	r3, #0
 80053a6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053aa:	4659      	mov	r1, fp
 80053ac:	018b      	lsls	r3, r1, #6
 80053ae:	4651      	mov	r1, sl
 80053b0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053b4:	4651      	mov	r1, sl
 80053b6:	018a      	lsls	r2, r1, #6
 80053b8:	4651      	mov	r1, sl
 80053ba:	ebb2 0801 	subs.w	r8, r2, r1
 80053be:	4659      	mov	r1, fp
 80053c0:	eb63 0901 	sbc.w	r9, r3, r1
 80053c4:	f04f 0200 	mov.w	r2, #0
 80053c8:	f04f 0300 	mov.w	r3, #0
 80053cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053d8:	4690      	mov	r8, r2
 80053da:	4699      	mov	r9, r3
 80053dc:	4623      	mov	r3, r4
 80053de:	eb18 0303 	adds.w	r3, r8, r3
 80053e2:	60bb      	str	r3, [r7, #8]
 80053e4:	462b      	mov	r3, r5
 80053e6:	eb49 0303 	adc.w	r3, r9, r3
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	f04f 0200 	mov.w	r2, #0
 80053f0:	f04f 0300 	mov.w	r3, #0
 80053f4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80053f8:	4629      	mov	r1, r5
 80053fa:	028b      	lsls	r3, r1, #10
 80053fc:	4621      	mov	r1, r4
 80053fe:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005402:	4621      	mov	r1, r4
 8005404:	028a      	lsls	r2, r1, #10
 8005406:	4610      	mov	r0, r2
 8005408:	4619      	mov	r1, r3
 800540a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800540e:	2200      	movs	r2, #0
 8005410:	643b      	str	r3, [r7, #64]	@ 0x40
 8005412:	647a      	str	r2, [r7, #68]	@ 0x44
 8005414:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005418:	f7fa fefc 	bl	8000214 <__aeabi_uldivmod>
 800541c:	4602      	mov	r2, r0
 800541e:	460b      	mov	r3, r1
 8005420:	4613      	mov	r3, r2
 8005422:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005426:	4b60      	ldr	r3, [pc, #384]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0x348>)
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	0c1b      	lsrs	r3, r3, #16
 800542c:	f003 0303 	and.w	r3, r3, #3
 8005430:	3301      	adds	r3, #1
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8005438:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800543c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005440:	fbb2 f3f3 	udiv	r3, r2, r3
 8005444:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005448:	e0a6      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800544a:	4b57      	ldr	r3, [pc, #348]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0x348>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005452:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005456:	4b54      	ldr	r3, [pc, #336]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0x348>)
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d02a      	beq.n	80054b8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005462:	4b51      	ldr	r3, [pc, #324]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0x348>)
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	099b      	lsrs	r3, r3, #6
 8005468:	2200      	movs	r2, #0
 800546a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800546c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800546e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005470:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005474:	2100      	movs	r1, #0
 8005476:	4b4e      	ldr	r3, [pc, #312]	@ (80055b0 <HAL_RCC_GetSysClockFreq+0x350>)
 8005478:	fb03 f201 	mul.w	r2, r3, r1
 800547c:	2300      	movs	r3, #0
 800547e:	fb00 f303 	mul.w	r3, r0, r3
 8005482:	4413      	add	r3, r2
 8005484:	4a4a      	ldr	r2, [pc, #296]	@ (80055b0 <HAL_RCC_GetSysClockFreq+0x350>)
 8005486:	fba0 1202 	umull	r1, r2, r0, r2
 800548a:	677a      	str	r2, [r7, #116]	@ 0x74
 800548c:	460a      	mov	r2, r1
 800548e:	673a      	str	r2, [r7, #112]	@ 0x70
 8005490:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005492:	4413      	add	r3, r2
 8005494:	677b      	str	r3, [r7, #116]	@ 0x74
 8005496:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800549a:	2200      	movs	r2, #0
 800549c:	633b      	str	r3, [r7, #48]	@ 0x30
 800549e:	637a      	str	r2, [r7, #52]	@ 0x34
 80054a0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80054a4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80054a8:	f7fa feb4 	bl	8000214 <__aeabi_uldivmod>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	4613      	mov	r3, r2
 80054b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80054b6:	e05b      	b.n	8005570 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054b8:	4b3b      	ldr	r3, [pc, #236]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0x348>)
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	099b      	lsrs	r3, r3, #6
 80054be:	2200      	movs	r2, #0
 80054c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ca:	623b      	str	r3, [r7, #32]
 80054cc:	2300      	movs	r3, #0
 80054ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80054d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80054d4:	4642      	mov	r2, r8
 80054d6:	464b      	mov	r3, r9
 80054d8:	f04f 0000 	mov.w	r0, #0
 80054dc:	f04f 0100 	mov.w	r1, #0
 80054e0:	0159      	lsls	r1, r3, #5
 80054e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054e6:	0150      	lsls	r0, r2, #5
 80054e8:	4602      	mov	r2, r0
 80054ea:	460b      	mov	r3, r1
 80054ec:	4641      	mov	r1, r8
 80054ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80054f2:	4649      	mov	r1, r9
 80054f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80054f8:	f04f 0200 	mov.w	r2, #0
 80054fc:	f04f 0300 	mov.w	r3, #0
 8005500:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005504:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005508:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800550c:	ebb2 040a 	subs.w	r4, r2, sl
 8005510:	eb63 050b 	sbc.w	r5, r3, fp
 8005514:	f04f 0200 	mov.w	r2, #0
 8005518:	f04f 0300 	mov.w	r3, #0
 800551c:	00eb      	lsls	r3, r5, #3
 800551e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005522:	00e2      	lsls	r2, r4, #3
 8005524:	4614      	mov	r4, r2
 8005526:	461d      	mov	r5, r3
 8005528:	4643      	mov	r3, r8
 800552a:	18e3      	adds	r3, r4, r3
 800552c:	603b      	str	r3, [r7, #0]
 800552e:	464b      	mov	r3, r9
 8005530:	eb45 0303 	adc.w	r3, r5, r3
 8005534:	607b      	str	r3, [r7, #4]
 8005536:	f04f 0200 	mov.w	r2, #0
 800553a:	f04f 0300 	mov.w	r3, #0
 800553e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005542:	4629      	mov	r1, r5
 8005544:	028b      	lsls	r3, r1, #10
 8005546:	4621      	mov	r1, r4
 8005548:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800554c:	4621      	mov	r1, r4
 800554e:	028a      	lsls	r2, r1, #10
 8005550:	4610      	mov	r0, r2
 8005552:	4619      	mov	r1, r3
 8005554:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005558:	2200      	movs	r2, #0
 800555a:	61bb      	str	r3, [r7, #24]
 800555c:	61fa      	str	r2, [r7, #28]
 800555e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005562:	f7fa fe57 	bl	8000214 <__aeabi_uldivmod>
 8005566:	4602      	mov	r2, r0
 8005568:	460b      	mov	r3, r1
 800556a:	4613      	mov	r3, r2
 800556c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005570:	4b0d      	ldr	r3, [pc, #52]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0x348>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	0f1b      	lsrs	r3, r3, #28
 8005576:	f003 0307 	and.w	r3, r3, #7
 800557a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 800557e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005582:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005586:	fbb2 f3f3 	udiv	r3, r2, r3
 800558a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800558e:	e003      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005590:	4b06      	ldr	r3, [pc, #24]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x34c>)
 8005592:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005596:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005598:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 800559c:	4618      	mov	r0, r3
 800559e:	3798      	adds	r7, #152	@ 0x98
 80055a0:	46bd      	mov	sp, r7
 80055a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055a6:	bf00      	nop
 80055a8:	40023800 	.word	0x40023800
 80055ac:	00f42400 	.word	0x00f42400
 80055b0:	017d7840 	.word	0x017d7840

080055b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e28d      	b.n	8005ae2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f000 8083 	beq.w	80056da <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80055d4:	4b94      	ldr	r3, [pc, #592]	@ (8005828 <HAL_RCC_OscConfig+0x274>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f003 030c 	and.w	r3, r3, #12
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d019      	beq.n	8005614 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80055e0:	4b91      	ldr	r3, [pc, #580]	@ (8005828 <HAL_RCC_OscConfig+0x274>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80055e8:	2b08      	cmp	r3, #8
 80055ea:	d106      	bne.n	80055fa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80055ec:	4b8e      	ldr	r3, [pc, #568]	@ (8005828 <HAL_RCC_OscConfig+0x274>)
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055f8:	d00c      	beq.n	8005614 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055fa:	4b8b      	ldr	r3, [pc, #556]	@ (8005828 <HAL_RCC_OscConfig+0x274>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005602:	2b0c      	cmp	r3, #12
 8005604:	d112      	bne.n	800562c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005606:	4b88      	ldr	r3, [pc, #544]	@ (8005828 <HAL_RCC_OscConfig+0x274>)
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800560e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005612:	d10b      	bne.n	800562c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005614:	4b84      	ldr	r3, [pc, #528]	@ (8005828 <HAL_RCC_OscConfig+0x274>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d05b      	beq.n	80056d8 <HAL_RCC_OscConfig+0x124>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d157      	bne.n	80056d8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e25a      	b.n	8005ae2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005634:	d106      	bne.n	8005644 <HAL_RCC_OscConfig+0x90>
 8005636:	4b7c      	ldr	r3, [pc, #496]	@ (8005828 <HAL_RCC_OscConfig+0x274>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a7b      	ldr	r2, [pc, #492]	@ (8005828 <HAL_RCC_OscConfig+0x274>)
 800563c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005640:	6013      	str	r3, [r2, #0]
 8005642:	e01d      	b.n	8005680 <HAL_RCC_OscConfig+0xcc>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800564c:	d10c      	bne.n	8005668 <HAL_RCC_OscConfig+0xb4>
 800564e:	4b76      	ldr	r3, [pc, #472]	@ (8005828 <HAL_RCC_OscConfig+0x274>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a75      	ldr	r2, [pc, #468]	@ (8005828 <HAL_RCC_OscConfig+0x274>)
 8005654:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005658:	6013      	str	r3, [r2, #0]
 800565a:	4b73      	ldr	r3, [pc, #460]	@ (8005828 <HAL_RCC_OscConfig+0x274>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a72      	ldr	r2, [pc, #456]	@ (8005828 <HAL_RCC_OscConfig+0x274>)
 8005660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005664:	6013      	str	r3, [r2, #0]
 8005666:	e00b      	b.n	8005680 <HAL_RCC_OscConfig+0xcc>
 8005668:	4b6f      	ldr	r3, [pc, #444]	@ (8005828 <HAL_RCC_OscConfig+0x274>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a6e      	ldr	r2, [pc, #440]	@ (8005828 <HAL_RCC_OscConfig+0x274>)
 800566e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005672:	6013      	str	r3, [r2, #0]
 8005674:	4b6c      	ldr	r3, [pc, #432]	@ (8005828 <HAL_RCC_OscConfig+0x274>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a6b      	ldr	r2, [pc, #428]	@ (8005828 <HAL_RCC_OscConfig+0x274>)
 800567a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800567e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d013      	beq.n	80056b0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005688:	f7fc ffa2 	bl	80025d0 <HAL_GetTick>
 800568c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800568e:	e008      	b.n	80056a2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005690:	f7fc ff9e 	bl	80025d0 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	2b64      	cmp	r3, #100	@ 0x64
 800569c:	d901      	bls.n	80056a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e21f      	b.n	8005ae2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056a2:	4b61      	ldr	r3, [pc, #388]	@ (8005828 <HAL_RCC_OscConfig+0x274>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d0f0      	beq.n	8005690 <HAL_RCC_OscConfig+0xdc>
 80056ae:	e014      	b.n	80056da <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b0:	f7fc ff8e 	bl	80025d0 <HAL_GetTick>
 80056b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056b6:	e008      	b.n	80056ca <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056b8:	f7fc ff8a 	bl	80025d0 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b64      	cmp	r3, #100	@ 0x64
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e20b      	b.n	8005ae2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ca:	4b57      	ldr	r3, [pc, #348]	@ (8005828 <HAL_RCC_OscConfig+0x274>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1f0      	bne.n	80056b8 <HAL_RCC_OscConfig+0x104>
 80056d6:	e000      	b.n	80056da <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d06f      	beq.n	80057c6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80056e6:	4b50      	ldr	r3, [pc, #320]	@ (8005828 <HAL_RCC_OscConfig+0x274>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f003 030c 	and.w	r3, r3, #12
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d017      	beq.n	8005722 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80056f2:	4b4d      	ldr	r3, [pc, #308]	@ (8005828 <HAL_RCC_OscConfig+0x274>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80056fa:	2b08      	cmp	r3, #8
 80056fc:	d105      	bne.n	800570a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80056fe:	4b4a      	ldr	r3, [pc, #296]	@ (8005828 <HAL_RCC_OscConfig+0x274>)
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00b      	beq.n	8005722 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800570a:	4b47      	ldr	r3, [pc, #284]	@ (8005828 <HAL_RCC_OscConfig+0x274>)
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005712:	2b0c      	cmp	r3, #12
 8005714:	d11c      	bne.n	8005750 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005716:	4b44      	ldr	r3, [pc, #272]	@ (8005828 <HAL_RCC_OscConfig+0x274>)
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d116      	bne.n	8005750 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005722:	4b41      	ldr	r3, [pc, #260]	@ (8005828 <HAL_RCC_OscConfig+0x274>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0302 	and.w	r3, r3, #2
 800572a:	2b00      	cmp	r3, #0
 800572c:	d005      	beq.n	800573a <HAL_RCC_OscConfig+0x186>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d001      	beq.n	800573a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e1d3      	b.n	8005ae2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800573a:	4b3b      	ldr	r3, [pc, #236]	@ (8005828 <HAL_RCC_OscConfig+0x274>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	4937      	ldr	r1, [pc, #220]	@ (8005828 <HAL_RCC_OscConfig+0x274>)
 800574a:	4313      	orrs	r3, r2
 800574c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800574e:	e03a      	b.n	80057c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d020      	beq.n	800579a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005758:	4b34      	ldr	r3, [pc, #208]	@ (800582c <HAL_RCC_OscConfig+0x278>)
 800575a:	2201      	movs	r2, #1
 800575c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800575e:	f7fc ff37 	bl	80025d0 <HAL_GetTick>
 8005762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005764:	e008      	b.n	8005778 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005766:	f7fc ff33 	bl	80025d0 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d901      	bls.n	8005778 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e1b4      	b.n	8005ae2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005778:	4b2b      	ldr	r3, [pc, #172]	@ (8005828 <HAL_RCC_OscConfig+0x274>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0302 	and.w	r3, r3, #2
 8005780:	2b00      	cmp	r3, #0
 8005782:	d0f0      	beq.n	8005766 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005784:	4b28      	ldr	r3, [pc, #160]	@ (8005828 <HAL_RCC_OscConfig+0x274>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	00db      	lsls	r3, r3, #3
 8005792:	4925      	ldr	r1, [pc, #148]	@ (8005828 <HAL_RCC_OscConfig+0x274>)
 8005794:	4313      	orrs	r3, r2
 8005796:	600b      	str	r3, [r1, #0]
 8005798:	e015      	b.n	80057c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800579a:	4b24      	ldr	r3, [pc, #144]	@ (800582c <HAL_RCC_OscConfig+0x278>)
 800579c:	2200      	movs	r2, #0
 800579e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a0:	f7fc ff16 	bl	80025d0 <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057a8:	f7fc ff12 	bl	80025d0 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e193      	b.n	8005ae2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057ba:	4b1b      	ldr	r3, [pc, #108]	@ (8005828 <HAL_RCC_OscConfig+0x274>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1f0      	bne.n	80057a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0308 	and.w	r3, r3, #8
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d036      	beq.n	8005840 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d016      	beq.n	8005808 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057da:	4b15      	ldr	r3, [pc, #84]	@ (8005830 <HAL_RCC_OscConfig+0x27c>)
 80057dc:	2201      	movs	r2, #1
 80057de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e0:	f7fc fef6 	bl	80025d0 <HAL_GetTick>
 80057e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057e6:	e008      	b.n	80057fa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057e8:	f7fc fef2 	bl	80025d0 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e173      	b.n	8005ae2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005828 <HAL_RCC_OscConfig+0x274>)
 80057fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d0f0      	beq.n	80057e8 <HAL_RCC_OscConfig+0x234>
 8005806:	e01b      	b.n	8005840 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005808:	4b09      	ldr	r3, [pc, #36]	@ (8005830 <HAL_RCC_OscConfig+0x27c>)
 800580a:	2200      	movs	r2, #0
 800580c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800580e:	f7fc fedf 	bl	80025d0 <HAL_GetTick>
 8005812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005814:	e00e      	b.n	8005834 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005816:	f7fc fedb 	bl	80025d0 <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	2b02      	cmp	r3, #2
 8005822:	d907      	bls.n	8005834 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e15c      	b.n	8005ae2 <HAL_RCC_OscConfig+0x52e>
 8005828:	40023800 	.word	0x40023800
 800582c:	42470000 	.word	0x42470000
 8005830:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005834:	4b8a      	ldr	r3, [pc, #552]	@ (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 8005836:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005838:	f003 0302 	and.w	r3, r3, #2
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1ea      	bne.n	8005816 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0304 	and.w	r3, r3, #4
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 8097 	beq.w	800597c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800584e:	2300      	movs	r3, #0
 8005850:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005852:	4b83      	ldr	r3, [pc, #524]	@ (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 8005854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10f      	bne.n	800587e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800585e:	2300      	movs	r3, #0
 8005860:	60bb      	str	r3, [r7, #8]
 8005862:	4b7f      	ldr	r3, [pc, #508]	@ (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 8005864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005866:	4a7e      	ldr	r2, [pc, #504]	@ (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 8005868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800586c:	6413      	str	r3, [r2, #64]	@ 0x40
 800586e:	4b7c      	ldr	r3, [pc, #496]	@ (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 8005870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005872:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005876:	60bb      	str	r3, [r7, #8]
 8005878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800587a:	2301      	movs	r3, #1
 800587c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800587e:	4b79      	ldr	r3, [pc, #484]	@ (8005a64 <HAL_RCC_OscConfig+0x4b0>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005886:	2b00      	cmp	r3, #0
 8005888:	d118      	bne.n	80058bc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800588a:	4b76      	ldr	r3, [pc, #472]	@ (8005a64 <HAL_RCC_OscConfig+0x4b0>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a75      	ldr	r2, [pc, #468]	@ (8005a64 <HAL_RCC_OscConfig+0x4b0>)
 8005890:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005894:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005896:	f7fc fe9b 	bl	80025d0 <HAL_GetTick>
 800589a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800589c:	e008      	b.n	80058b0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800589e:	f7fc fe97 	bl	80025d0 <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d901      	bls.n	80058b0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e118      	b.n	8005ae2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058b0:	4b6c      	ldr	r3, [pc, #432]	@ (8005a64 <HAL_RCC_OscConfig+0x4b0>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d0f0      	beq.n	800589e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d106      	bne.n	80058d2 <HAL_RCC_OscConfig+0x31e>
 80058c4:	4b66      	ldr	r3, [pc, #408]	@ (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 80058c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058c8:	4a65      	ldr	r2, [pc, #404]	@ (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 80058ca:	f043 0301 	orr.w	r3, r3, #1
 80058ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80058d0:	e01c      	b.n	800590c <HAL_RCC_OscConfig+0x358>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	2b05      	cmp	r3, #5
 80058d8:	d10c      	bne.n	80058f4 <HAL_RCC_OscConfig+0x340>
 80058da:	4b61      	ldr	r3, [pc, #388]	@ (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 80058dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058de:	4a60      	ldr	r2, [pc, #384]	@ (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 80058e0:	f043 0304 	orr.w	r3, r3, #4
 80058e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80058e6:	4b5e      	ldr	r3, [pc, #376]	@ (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 80058e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ea:	4a5d      	ldr	r2, [pc, #372]	@ (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 80058ec:	f043 0301 	orr.w	r3, r3, #1
 80058f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80058f2:	e00b      	b.n	800590c <HAL_RCC_OscConfig+0x358>
 80058f4:	4b5a      	ldr	r3, [pc, #360]	@ (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 80058f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058f8:	4a59      	ldr	r2, [pc, #356]	@ (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 80058fa:	f023 0301 	bic.w	r3, r3, #1
 80058fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005900:	4b57      	ldr	r3, [pc, #348]	@ (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 8005902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005904:	4a56      	ldr	r2, [pc, #344]	@ (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 8005906:	f023 0304 	bic.w	r3, r3, #4
 800590a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d015      	beq.n	8005940 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005914:	f7fc fe5c 	bl	80025d0 <HAL_GetTick>
 8005918:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800591a:	e00a      	b.n	8005932 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800591c:	f7fc fe58 	bl	80025d0 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	f241 3288 	movw	r2, #5000	@ 0x1388
 800592a:	4293      	cmp	r3, r2
 800592c:	d901      	bls.n	8005932 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e0d7      	b.n	8005ae2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005932:	4b4b      	ldr	r3, [pc, #300]	@ (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 8005934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d0ee      	beq.n	800591c <HAL_RCC_OscConfig+0x368>
 800593e:	e014      	b.n	800596a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005940:	f7fc fe46 	bl	80025d0 <HAL_GetTick>
 8005944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005946:	e00a      	b.n	800595e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005948:	f7fc fe42 	bl	80025d0 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005956:	4293      	cmp	r3, r2
 8005958:	d901      	bls.n	800595e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e0c1      	b.n	8005ae2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800595e:	4b40      	ldr	r3, [pc, #256]	@ (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 8005960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1ee      	bne.n	8005948 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800596a:	7dfb      	ldrb	r3, [r7, #23]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d105      	bne.n	800597c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005970:	4b3b      	ldr	r3, [pc, #236]	@ (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 8005972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005974:	4a3a      	ldr	r2, [pc, #232]	@ (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 8005976:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800597a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 80ad 	beq.w	8005ae0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005986:	4b36      	ldr	r3, [pc, #216]	@ (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f003 030c 	and.w	r3, r3, #12
 800598e:	2b08      	cmp	r3, #8
 8005990:	d060      	beq.n	8005a54 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	2b02      	cmp	r3, #2
 8005998:	d145      	bne.n	8005a26 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800599a:	4b33      	ldr	r3, [pc, #204]	@ (8005a68 <HAL_RCC_OscConfig+0x4b4>)
 800599c:	2200      	movs	r2, #0
 800599e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a0:	f7fc fe16 	bl	80025d0 <HAL_GetTick>
 80059a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059a6:	e008      	b.n	80059ba <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059a8:	f7fc fe12 	bl	80025d0 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e093      	b.n	8005ae2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059ba:	4b29      	ldr	r3, [pc, #164]	@ (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1f0      	bne.n	80059a8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	69da      	ldr	r2, [r3, #28]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	431a      	orrs	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d4:	019b      	lsls	r3, r3, #6
 80059d6:	431a      	orrs	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059dc:	085b      	lsrs	r3, r3, #1
 80059de:	3b01      	subs	r3, #1
 80059e0:	041b      	lsls	r3, r3, #16
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e8:	061b      	lsls	r3, r3, #24
 80059ea:	431a      	orrs	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f0:	071b      	lsls	r3, r3, #28
 80059f2:	491b      	ldr	r1, [pc, #108]	@ (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005a68 <HAL_RCC_OscConfig+0x4b4>)
 80059fa:	2201      	movs	r2, #1
 80059fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059fe:	f7fc fde7 	bl	80025d0 <HAL_GetTick>
 8005a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a04:	e008      	b.n	8005a18 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a06:	f7fc fde3 	bl	80025d0 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d901      	bls.n	8005a18 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e064      	b.n	8005ae2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a18:	4b11      	ldr	r3, [pc, #68]	@ (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d0f0      	beq.n	8005a06 <HAL_RCC_OscConfig+0x452>
 8005a24:	e05c      	b.n	8005ae0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a26:	4b10      	ldr	r3, [pc, #64]	@ (8005a68 <HAL_RCC_OscConfig+0x4b4>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a2c:	f7fc fdd0 	bl	80025d0 <HAL_GetTick>
 8005a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a32:	e008      	b.n	8005a46 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a34:	f7fc fdcc 	bl	80025d0 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d901      	bls.n	8005a46 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e04d      	b.n	8005ae2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a46:	4b06      	ldr	r3, [pc, #24]	@ (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1f0      	bne.n	8005a34 <HAL_RCC_OscConfig+0x480>
 8005a52:	e045      	b.n	8005ae0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d107      	bne.n	8005a6c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e040      	b.n	8005ae2 <HAL_RCC_OscConfig+0x52e>
 8005a60:	40023800 	.word	0x40023800
 8005a64:	40007000 	.word	0x40007000
 8005a68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a6c:	4b1f      	ldr	r3, [pc, #124]	@ (8005aec <HAL_RCC_OscConfig+0x538>)
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d030      	beq.n	8005adc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d129      	bne.n	8005adc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d122      	bne.n	8005adc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005aa2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d119      	bne.n	8005adc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab2:	085b      	lsrs	r3, r3, #1
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d10f      	bne.n	8005adc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d107      	bne.n	8005adc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d001      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e000      	b.n	8005ae2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	40023800 	.word	0x40023800

08005af0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e07b      	b.n	8005bfa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d108      	bne.n	8005b1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b12:	d009      	beq.n	8005b28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	61da      	str	r2, [r3, #28]
 8005b1a:	e005      	b.n	8005b28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d106      	bne.n	8005b48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7fc fb0c 	bl	8002160 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005b70:	431a      	orrs	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	431a      	orrs	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	69db      	ldr	r3, [r3, #28]
 8005b9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a1b      	ldr	r3, [r3, #32]
 8005ba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bac:	ea42 0103 	orr.w	r1, r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	0c1b      	lsrs	r3, r3, #16
 8005bc6:	f003 0104 	and.w	r1, r3, #4
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bce:	f003 0210 	and.w	r2, r3, #16
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	69da      	ldr	r2, [r3, #28]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005be8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b082      	sub	sp, #8
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d101      	bne.n	8005c14 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e042      	b.n	8005c9a <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d106      	bne.n	8005c2e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7fc fae1 	bl	80021f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2224      	movs	r2, #36	@ 0x24
 8005c32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68da      	ldr	r2, [r3, #12]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c44:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 fdbe 	bl	80067c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	691a      	ldr	r2, [r3, #16]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c5a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	695a      	ldr	r2, [r3, #20]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c6a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68da      	ldr	r2, [r3, #12]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c7a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2220      	movs	r2, #32
 8005c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2220      	movs	r2, #32
 8005c8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3708      	adds	r7, #8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b08a      	sub	sp, #40	@ 0x28
 8005ca6:	af02      	add	r7, sp, #8
 8005ca8:	60f8      	str	r0, [r7, #12]
 8005caa:	60b9      	str	r1, [r7, #8]
 8005cac:	603b      	str	r3, [r7, #0]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b20      	cmp	r3, #32
 8005cc0:	d175      	bne.n	8005dae <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <HAL_UART_Transmit+0x2c>
 8005cc8:	88fb      	ldrh	r3, [r7, #6]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e06e      	b.n	8005db0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2221      	movs	r2, #33	@ 0x21
 8005cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ce0:	f7fc fc76 	bl	80025d0 <HAL_GetTick>
 8005ce4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	88fa      	ldrh	r2, [r7, #6]
 8005cea:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	88fa      	ldrh	r2, [r7, #6]
 8005cf0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cfa:	d108      	bne.n	8005d0e <HAL_UART_Transmit+0x6c>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d104      	bne.n	8005d0e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005d04:	2300      	movs	r3, #0
 8005d06:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	61bb      	str	r3, [r7, #24]
 8005d0c:	e003      	b.n	8005d16 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d12:	2300      	movs	r3, #0
 8005d14:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d16:	e02e      	b.n	8005d76 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	2180      	movs	r1, #128	@ 0x80
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 fb20 	bl	8006368 <UART_WaitOnFlagUntilTimeout>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d005      	beq.n	8005d3a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2220      	movs	r2, #32
 8005d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e03a      	b.n	8005db0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10b      	bne.n	8005d58 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	881b      	ldrh	r3, [r3, #0]
 8005d44:	461a      	mov	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d4e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	3302      	adds	r3, #2
 8005d54:	61bb      	str	r3, [r7, #24]
 8005d56:	e007      	b.n	8005d68 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	781a      	ldrb	r2, [r3, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	3301      	adds	r3, #1
 8005d66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1cb      	bne.n	8005d18 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	9300      	str	r3, [sp, #0]
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	2200      	movs	r2, #0
 8005d88:	2140      	movs	r1, #64	@ 0x40
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 faec 	bl	8006368 <UART_WaitOnFlagUntilTimeout>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d005      	beq.n	8005da2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2220      	movs	r2, #32
 8005d9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e006      	b.n	8005db0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2220      	movs	r2, #32
 8005da6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005daa:	2300      	movs	r3, #0
 8005dac:	e000      	b.n	8005db0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005dae:	2302      	movs	r3, #2
  }
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3720      	adds	r7, #32
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b20      	cmp	r3, #32
 8005dd0:	d112      	bne.n	8005df8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d002      	beq.n	8005dde <HAL_UART_Receive_IT+0x26>
 8005dd8:	88fb      	ldrh	r3, [r7, #6]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e00b      	b.n	8005dfa <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005de8:	88fb      	ldrh	r3, [r7, #6]
 8005dea:	461a      	mov	r2, r3
 8005dec:	68b9      	ldr	r1, [r7, #8]
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f000 fb13 	bl	800641a <UART_Start_Receive_IT>
 8005df4:	4603      	mov	r3, r0
 8005df6:	e000      	b.n	8005dfa <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005df8:	2302      	movs	r3, #2
  }
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
	...

08005e04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b0ba      	sub	sp, #232	@ 0xe8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e3a:	f003 030f 	and.w	r3, r3, #15
 8005e3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005e42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10f      	bne.n	8005e6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e4e:	f003 0320 	and.w	r3, r3, #32
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d009      	beq.n	8005e6a <HAL_UART_IRQHandler+0x66>
 8005e56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e5a:	f003 0320 	and.w	r3, r3, #32
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d003      	beq.n	8005e6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 fbf2 	bl	800664c <UART_Receive_IT>
      return;
 8005e68:	e25b      	b.n	8006322 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f000 80de 	beq.w	8006030 <HAL_UART_IRQHandler+0x22c>
 8005e74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d106      	bne.n	8005e8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e84:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f000 80d1 	beq.w	8006030 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00b      	beq.n	8005eb2 <HAL_UART_IRQHandler+0xae>
 8005e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d005      	beq.n	8005eb2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eaa:	f043 0201 	orr.w	r2, r3, #1
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eb6:	f003 0304 	and.w	r3, r3, #4
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00b      	beq.n	8005ed6 <HAL_UART_IRQHandler+0xd2>
 8005ebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d005      	beq.n	8005ed6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ece:	f043 0202 	orr.w	r2, r3, #2
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00b      	beq.n	8005efa <HAL_UART_IRQHandler+0xf6>
 8005ee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d005      	beq.n	8005efa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ef2:	f043 0204 	orr.w	r2, r3, #4
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005efe:	f003 0308 	and.w	r3, r3, #8
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d011      	beq.n	8005f2a <HAL_UART_IRQHandler+0x126>
 8005f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f0a:	f003 0320 	and.w	r3, r3, #32
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d105      	bne.n	8005f1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d005      	beq.n	8005f2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f22:	f043 0208 	orr.w	r2, r3, #8
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f000 81f2 	beq.w	8006318 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f38:	f003 0320 	and.w	r3, r3, #32
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d008      	beq.n	8005f52 <HAL_UART_IRQHandler+0x14e>
 8005f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f44:	f003 0320 	and.w	r3, r3, #32
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fb7d 	bl	800664c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	695b      	ldr	r3, [r3, #20]
 8005f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f5c:	2b40      	cmp	r3, #64	@ 0x40
 8005f5e:	bf0c      	ite	eq
 8005f60:	2301      	moveq	r3, #1
 8005f62:	2300      	movne	r3, #0
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f6e:	f003 0308 	and.w	r3, r3, #8
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d103      	bne.n	8005f7e <HAL_UART_IRQHandler+0x17a>
 8005f76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d04f      	beq.n	800601e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 fa85 	bl	800648e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f8e:	2b40      	cmp	r3, #64	@ 0x40
 8005f90:	d141      	bne.n	8006016 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	3314      	adds	r3, #20
 8005f98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005fa0:	e853 3f00 	ldrex	r3, [r3]
 8005fa4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005fa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005fac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	3314      	adds	r3, #20
 8005fba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005fbe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005fc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005fca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005fce:	e841 2300 	strex	r3, r2, [r1]
 8005fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005fd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1d9      	bne.n	8005f92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d013      	beq.n	800600e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fea:	4a7e      	ldr	r2, [pc, #504]	@ (80061e4 <HAL_UART_IRQHandler+0x3e0>)
 8005fec:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7fc fc9d 	bl	8002932 <HAL_DMA_Abort_IT>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d016      	beq.n	800602c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006008:	4610      	mov	r0, r2
 800600a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800600c:	e00e      	b.n	800602c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f994 	bl	800633c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006014:	e00a      	b.n	800602c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f990 	bl	800633c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800601c:	e006      	b.n	800602c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f98c 	bl	800633c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800602a:	e175      	b.n	8006318 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800602c:	bf00      	nop
    return;
 800602e:	e173      	b.n	8006318 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006034:	2b01      	cmp	r3, #1
 8006036:	f040 814f 	bne.w	80062d8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800603a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800603e:	f003 0310 	and.w	r3, r3, #16
 8006042:	2b00      	cmp	r3, #0
 8006044:	f000 8148 	beq.w	80062d8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800604c:	f003 0310 	and.w	r3, r3, #16
 8006050:	2b00      	cmp	r3, #0
 8006052:	f000 8141 	beq.w	80062d8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006056:	2300      	movs	r3, #0
 8006058:	60bb      	str	r3, [r7, #8]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	60bb      	str	r3, [r7, #8]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	60bb      	str	r3, [r7, #8]
 800606a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006076:	2b40      	cmp	r3, #64	@ 0x40
 8006078:	f040 80b6 	bne.w	80061e8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006088:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800608c:	2b00      	cmp	r3, #0
 800608e:	f000 8145 	beq.w	800631c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006096:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800609a:	429a      	cmp	r2, r3
 800609c:	f080 813e 	bcs.w	800631c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80060a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060b2:	f000 8088 	beq.w	80061c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	330c      	adds	r3, #12
 80060bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80060c4:	e853 3f00 	ldrex	r3, [r3]
 80060c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80060cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80060d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	330c      	adds	r3, #12
 80060de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80060e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80060e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80060ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80060f2:	e841 2300 	strex	r3, r2, [r1]
 80060f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80060fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1d9      	bne.n	80060b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	3314      	adds	r3, #20
 8006108:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800610c:	e853 3f00 	ldrex	r3, [r3]
 8006110:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006112:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006114:	f023 0301 	bic.w	r3, r3, #1
 8006118:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3314      	adds	r3, #20
 8006122:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006126:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800612a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800612e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006132:	e841 2300 	strex	r3, r2, [r1]
 8006136:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006138:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1e1      	bne.n	8006102 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	3314      	adds	r3, #20
 8006144:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006146:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006148:	e853 3f00 	ldrex	r3, [r3]
 800614c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800614e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006150:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006154:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3314      	adds	r3, #20
 800615e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006162:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006164:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006166:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006168:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800616a:	e841 2300 	strex	r3, r2, [r1]
 800616e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006170:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1e3      	bne.n	800613e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2220      	movs	r2, #32
 800617a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	330c      	adds	r3, #12
 800618a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800618e:	e853 3f00 	ldrex	r3, [r3]
 8006192:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006194:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006196:	f023 0310 	bic.w	r3, r3, #16
 800619a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	330c      	adds	r3, #12
 80061a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80061a8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80061aa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80061ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80061b0:	e841 2300 	strex	r3, r2, [r1]
 80061b4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80061b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1e3      	bne.n	8006184 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7fc fb46 	bl	8002852 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2202      	movs	r2, #2
 80061ca:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	b29b      	uxth	r3, r3
 80061da:	4619      	mov	r1, r3
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 f8b7 	bl	8006350 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061e2:	e09b      	b.n	800631c <HAL_UART_IRQHandler+0x518>
 80061e4:	08006555 	.word	0x08006555
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f000 808e 	beq.w	8006320 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006204:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 8089 	beq.w	8006320 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	330c      	adds	r3, #12
 8006214:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006218:	e853 3f00 	ldrex	r3, [r3]
 800621c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800621e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006220:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006224:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	330c      	adds	r3, #12
 800622e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006232:	647a      	str	r2, [r7, #68]	@ 0x44
 8006234:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006236:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006238:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800623a:	e841 2300 	strex	r3, r2, [r1]
 800623e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1e3      	bne.n	800620e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	3314      	adds	r3, #20
 800624c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006250:	e853 3f00 	ldrex	r3, [r3]
 8006254:	623b      	str	r3, [r7, #32]
   return(result);
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	f023 0301 	bic.w	r3, r3, #1
 800625c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	3314      	adds	r3, #20
 8006266:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800626a:	633a      	str	r2, [r7, #48]	@ 0x30
 800626c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006270:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006272:	e841 2300 	strex	r3, r2, [r1]
 8006276:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1e3      	bne.n	8006246 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2220      	movs	r2, #32
 8006282:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	330c      	adds	r3, #12
 8006292:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	e853 3f00 	ldrex	r3, [r3]
 800629a:	60fb      	str	r3, [r7, #12]
   return(result);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0310 	bic.w	r3, r3, #16
 80062a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	330c      	adds	r3, #12
 80062ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80062b0:	61fa      	str	r2, [r7, #28]
 80062b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b4:	69b9      	ldr	r1, [r7, #24]
 80062b6:	69fa      	ldr	r2, [r7, #28]
 80062b8:	e841 2300 	strex	r3, r2, [r1]
 80062bc:	617b      	str	r3, [r7, #20]
   return(result);
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1e3      	bne.n	800628c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2202      	movs	r2, #2
 80062c8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80062ce:	4619      	mov	r1, r3
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 f83d 	bl	8006350 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062d6:	e023      	b.n	8006320 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80062d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d009      	beq.n	80062f8 <HAL_UART_IRQHandler+0x4f4>
 80062e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d003      	beq.n	80062f8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 f943 	bl	800657c <UART_Transmit_IT>
    return;
 80062f6:	e014      	b.n	8006322 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00e      	beq.n	8006322 <HAL_UART_IRQHandler+0x51e>
 8006304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800630c:	2b00      	cmp	r3, #0
 800630e:	d008      	beq.n	8006322 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 f983 	bl	800661c <UART_EndTransmit_IT>
    return;
 8006316:	e004      	b.n	8006322 <HAL_UART_IRQHandler+0x51e>
    return;
 8006318:	bf00      	nop
 800631a:	e002      	b.n	8006322 <HAL_UART_IRQHandler+0x51e>
      return;
 800631c:	bf00      	nop
 800631e:	e000      	b.n	8006322 <HAL_UART_IRQHandler+0x51e>
      return;
 8006320:	bf00      	nop
  }
}
 8006322:	37e8      	adds	r7, #232	@ 0xe8
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	460b      	mov	r3, r1
 800635a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	603b      	str	r3, [r7, #0]
 8006374:	4613      	mov	r3, r2
 8006376:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006378:	e03b      	b.n	80063f2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800637a:	6a3b      	ldr	r3, [r7, #32]
 800637c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006380:	d037      	beq.n	80063f2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006382:	f7fc f925 	bl	80025d0 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	6a3a      	ldr	r2, [r7, #32]
 800638e:	429a      	cmp	r2, r3
 8006390:	d302      	bcc.n	8006398 <UART_WaitOnFlagUntilTimeout+0x30>
 8006392:	6a3b      	ldr	r3, [r7, #32]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d101      	bne.n	800639c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e03a      	b.n	8006412 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	f003 0304 	and.w	r3, r3, #4
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d023      	beq.n	80063f2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	2b80      	cmp	r3, #128	@ 0x80
 80063ae:	d020      	beq.n	80063f2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2b40      	cmp	r3, #64	@ 0x40
 80063b4:	d01d      	beq.n	80063f2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0308 	and.w	r3, r3, #8
 80063c0:	2b08      	cmp	r3, #8
 80063c2:	d116      	bne.n	80063f2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80063c4:	2300      	movs	r3, #0
 80063c6:	617b      	str	r3, [r7, #20]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	617b      	str	r3, [r7, #20]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	617b      	str	r3, [r7, #20]
 80063d8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f000 f857 	bl	800648e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2208      	movs	r2, #8
 80063e4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e00f      	b.n	8006412 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	4013      	ands	r3, r2
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	429a      	cmp	r2, r3
 8006400:	bf0c      	ite	eq
 8006402:	2301      	moveq	r3, #1
 8006404:	2300      	movne	r3, #0
 8006406:	b2db      	uxtb	r3, r3
 8006408:	461a      	mov	r2, r3
 800640a:	79fb      	ldrb	r3, [r7, #7]
 800640c:	429a      	cmp	r2, r3
 800640e:	d0b4      	beq.n	800637a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3718      	adds	r7, #24
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800641a:	b480      	push	{r7}
 800641c:	b085      	sub	sp, #20
 800641e:	af00      	add	r7, sp, #0
 8006420:	60f8      	str	r0, [r7, #12]
 8006422:	60b9      	str	r1, [r7, #8]
 8006424:	4613      	mov	r3, r2
 8006426:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	88fa      	ldrh	r2, [r7, #6]
 8006432:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	88fa      	ldrh	r2, [r7, #6]
 8006438:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2222      	movs	r2, #34	@ 0x22
 8006444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d007      	beq.n	8006460 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68da      	ldr	r2, [r3, #12]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800645e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	695a      	ldr	r2, [r3, #20]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f042 0201 	orr.w	r2, r2, #1
 800646e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68da      	ldr	r2, [r3, #12]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f042 0220 	orr.w	r2, r2, #32
 800647e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3714      	adds	r7, #20
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800648e:	b480      	push	{r7}
 8006490:	b095      	sub	sp, #84	@ 0x54
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	330c      	adds	r3, #12
 800649c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064a0:	e853 3f00 	ldrex	r3, [r3]
 80064a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80064a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	330c      	adds	r3, #12
 80064b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80064b6:	643a      	str	r2, [r7, #64]	@ 0x40
 80064b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80064bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80064be:	e841 2300 	strex	r3, r2, [r1]
 80064c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80064c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1e5      	bne.n	8006496 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	3314      	adds	r3, #20
 80064d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	e853 3f00 	ldrex	r3, [r3]
 80064d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	f023 0301 	bic.w	r3, r3, #1
 80064e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	3314      	adds	r3, #20
 80064e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064f2:	e841 2300 	strex	r3, r2, [r1]
 80064f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1e5      	bne.n	80064ca <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006502:	2b01      	cmp	r3, #1
 8006504:	d119      	bne.n	800653a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	330c      	adds	r3, #12
 800650c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	e853 3f00 	ldrex	r3, [r3]
 8006514:	60bb      	str	r3, [r7, #8]
   return(result);
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	f023 0310 	bic.w	r3, r3, #16
 800651c:	647b      	str	r3, [r7, #68]	@ 0x44
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	330c      	adds	r3, #12
 8006524:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006526:	61ba      	str	r2, [r7, #24]
 8006528:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652a:	6979      	ldr	r1, [r7, #20]
 800652c:	69ba      	ldr	r2, [r7, #24]
 800652e:	e841 2300 	strex	r3, r2, [r1]
 8006532:	613b      	str	r3, [r7, #16]
   return(result);
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1e5      	bne.n	8006506 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2220      	movs	r2, #32
 800653e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006548:	bf00      	nop
 800654a:	3754      	adds	r7, #84	@ 0x54
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006560:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f7ff fee4 	bl	800633c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006574:	bf00      	nop
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b21      	cmp	r3, #33	@ 0x21
 800658e:	d13e      	bne.n	800660e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006598:	d114      	bne.n	80065c4 <UART_Transmit_IT+0x48>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d110      	bne.n	80065c4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	881b      	ldrh	r3, [r3, #0]
 80065ac:	461a      	mov	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065b6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	1c9a      	adds	r2, r3, #2
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	621a      	str	r2, [r3, #32]
 80065c2:	e008      	b.n	80065d6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a1b      	ldr	r3, [r3, #32]
 80065c8:	1c59      	adds	r1, r3, #1
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	6211      	str	r1, [r2, #32]
 80065ce:	781a      	ldrb	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80065da:	b29b      	uxth	r3, r3
 80065dc:	3b01      	subs	r3, #1
 80065de:	b29b      	uxth	r3, r3
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	4619      	mov	r1, r3
 80065e4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10f      	bne.n	800660a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68da      	ldr	r2, [r3, #12]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80065f8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68da      	ldr	r2, [r3, #12]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006608:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800660a:	2300      	movs	r3, #0
 800660c:	e000      	b.n	8006610 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800660e:	2302      	movs	r3, #2
  }
}
 8006610:	4618      	mov	r0, r3
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68da      	ldr	r2, [r3, #12]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006632:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2220      	movs	r2, #32
 8006638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7ff fe73 	bl	8006328 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3708      	adds	r7, #8
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b08c      	sub	sp, #48	@ 0x30
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800665a:	b2db      	uxtb	r3, r3
 800665c:	2b22      	cmp	r3, #34	@ 0x22
 800665e:	f040 80ae 	bne.w	80067be <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800666a:	d117      	bne.n	800669c <UART_Receive_IT+0x50>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d113      	bne.n	800669c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006674:	2300      	movs	r3, #0
 8006676:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800667c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	b29b      	uxth	r3, r3
 8006686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800668a:	b29a      	uxth	r2, r3
 800668c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800668e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006694:	1c9a      	adds	r2, r3, #2
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	629a      	str	r2, [r3, #40]	@ 0x28
 800669a:	e026      	b.n	80066ea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80066a2:	2300      	movs	r3, #0
 80066a4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066ae:	d007      	beq.n	80066c0 <UART_Receive_IT+0x74>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10a      	bne.n	80066ce <UART_Receive_IT+0x82>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d106      	bne.n	80066ce <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ca:	701a      	strb	r2, [r3, #0]
 80066cc:	e008      	b.n	80066e0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066da:	b2da      	uxtb	r2, r3
 80066dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066de:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e4:	1c5a      	adds	r2, r3, #1
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	3b01      	subs	r3, #1
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	4619      	mov	r1, r3
 80066f8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d15d      	bne.n	80067ba <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68da      	ldr	r2, [r3, #12]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f022 0220 	bic.w	r2, r2, #32
 800670c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68da      	ldr	r2, [r3, #12]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800671c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	695a      	ldr	r2, [r3, #20]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f022 0201 	bic.w	r2, r2, #1
 800672c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2220      	movs	r2, #32
 8006732:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006740:	2b01      	cmp	r3, #1
 8006742:	d135      	bne.n	80067b0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	330c      	adds	r3, #12
 8006750:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	e853 3f00 	ldrex	r3, [r3]
 8006758:	613b      	str	r3, [r7, #16]
   return(result);
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	f023 0310 	bic.w	r3, r3, #16
 8006760:	627b      	str	r3, [r7, #36]	@ 0x24
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	330c      	adds	r3, #12
 8006768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800676a:	623a      	str	r2, [r7, #32]
 800676c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676e:	69f9      	ldr	r1, [r7, #28]
 8006770:	6a3a      	ldr	r2, [r7, #32]
 8006772:	e841 2300 	strex	r3, r2, [r1]
 8006776:	61bb      	str	r3, [r7, #24]
   return(result);
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1e5      	bne.n	800674a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0310 	and.w	r3, r3, #16
 8006788:	2b10      	cmp	r3, #16
 800678a:	d10a      	bne.n	80067a2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800678c:	2300      	movs	r3, #0
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	60fb      	str	r3, [r7, #12]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	60fb      	str	r3, [r7, #12]
 80067a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80067a6:	4619      	mov	r1, r3
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f7ff fdd1 	bl	8006350 <HAL_UARTEx_RxEventCallback>
 80067ae:	e002      	b.n	80067b6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f7fb fb89 	bl	8001ec8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80067b6:	2300      	movs	r3, #0
 80067b8:	e002      	b.n	80067c0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	e000      	b.n	80067c0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80067be:	2302      	movs	r3, #2
  }
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3730      	adds	r7, #48	@ 0x30
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067cc:	b0c0      	sub	sp, #256	@ 0x100
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80067e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067e4:	68d9      	ldr	r1, [r3, #12]
 80067e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	ea40 0301 	orr.w	r3, r0, r1
 80067f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067f6:	689a      	ldr	r2, [r3, #8]
 80067f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	431a      	orrs	r2, r3
 8006800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	431a      	orrs	r2, r3
 8006808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800680c:	69db      	ldr	r3, [r3, #28]
 800680e:	4313      	orrs	r3, r2
 8006810:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006820:	f021 010c 	bic.w	r1, r1, #12
 8006824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800682e:	430b      	orrs	r3, r1
 8006830:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800683e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006842:	6999      	ldr	r1, [r3, #24]
 8006844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	ea40 0301 	orr.w	r3, r0, r1
 800684e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	4b8f      	ldr	r3, [pc, #572]	@ (8006a94 <UART_SetConfig+0x2cc>)
 8006858:	429a      	cmp	r2, r3
 800685a:	d005      	beq.n	8006868 <UART_SetConfig+0xa0>
 800685c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	4b8d      	ldr	r3, [pc, #564]	@ (8006a98 <UART_SetConfig+0x2d0>)
 8006864:	429a      	cmp	r2, r3
 8006866:	d104      	bne.n	8006872 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006868:	f7fe fce6 	bl	8005238 <HAL_RCC_GetPCLK2Freq>
 800686c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006870:	e003      	b.n	800687a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006872:	f7fe fccd 	bl	8005210 <HAL_RCC_GetPCLK1Freq>
 8006876:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800687a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800687e:	69db      	ldr	r3, [r3, #28]
 8006880:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006884:	f040 810c 	bne.w	8006aa0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006888:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800688c:	2200      	movs	r2, #0
 800688e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006892:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006896:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800689a:	4622      	mov	r2, r4
 800689c:	462b      	mov	r3, r5
 800689e:	1891      	adds	r1, r2, r2
 80068a0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80068a2:	415b      	adcs	r3, r3
 80068a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80068aa:	4621      	mov	r1, r4
 80068ac:	eb12 0801 	adds.w	r8, r2, r1
 80068b0:	4629      	mov	r1, r5
 80068b2:	eb43 0901 	adc.w	r9, r3, r1
 80068b6:	f04f 0200 	mov.w	r2, #0
 80068ba:	f04f 0300 	mov.w	r3, #0
 80068be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068ca:	4690      	mov	r8, r2
 80068cc:	4699      	mov	r9, r3
 80068ce:	4623      	mov	r3, r4
 80068d0:	eb18 0303 	adds.w	r3, r8, r3
 80068d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80068d8:	462b      	mov	r3, r5
 80068da:	eb49 0303 	adc.w	r3, r9, r3
 80068de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80068e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80068ee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80068f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80068f6:	460b      	mov	r3, r1
 80068f8:	18db      	adds	r3, r3, r3
 80068fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80068fc:	4613      	mov	r3, r2
 80068fe:	eb42 0303 	adc.w	r3, r2, r3
 8006902:	657b      	str	r3, [r7, #84]	@ 0x54
 8006904:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006908:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800690c:	f7f9 fc82 	bl	8000214 <__aeabi_uldivmod>
 8006910:	4602      	mov	r2, r0
 8006912:	460b      	mov	r3, r1
 8006914:	4b61      	ldr	r3, [pc, #388]	@ (8006a9c <UART_SetConfig+0x2d4>)
 8006916:	fba3 2302 	umull	r2, r3, r3, r2
 800691a:	095b      	lsrs	r3, r3, #5
 800691c:	011c      	lsls	r4, r3, #4
 800691e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006922:	2200      	movs	r2, #0
 8006924:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006928:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800692c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006930:	4642      	mov	r2, r8
 8006932:	464b      	mov	r3, r9
 8006934:	1891      	adds	r1, r2, r2
 8006936:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006938:	415b      	adcs	r3, r3
 800693a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800693c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006940:	4641      	mov	r1, r8
 8006942:	eb12 0a01 	adds.w	sl, r2, r1
 8006946:	4649      	mov	r1, r9
 8006948:	eb43 0b01 	adc.w	fp, r3, r1
 800694c:	f04f 0200 	mov.w	r2, #0
 8006950:	f04f 0300 	mov.w	r3, #0
 8006954:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006958:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800695c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006960:	4692      	mov	sl, r2
 8006962:	469b      	mov	fp, r3
 8006964:	4643      	mov	r3, r8
 8006966:	eb1a 0303 	adds.w	r3, sl, r3
 800696a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800696e:	464b      	mov	r3, r9
 8006970:	eb4b 0303 	adc.w	r3, fp, r3
 8006974:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006984:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006988:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800698c:	460b      	mov	r3, r1
 800698e:	18db      	adds	r3, r3, r3
 8006990:	643b      	str	r3, [r7, #64]	@ 0x40
 8006992:	4613      	mov	r3, r2
 8006994:	eb42 0303 	adc.w	r3, r2, r3
 8006998:	647b      	str	r3, [r7, #68]	@ 0x44
 800699a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800699e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80069a2:	f7f9 fc37 	bl	8000214 <__aeabi_uldivmod>
 80069a6:	4602      	mov	r2, r0
 80069a8:	460b      	mov	r3, r1
 80069aa:	4611      	mov	r1, r2
 80069ac:	4b3b      	ldr	r3, [pc, #236]	@ (8006a9c <UART_SetConfig+0x2d4>)
 80069ae:	fba3 2301 	umull	r2, r3, r3, r1
 80069b2:	095b      	lsrs	r3, r3, #5
 80069b4:	2264      	movs	r2, #100	@ 0x64
 80069b6:	fb02 f303 	mul.w	r3, r2, r3
 80069ba:	1acb      	subs	r3, r1, r3
 80069bc:	00db      	lsls	r3, r3, #3
 80069be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80069c2:	4b36      	ldr	r3, [pc, #216]	@ (8006a9c <UART_SetConfig+0x2d4>)
 80069c4:	fba3 2302 	umull	r2, r3, r3, r2
 80069c8:	095b      	lsrs	r3, r3, #5
 80069ca:	005b      	lsls	r3, r3, #1
 80069cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80069d0:	441c      	add	r4, r3
 80069d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069d6:	2200      	movs	r2, #0
 80069d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80069dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80069e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80069e4:	4642      	mov	r2, r8
 80069e6:	464b      	mov	r3, r9
 80069e8:	1891      	adds	r1, r2, r2
 80069ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80069ec:	415b      	adcs	r3, r3
 80069ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80069f4:	4641      	mov	r1, r8
 80069f6:	1851      	adds	r1, r2, r1
 80069f8:	6339      	str	r1, [r7, #48]	@ 0x30
 80069fa:	4649      	mov	r1, r9
 80069fc:	414b      	adcs	r3, r1
 80069fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a00:	f04f 0200 	mov.w	r2, #0
 8006a04:	f04f 0300 	mov.w	r3, #0
 8006a08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006a0c:	4659      	mov	r1, fp
 8006a0e:	00cb      	lsls	r3, r1, #3
 8006a10:	4651      	mov	r1, sl
 8006a12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a16:	4651      	mov	r1, sl
 8006a18:	00ca      	lsls	r2, r1, #3
 8006a1a:	4610      	mov	r0, r2
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	4603      	mov	r3, r0
 8006a20:	4642      	mov	r2, r8
 8006a22:	189b      	adds	r3, r3, r2
 8006a24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a28:	464b      	mov	r3, r9
 8006a2a:	460a      	mov	r2, r1
 8006a2c:	eb42 0303 	adc.w	r3, r2, r3
 8006a30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006a40:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006a44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006a48:	460b      	mov	r3, r1
 8006a4a:	18db      	adds	r3, r3, r3
 8006a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a4e:	4613      	mov	r3, r2
 8006a50:	eb42 0303 	adc.w	r3, r2, r3
 8006a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006a5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006a5e:	f7f9 fbd9 	bl	8000214 <__aeabi_uldivmod>
 8006a62:	4602      	mov	r2, r0
 8006a64:	460b      	mov	r3, r1
 8006a66:	4b0d      	ldr	r3, [pc, #52]	@ (8006a9c <UART_SetConfig+0x2d4>)
 8006a68:	fba3 1302 	umull	r1, r3, r3, r2
 8006a6c:	095b      	lsrs	r3, r3, #5
 8006a6e:	2164      	movs	r1, #100	@ 0x64
 8006a70:	fb01 f303 	mul.w	r3, r1, r3
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	00db      	lsls	r3, r3, #3
 8006a78:	3332      	adds	r3, #50	@ 0x32
 8006a7a:	4a08      	ldr	r2, [pc, #32]	@ (8006a9c <UART_SetConfig+0x2d4>)
 8006a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a80:	095b      	lsrs	r3, r3, #5
 8006a82:	f003 0207 	and.w	r2, r3, #7
 8006a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4422      	add	r2, r4
 8006a8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a90:	e106      	b.n	8006ca0 <UART_SetConfig+0x4d8>
 8006a92:	bf00      	nop
 8006a94:	40011000 	.word	0x40011000
 8006a98:	40011400 	.word	0x40011400
 8006a9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006aa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006aaa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006aae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006ab2:	4642      	mov	r2, r8
 8006ab4:	464b      	mov	r3, r9
 8006ab6:	1891      	adds	r1, r2, r2
 8006ab8:	6239      	str	r1, [r7, #32]
 8006aba:	415b      	adcs	r3, r3
 8006abc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006abe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ac2:	4641      	mov	r1, r8
 8006ac4:	1854      	adds	r4, r2, r1
 8006ac6:	4649      	mov	r1, r9
 8006ac8:	eb43 0501 	adc.w	r5, r3, r1
 8006acc:	f04f 0200 	mov.w	r2, #0
 8006ad0:	f04f 0300 	mov.w	r3, #0
 8006ad4:	00eb      	lsls	r3, r5, #3
 8006ad6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ada:	00e2      	lsls	r2, r4, #3
 8006adc:	4614      	mov	r4, r2
 8006ade:	461d      	mov	r5, r3
 8006ae0:	4643      	mov	r3, r8
 8006ae2:	18e3      	adds	r3, r4, r3
 8006ae4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ae8:	464b      	mov	r3, r9
 8006aea:	eb45 0303 	adc.w	r3, r5, r3
 8006aee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006afe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006b02:	f04f 0200 	mov.w	r2, #0
 8006b06:	f04f 0300 	mov.w	r3, #0
 8006b0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006b0e:	4629      	mov	r1, r5
 8006b10:	008b      	lsls	r3, r1, #2
 8006b12:	4621      	mov	r1, r4
 8006b14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b18:	4621      	mov	r1, r4
 8006b1a:	008a      	lsls	r2, r1, #2
 8006b1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006b20:	f7f9 fb78 	bl	8000214 <__aeabi_uldivmod>
 8006b24:	4602      	mov	r2, r0
 8006b26:	460b      	mov	r3, r1
 8006b28:	4b60      	ldr	r3, [pc, #384]	@ (8006cac <UART_SetConfig+0x4e4>)
 8006b2a:	fba3 2302 	umull	r2, r3, r3, r2
 8006b2e:	095b      	lsrs	r3, r3, #5
 8006b30:	011c      	lsls	r4, r3, #4
 8006b32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b36:	2200      	movs	r2, #0
 8006b38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b3c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006b40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006b44:	4642      	mov	r2, r8
 8006b46:	464b      	mov	r3, r9
 8006b48:	1891      	adds	r1, r2, r2
 8006b4a:	61b9      	str	r1, [r7, #24]
 8006b4c:	415b      	adcs	r3, r3
 8006b4e:	61fb      	str	r3, [r7, #28]
 8006b50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b54:	4641      	mov	r1, r8
 8006b56:	1851      	adds	r1, r2, r1
 8006b58:	6139      	str	r1, [r7, #16]
 8006b5a:	4649      	mov	r1, r9
 8006b5c:	414b      	adcs	r3, r1
 8006b5e:	617b      	str	r3, [r7, #20]
 8006b60:	f04f 0200 	mov.w	r2, #0
 8006b64:	f04f 0300 	mov.w	r3, #0
 8006b68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b6c:	4659      	mov	r1, fp
 8006b6e:	00cb      	lsls	r3, r1, #3
 8006b70:	4651      	mov	r1, sl
 8006b72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b76:	4651      	mov	r1, sl
 8006b78:	00ca      	lsls	r2, r1, #3
 8006b7a:	4610      	mov	r0, r2
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	4603      	mov	r3, r0
 8006b80:	4642      	mov	r2, r8
 8006b82:	189b      	adds	r3, r3, r2
 8006b84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b88:	464b      	mov	r3, r9
 8006b8a:	460a      	mov	r2, r1
 8006b8c:	eb42 0303 	adc.w	r3, r2, r3
 8006b90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b9e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006ba0:	f04f 0200 	mov.w	r2, #0
 8006ba4:	f04f 0300 	mov.w	r3, #0
 8006ba8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006bac:	4649      	mov	r1, r9
 8006bae:	008b      	lsls	r3, r1, #2
 8006bb0:	4641      	mov	r1, r8
 8006bb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bb6:	4641      	mov	r1, r8
 8006bb8:	008a      	lsls	r2, r1, #2
 8006bba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006bbe:	f7f9 fb29 	bl	8000214 <__aeabi_uldivmod>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	4611      	mov	r1, r2
 8006bc8:	4b38      	ldr	r3, [pc, #224]	@ (8006cac <UART_SetConfig+0x4e4>)
 8006bca:	fba3 2301 	umull	r2, r3, r3, r1
 8006bce:	095b      	lsrs	r3, r3, #5
 8006bd0:	2264      	movs	r2, #100	@ 0x64
 8006bd2:	fb02 f303 	mul.w	r3, r2, r3
 8006bd6:	1acb      	subs	r3, r1, r3
 8006bd8:	011b      	lsls	r3, r3, #4
 8006bda:	3332      	adds	r3, #50	@ 0x32
 8006bdc:	4a33      	ldr	r2, [pc, #204]	@ (8006cac <UART_SetConfig+0x4e4>)
 8006bde:	fba2 2303 	umull	r2, r3, r2, r3
 8006be2:	095b      	lsrs	r3, r3, #5
 8006be4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006be8:	441c      	add	r4, r3
 8006bea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bee:	2200      	movs	r2, #0
 8006bf0:	673b      	str	r3, [r7, #112]	@ 0x70
 8006bf2:	677a      	str	r2, [r7, #116]	@ 0x74
 8006bf4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006bf8:	4642      	mov	r2, r8
 8006bfa:	464b      	mov	r3, r9
 8006bfc:	1891      	adds	r1, r2, r2
 8006bfe:	60b9      	str	r1, [r7, #8]
 8006c00:	415b      	adcs	r3, r3
 8006c02:	60fb      	str	r3, [r7, #12]
 8006c04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c08:	4641      	mov	r1, r8
 8006c0a:	1851      	adds	r1, r2, r1
 8006c0c:	6039      	str	r1, [r7, #0]
 8006c0e:	4649      	mov	r1, r9
 8006c10:	414b      	adcs	r3, r1
 8006c12:	607b      	str	r3, [r7, #4]
 8006c14:	f04f 0200 	mov.w	r2, #0
 8006c18:	f04f 0300 	mov.w	r3, #0
 8006c1c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c20:	4659      	mov	r1, fp
 8006c22:	00cb      	lsls	r3, r1, #3
 8006c24:	4651      	mov	r1, sl
 8006c26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c2a:	4651      	mov	r1, sl
 8006c2c:	00ca      	lsls	r2, r1, #3
 8006c2e:	4610      	mov	r0, r2
 8006c30:	4619      	mov	r1, r3
 8006c32:	4603      	mov	r3, r0
 8006c34:	4642      	mov	r2, r8
 8006c36:	189b      	adds	r3, r3, r2
 8006c38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c3a:	464b      	mov	r3, r9
 8006c3c:	460a      	mov	r2, r1
 8006c3e:	eb42 0303 	adc.w	r3, r2, r3
 8006c42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c4e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006c50:	f04f 0200 	mov.w	r2, #0
 8006c54:	f04f 0300 	mov.w	r3, #0
 8006c58:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006c5c:	4649      	mov	r1, r9
 8006c5e:	008b      	lsls	r3, r1, #2
 8006c60:	4641      	mov	r1, r8
 8006c62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c66:	4641      	mov	r1, r8
 8006c68:	008a      	lsls	r2, r1, #2
 8006c6a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006c6e:	f7f9 fad1 	bl	8000214 <__aeabi_uldivmod>
 8006c72:	4602      	mov	r2, r0
 8006c74:	460b      	mov	r3, r1
 8006c76:	4b0d      	ldr	r3, [pc, #52]	@ (8006cac <UART_SetConfig+0x4e4>)
 8006c78:	fba3 1302 	umull	r1, r3, r3, r2
 8006c7c:	095b      	lsrs	r3, r3, #5
 8006c7e:	2164      	movs	r1, #100	@ 0x64
 8006c80:	fb01 f303 	mul.w	r3, r1, r3
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	011b      	lsls	r3, r3, #4
 8006c88:	3332      	adds	r3, #50	@ 0x32
 8006c8a:	4a08      	ldr	r2, [pc, #32]	@ (8006cac <UART_SetConfig+0x4e4>)
 8006c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c90:	095b      	lsrs	r3, r3, #5
 8006c92:	f003 020f 	and.w	r2, r3, #15
 8006c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4422      	add	r2, r4
 8006c9e:	609a      	str	r2, [r3, #8]
}
 8006ca0:	bf00      	nop
 8006ca2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cac:	51eb851f 	.word	0x51eb851f

08006cb0 <memset>:
 8006cb0:	4402      	add	r2, r0
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d100      	bne.n	8006cba <memset+0xa>
 8006cb8:	4770      	bx	lr
 8006cba:	f803 1b01 	strb.w	r1, [r3], #1
 8006cbe:	e7f9      	b.n	8006cb4 <memset+0x4>

08006cc0 <__libc_init_array>:
 8006cc0:	b570      	push	{r4, r5, r6, lr}
 8006cc2:	4d0d      	ldr	r5, [pc, #52]	@ (8006cf8 <__libc_init_array+0x38>)
 8006cc4:	4c0d      	ldr	r4, [pc, #52]	@ (8006cfc <__libc_init_array+0x3c>)
 8006cc6:	1b64      	subs	r4, r4, r5
 8006cc8:	10a4      	asrs	r4, r4, #2
 8006cca:	2600      	movs	r6, #0
 8006ccc:	42a6      	cmp	r6, r4
 8006cce:	d109      	bne.n	8006ce4 <__libc_init_array+0x24>
 8006cd0:	4d0b      	ldr	r5, [pc, #44]	@ (8006d00 <__libc_init_array+0x40>)
 8006cd2:	4c0c      	ldr	r4, [pc, #48]	@ (8006d04 <__libc_init_array+0x44>)
 8006cd4:	f000 f818 	bl	8006d08 <_init>
 8006cd8:	1b64      	subs	r4, r4, r5
 8006cda:	10a4      	asrs	r4, r4, #2
 8006cdc:	2600      	movs	r6, #0
 8006cde:	42a6      	cmp	r6, r4
 8006ce0:	d105      	bne.n	8006cee <__libc_init_array+0x2e>
 8006ce2:	bd70      	pop	{r4, r5, r6, pc}
 8006ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ce8:	4798      	blx	r3
 8006cea:	3601      	adds	r6, #1
 8006cec:	e7ee      	b.n	8006ccc <__libc_init_array+0xc>
 8006cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cf2:	4798      	blx	r3
 8006cf4:	3601      	adds	r6, #1
 8006cf6:	e7f2      	b.n	8006cde <__libc_init_array+0x1e>
 8006cf8:	08006da0 	.word	0x08006da0
 8006cfc:	08006da0 	.word	0x08006da0
 8006d00:	08006da0 	.word	0x08006da0
 8006d04:	08006da4 	.word	0x08006da4

08006d08 <_init>:
 8006d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0a:	bf00      	nop
 8006d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d0e:	bc08      	pop	{r3}
 8006d10:	469e      	mov	lr, r3
 8006d12:	4770      	bx	lr

08006d14 <_fini>:
 8006d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d16:	bf00      	nop
 8006d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d1a:	bc08      	pop	{r3}
 8006d1c:	469e      	mov	lr, r3
 8006d1e:	4770      	bx	lr
